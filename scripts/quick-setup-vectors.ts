#!/usr/bin/env bun

import { Pool } from 'pg';

/**
 * üöÄ –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è VibeCoding
 */
async function quickSetupVectors(connectionString: string): Promise<void> {
  console.log('üïâÔ∏è ========================================');
  console.log('üöÄ –ë–´–°–¢–†–û–ï –°–û–ó–î–ê–ù–ò–ï –í–ï–ö–¢–û–†–ù–û–ô –°–¢–†–£–ö–¢–£–†–´');
  console.log('üïâÔ∏è ========================================\n');

  const pool = new Pool({ connectionString });
  const client = await pool.connect();

  try {
    // 1. –í–∫–ª—é—á–∞–µ–º pgvector —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    console.log('1Ô∏è‚É£ –í–∫–ª—é—á–∞–µ–º pgvector —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ...');
    try {
      await client.query('CREATE EXTENSION IF NOT EXISTS vector;');
      console.log('   ‚úÖ pgvector –≤–∫–ª—é—á–µ–Ω');
    } catch (error: any) {
      console.log('   ‚ö†Ô∏è pgvector –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ');
    }

    // 2. –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É vibecoding_vectors
    console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É vibecoding_vectors...');
    await client.query('CREATE SCHEMA IF NOT EXISTS vibecoding_vectors;');
    console.log('   ‚úÖ –°—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞');

    // 3. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É document_chunks
    console.log('\n3Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É document_chunks...');
    
    const createTableSQL = `
      CREATE TABLE IF NOT EXISTS vibecoding_vectors.document_chunks (
        id SERIAL PRIMARY KEY,
        source_file VARCHAR(255) NOT NULL,
        source_path TEXT NOT NULL,
        chunk_index INTEGER NOT NULL,
        title TEXT,
        content TEXT NOT NULL,
        embedding vector(1536),
        metadata JSONB DEFAULT '{}',
        token_count INTEGER NOT NULL DEFAULT 0,
        chunk_hash CHAR(64) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        UNIQUE(source_path, chunk_index),
        UNIQUE(chunk_hash)
      );
    `;

    try {
      await client.query(createTableSQL);
      console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å –≤–µ–∫—Ç–æ—Ä–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∞');
    } catch (error: any) {
      if (error.message.includes('type "vector" does not exist')) {
        console.log('   üîÑ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞...');
        
        const createTableWithoutVectorSQL = `
          CREATE TABLE IF NOT EXISTS vibecoding_vectors.document_chunks (
            id SERIAL PRIMARY KEY,
            source_file VARCHAR(255) NOT NULL,
            source_path TEXT NOT NULL,
            chunk_index INTEGER NOT NULL,
            title TEXT,
            content TEXT NOT NULL,
            embedding TEXT,
            metadata JSONB DEFAULT '{}',
            token_count INTEGER NOT NULL DEFAULT 0,
            chunk_hash CHAR(64) NOT NULL,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            UNIQUE(source_path, chunk_index),
            UNIQUE(chunk_hash)
          );
        `;
        
        await client.query(createTableWithoutVectorSQL);
        console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ (–±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞)');
      } else {
        throw error;
      }
    }

    // 4. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    console.log('\n4Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã...');
    
    const indexes = [
      'CREATE INDEX IF NOT EXISTS idx_vibecoding_source_file ON vibecoding_vectors.document_chunks(source_file);',
      'CREATE INDEX IF NOT EXISTS idx_vibecoding_source_path ON vibecoding_vectors.document_chunks(source_path);',
      'CREATE INDEX IF NOT EXISTS idx_vibecoding_content_fts ON vibecoding_vectors.document_chunks USING gin(to_tsvector(\'russian\', content));',
      'CREATE INDEX IF NOT EXISTS idx_vibecoding_created_at ON vibecoding_vectors.document_chunks(created_at);'
    ];

    for (const indexSQL of indexes) {
      try {
        await client.query(indexSQL);
        console.log('   ‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω');
      } catch (error: any) {
        console.log('   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞:', error.message);
      }
    }

    // 5. –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
    console.log('\n5Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
    
    const triggerSQL = `
      CREATE OR REPLACE FUNCTION update_vibecoding_updated_at()
      RETURNS TRIGGER AS $$
      BEGIN
        NEW.updated_at = NOW();
        RETURN NEW;
      END;
      $$ LANGUAGE plpgsql;

      DROP TRIGGER IF EXISTS trigger_update_vibecoding_updated_at 
      ON vibecoding_vectors.document_chunks;

      CREATE TRIGGER trigger_update_vibecoding_updated_at
        BEFORE UPDATE ON vibecoding_vectors.document_chunks
        FOR EACH ROW
        EXECUTE FUNCTION update_vibecoding_updated_at();
    `;
    
    await client.query(triggerSQL);
    console.log('   ‚úÖ –¢—Ä–∏–≥–≥–µ—Ä —Å–æ–∑–¥–∞–Ω');

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É...');
    
    const schemaCheck = await client.query(`
      SELECT schema_name 
      FROM information_schema.schemata 
      WHERE schema_name = 'vibecoding_vectors';
    `);
    
    if (schemaCheck.rows.length > 0) {
      console.log('   ‚úÖ –°—Ö–µ–º–∞ vibecoding_vectors —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    const tableCheck = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'vibecoding_vectors' 
      AND table_name = 'document_chunks';
    `);
    
    if (tableCheck.rows.length > 0) {
      console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ document_chunks —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      const columns = await client.query(`
        SELECT column_name, data_type 
        FROM information_schema.columns 
        WHERE table_schema = 'vibecoding_vectors' 
        AND table_name = 'document_chunks'
        ORDER BY ordinal_position;
      `);
      
      console.log('\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:');
      columns.rows.forEach(row => {
        console.log(`   üìÑ ${row.column_name}: ${row.data_type}`);
      });
    }

    console.log('\nüéâ ========================================');
    console.log('‚úÖ –í–ï–ö–¢–û–†–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –°–û–ó–î–ê–ù–ê –£–°–ü–ï–®–ù–û!');
    console.log('üéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
    console.log('üïâÔ∏è ========================================');

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error);
    throw error;
  } finally {
    client.release();
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if (import.meta.main) {
  const connectionString = process.argv[2];
  
  if (!connectionString) {
    console.error('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: bun run scripts/quick-setup-vectors.ts "connection_string"');
    console.log('\nüìù –ü—Ä–∏–º–µ—Ä:');
    console.log('bun run scripts/quick-setup-vectors.ts "postgresql://user:pass@host/db"');
    process.exit(1);
  }
  
  quickSetupVectors(connectionString)
    .then(() => {
      console.log('\nüöÄ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é:');
      console.log('bun run scripts/improved-vectorizer.ts "connection_string"');
    })
    .catch((error) => {
      console.error('üí• –ù–µ—É–¥–∞—á–∞:', error);
      process.exit(1);
    });
}

export { quickSetupVectors };
