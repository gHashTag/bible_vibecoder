#!/usr/bin/env bun

import { readFile } from 'fs/promises';
import { Pool } from 'pg';
import { join } from 'path';

// üïâÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const DATABASE_CONFIG = {
  connectionString: process.env.DATABASE_URL || 
    'postgresql://neondb_owner:npg_jwz8kFs0XVTe@ep-shy-truth-a5hat2dz-pooler.us-east-2.aws.neon.tech/neondb?sslmode=require'
};

/**
 * üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Vibecoding
 */
async function setupVibeCodingDatabase(): Promise<void> {
  console.log('üïâÔ∏è ============================================');
  console.log('üèóÔ∏è  –°–û–ó–î–ê–ù–ò–ï –í–ï–ö–¢–û–†–ù–û–ô –ë–ê–ó–´ –î–ê–ù–ù–´–• VIBECODING');
  console.log('üïâÔ∏è ============================================\n');

  const pool = new Pool(DATABASE_CONFIG);

  try {
    // –ß–∏—Ç–∞–µ–º SQL —Å–∫—Ä–∏–ø—Ç
    console.log('üìú –ó–∞–≥—Ä—É–∂–∞–µ–º SQL —Å–∫—Ä–∏–ø—Ç...');
    const sqlPath = join(__dirname, 'create-vibecoding-vectors-table.sql');
    const sqlScript = await readFile(sqlPath, 'utf-8');

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Neon PostgreSQL...');
    const client = await pool.connect();

    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º SQL —Å–∫—Ä–∏–ø—Ç
      console.log('‚ö° –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      
      // –†–∞–∑–±–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π)
      const commands = sqlScript
        .split(';')
        .map(cmd => cmd.trim())
        .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));

      for (let i = 0; i < commands.length; i++) {
        const command = commands[i];
        if (command) {
          try {
            await client.query(command);
            
            // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –≤–∞–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            if (command.includes('CREATE EXTENSION')) {
              console.log('   ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector –ø–æ–¥–∫–ª—é—á–µ–Ω–æ');
            } else if (command.includes('CREATE SCHEMA')) {
              console.log('   ‚úÖ –°—Ö–µ–º–∞ vibecoding_vectors —Å–æ–∑–¥–∞–Ω–∞');
            } else if (command.includes('CREATE TABLE')) {
              console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ document_chunks —Å–æ–∑–¥–∞–Ω–∞');
            } else if (command.includes('CREATE INDEX')) {
              console.log('   ‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω');
            } else if (command.includes('CREATE VIEW')) {
              console.log('   ‚úÖ View –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–æ–∑–¥–∞–Ω');
            } else if (command.includes('CREATE TRIGGER')) {
              console.log('   ‚úÖ –¢—Ä–∏–≥–≥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è created');
            } else if (command.includes('CREATE OR REPLACE FUNCTION')) {
              console.log('   ‚úÖ –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞');
            }
          } catch (cmdError: any) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" –¥–ª—è IF NOT EXISTS –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            if (cmdError.code === '42P07' || cmdError.code === '42710' || cmdError.message.includes('already exists')) {
              console.log('   ‚ö†Ô∏è  –û–±—ä–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
              continue;
            }
            throw cmdError;
          }
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É...');
      
      const tableCheck = await client.query(`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_schema = 'vibecoding_vectors' 
          AND table_name = 'document_chunks'
        );
      `);

      if (tableCheck.rows[0].exists) {
        console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ vibecoding_vectors.document_chunks —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
      } else {
        throw new Error('–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º pgvector —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
      const vectorCheck = await client.query(`
        SELECT EXISTS (
          SELECT FROM pg_extension 
          WHERE extname = 'vector'
        );
      `);

      if (vectorCheck.rows[0].exists) {
        console.log('   ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector –∞–∫—Ç–∏–≤–Ω–æ');
      } else {
        console.log('   ‚ö†Ô∏è  –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã
      const structureInfo = await client.query(`
        SELECT 
          column_name, 
          data_type, 
          is_nullable,
          column_default
        FROM information_schema.columns 
        WHERE table_schema = 'vibecoding_vectors' 
        AND table_name = 'document_chunks'
        ORDER BY ordinal_position;
      `);

      console.log('\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã document_chunks:');
      structureInfo.rows.forEach(row => {
        const nullable = row.is_nullable === 'YES' ? 'NULL' : 'NOT NULL';
        const defaultValue = row.column_default ? ` DEFAULT ${row.column_default}` : '';
        console.log(`   üìÑ ${row.column_name}: ${row.data_type} ${nullable}${defaultValue}`);
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
      const indexInfo = await client.query(`
        SELECT indexname, indexdef 
        FROM pg_indexes 
        WHERE schemaname = 'vibecoding_vectors' 
        AND tablename = 'document_chunks';
      `);

      console.log('\nüóÇÔ∏è  –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã:');
      indexInfo.rows.forEach(row => {
        console.log(`   üîç ${row.indexname}`);
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º views
      const viewInfo = await client.query(`
        SELECT table_name 
        FROM information_schema.views 
        WHERE table_schema = 'vibecoding_vectors';
      `);

      console.log('\nüìà –°–æ–∑–¥–∞–Ω–Ω—ã–µ views –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:');
      viewInfo.rows.forEach(row => {
        console.log(`   üìä ${row.table_name}`);
      });

    } finally {
      client.release();
    }

    console.log('\nüéâ ============================================');
    console.log('‚úÖ –í–ï–ö–¢–û–†–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–ê!');
    console.log('üéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
    console.log('üïâÔ∏è ============================================');

  } catch (error) {
    console.error('\nüí• ============================================');
    console.error('‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•:');
    console.error(error);
    console.error('üïâÔ∏è ============================================');
    throw error;
  } finally {
    await pool.end();
  }
}

/**
 * üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function testConnection(): Promise<void> {
  console.log('üîå –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  const pool = new Pool(DATABASE_CONFIG);
  
  try {
    const client = await pool.connect();
    
    try {
      const result = await client.query('SELECT NOW() as current_time, version() as postgres_version;');
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
      console.log(`   ‚è∞ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${result.rows[0].current_time}`);
      console.log(`   üóÑÔ∏è  –í–µ—Ä—Å–∏—è PostgreSQL: ${result.rows[0].postgres_version.split(' ')[0]}`);
    } finally {
      client.release();
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  } finally {
    await pool.end();
  }
}

// üöÄ –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.main) {
  const args = process.argv.slice(2);
  
  if (args[0] === 'test') {
    testConnection();
  } else {
    setupVibeCodingDatabase();
  }
}

export { setupVibeCodingDatabase, testConnection };
