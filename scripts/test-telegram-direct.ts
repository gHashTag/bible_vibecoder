/**
 * üß™ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–∞–π–ª–æ–≤ –≤ Telegram
 */

import { Telegraf } from 'telegraf';
import { createReadStream } from 'fs';
import path from 'path';

async function testTelegramDirect() {
  console.log('ü§ñ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram API...\n');

  const BOT_TOKEN = process.env.BOT_TOKEN;
  const CHAT_ID = '144022504'; // –í–∞—à Telegram ID

  if (!BOT_TOKEN) {
    throw new Error('BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }

  const bot = new Telegraf(BOT_TOKEN);

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    console.log('üìù –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    const message1 = await bot.telegram.sendMessage(
      CHAT_ID,
      'üß™ **–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ**\n\n–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É Telegram API',
      { parse_mode: 'Markdown' }
    );
    console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (ID: ${message1.message_id})`);

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    console.log('\nüìÅ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–∞—Ä—É—Å–µ–ª–∏...');
    const carouselDir = path.join(process.cwd(), 'carousel-output');
    const fs = await import('fs/promises');

    let imageFiles: string[] = [];
    try {
      const files = await fs.readdir(carouselDir);
      imageFiles = files
        .filter(file => file.endsWith('.png'))
        .slice(0, 3) // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
        .map(file => path.join(carouselDir, file));

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${imageFiles.length} PNG —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞`);
      imageFiles.forEach((file, index) => {
        console.log(`  ${index + 1}. ${file}`);
      });
    } catch (error) {
      console.log('‚ùå –ü–∞–ø–∫–∞ carousel-output –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞');
      return { success: false, error: 'No carousel files found' };
    }

    if (imageFiles.length === 0) {
      console.log('‚ùå –ù–µ—Ç PNG —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
      return { success: false, error: 'No PNG files found' };
    }

    // –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    console.log('\nüñºÔ∏è –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    const singleImage = await bot.telegram.sendPhoto(
      CHAT_ID,
      { source: createReadStream(imageFiles[0]) },
      {
        caption: 'üé® –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏',
        reply_parameters: { message_id: message1.message_id },
      }
    );
    console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (ID: ${singleImage.message_id})`);

    // –¢–µ—Å—Ç 4: –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤)
    if (imageFiles.length > 1) {
      console.log('\nüì∏ –¢–µ—Å—Ç 4: –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã...');

      const mediaGroup = imageFiles
        .slice(0, Math.min(3, imageFiles.length))
        .map((file, index) => ({
          type: 'photo' as const,
          media: { source: createReadStream(file) },
          caption:
            index === 0
              ? 'üé® **–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—É—Å–µ–ª—å**\n\n–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã'
              : undefined,
          parse_mode: index === 0 ? ('Markdown' as const) : undefined,
        }));

      const mediaResult = await bot.telegram.sendMediaGroup(
        CHAT_ID,
        mediaGroup,
        {
          reply_parameters: { message_id: message1.message_id },
        }
      );

      console.log(
        `‚úÖ –ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (${mediaResult.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)`
      );
    }

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã Telegram API –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    return {
      success: true,
      message: 'All Telegram tests passed',
      filesCount: imageFiles.length,
    };
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Telegram API:', error);

    if (error instanceof Error) {
      console.error('üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', error.message);

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram
      if (error.message.includes('invalid file HTTP URL')) {
        console.error(
          'üîç –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—É—Ç—è–º–∏ –∫ —Ñ–∞–π–ª–∞–º - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ createReadStream'
        );
      } else if (error.message.includes('chat not found')) {
        console.error('üîç –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ CHAT_ID');
      } else if (error.message.includes('bot token')) {
        console.error('üîç –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ BOT_TOKEN');
      }
    }

    return {
      success: false,
      error: error instanceof Error ? error.message : String(error),
    };
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testTelegramDirect()
  .then(result => {
    console.log('\nüìã –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result, null, 2));
    process.exit(result.success ? 0 : 1);
  })
  .catch(error => {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
