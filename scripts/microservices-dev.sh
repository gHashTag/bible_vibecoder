#!/bin/bash
# üåê Microservices Development Launcher
# Starts all microservices with event-driven communication

set -e

# üé® Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# üïâÔ∏è Sacred Header
echo -e "${PURPLE}üïâÔ∏è ========================================= üïâÔ∏è${NC}"
echo -e "${PURPLE}   Bible VibeCoder Microservices Stack${NC}"
echo -e "${PURPLE}   Event-Driven Functional Communication${NC}"
echo -e "${PURPLE}üïâÔ∏è ========================================= üïâÔ∏è${NC}"
echo

# üìÅ Directories
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
INFRA_DIR="$PROJECT_ROOT/infrastructure"
SERVICES_DIR="$PROJECT_ROOT/services"

echo -e "${CYAN}üìÅ Project Root: $PROJECT_ROOT${NC}"
echo -e "${CYAN}üèóÔ∏è Infrastructure: $INFRA_DIR${NC}"
echo -e "${CYAN}‚öôÔ∏è Services: $SERVICES_DIR${NC}"
echo

# üîß Functions
check_prerequisites() {
    echo -e "${BLUE}üîç Checking prerequisites...${NC}"
    
    # Check Docker
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker is not installed${NC}"
        exit 1
    fi
    
    # Check Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        echo -e "${RED}‚ùå Docker Compose is not installed${NC}"
        exit 1
    fi
    
    # Check Bun
    if ! command -v bun &> /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è Bun is not installed (required for local development)${NC}"
    fi
    
    echo -e "${GREEN}‚úÖ Prerequisites checked${NC}"
}

setup_shared_modules() {
    echo -e "${BLUE}üì¶ Setting up shared modules...${NC}"
    
    cd "$PROJECT_ROOT"
    
    # Create shared package.json if it doesn't exist
    if [ ! -f "shared/package.json" ]; then
        mkdir -p shared
        cat > shared/package.json << EOF
{
  "name": "@bible-vibecoder/shared",
  "version": "1.0.0",
  "description": "Shared types and utilities for microservices",
  "type": "module",
  "main": "index.ts",
  "dependencies": {},
  "devDependencies": {
    "typescript": "^5.3.3"
  }
}
EOF
    fi
    
    echo -e "${GREEN}‚úÖ Shared modules ready${NC}"
}

build_docker_images() {
    echo -e "${BLUE}üê≥ Building Docker images...${NC}"
    
    cd "$INFRA_DIR"
    
    # Build all services
    docker-compose build --parallel
    
    echo -e "${GREEN}‚úÖ Docker images built${NC}"
}

start_infrastructure() {
    echo -e "${BLUE}üèóÔ∏è Starting infrastructure services...${NC}"
    
    cd "$INFRA_DIR"
    
    # Start infrastructure services first
    docker-compose up -d redis postgres prometheus grafana jaeger
    
    # Wait for services to be ready
    echo -e "${YELLOW}‚è≥ Waiting for infrastructure to be ready...${NC}"
    sleep 10
    
    # Check Redis
    if docker-compose exec -T redis redis-cli ping | grep -q PONG; then
        echo -e "${GREEN}‚úÖ Redis is ready${NC}"
    else
        echo -e "${RED}‚ùå Redis is not responding${NC}"
    fi
    
    # Check PostgreSQL
    if docker-compose exec -T postgres pg_isready -U developer; then
        echo -e "${GREEN}‚úÖ PostgreSQL is ready${NC}"
    else
        echo -e "${RED}‚ùå PostgreSQL is not responding${NC}"
    fi
    
    echo -e "${GREEN}‚úÖ Infrastructure services started${NC}"
}

start_microservices() {
    echo -e "${BLUE}‚öôÔ∏è Starting microservices...${NC}"
    
    cd "$INFRA_DIR"
    
    # Start all services
    docker-compose up -d
    
    echo -e "${GREEN}‚úÖ All microservices started${NC}"
}

show_service_status() {
    echo -e "${BLUE}üìä Service Status:${NC}"
    
    cd "$INFRA_DIR"
    
    # Show running containers
    docker-compose ps
    
    echo
    echo -e "${CYAN}üåê Service URLs:${NC}"
    echo -e "  üé® Carousel Generator: http://localhost:3001/health"
    echo -e "  üß† AI Content Service: http://localhost:3002"
    echo -e "  üì± Telegram Gateway: http://localhost:3000"
    echo -e "  üíæ Data Persistence: http://localhost:3003"
    echo -e "  üìä Analytics: http://localhost:3004"
    echo -e "  üîÑ Event Orchestrator: http://localhost:3005"
    echo -e "  üåê API Gateway: http://localhost:8080"
    echo
    echo -e "${CYAN}üìä Monitoring URLs:${NC}"
    echo -e "  üìà Grafana: http://localhost:3006 (admin/admin)"
    echo -e "  üìä Prometheus: http://localhost:9090"
    echo -e "  üîç Jaeger: http://localhost:16686"
    echo
    echo -e "${CYAN}üóÉÔ∏è Database URLs:${NC}"
    echo -e "  üóÉÔ∏è PostgreSQL: localhost:5432 (developer/dev_password)"
    echo -e "  üì® Redis: localhost:6379"
}

health_check() {
    echo -e "${BLUE}üè• Running health checks...${NC}"
    
    # Check Carousel Generator
    if curl -f -s http://localhost:3001/health > /dev/null; then
        echo -e "${GREEN}‚úÖ Carousel Generator: Healthy${NC}"
    else
        echo -e "${RED}‚ùå Carousel Generator: Unhealthy${NC}"
    fi
    
    # Check Grafana
    if curl -f -s http://localhost:3006/api/health > /dev/null; then
        echo -e "${GREEN}‚úÖ Grafana: Healthy${NC}"
    else
        echo -e "${YELLOW}‚è≥ Grafana: Starting up...${NC}"
    fi
    
    # Check Prometheus
    if curl -f -s http://localhost:9090/-/healthy > /dev/null; then
        echo -e "${GREEN}‚úÖ Prometheus: Healthy${NC}"
    else
        echo -e "${YELLOW}‚è≥ Prometheus: Starting up...${NC}"
    fi
}

show_logs() {
    echo -e "${BLUE}üìù Following service logs...${NC}"
    echo -e "${YELLOW}   Press Ctrl+C to stop following logs${NC}"
    echo
    
    cd "$INFRA_DIR"
    docker-compose logs -f carousel-generator
}

cleanup() {
    echo -e "${BLUE}üßπ Cleaning up...${NC}"
    
    cd "$INFRA_DIR"
    docker-compose down
    
    echo -e "${GREEN}‚úÖ Services stopped${NC}"
}

# üéØ Main execution
case "${1:-start}" in
    "start")
        check_prerequisites
        setup_shared_modules
        build_docker_images
        start_infrastructure
        start_microservices
        echo
        show_service_status
        echo
        health_check
        echo
        echo -e "${GREEN}üöÄ All microservices are running!${NC}"
        echo -e "${CYAN}   Run '$0 logs' to see service logs${NC}"
        echo -e "${CYAN}   Run '$0 stop' to stop all services${NC}"
        ;;
    
    "stop")
        cleanup
        ;;
    
    "restart")
        cleanup
        sleep 2
        $0 start
        ;;
    
    "status")
        show_service_status
        ;;
    
    "health")
        health_check
        ;;
    
    "logs")
        show_logs
        ;;
    
    "build")
        build_docker_images
        ;;
    
    *)
        echo -e "${CYAN}üåê Bible VibeCoder Microservices Manager${NC}"
        echo
        echo -e "${YELLOW}Usage: $0 [command]${NC}"
        echo
        echo -e "${CYAN}Commands:${NC}"
        echo -e "  start     Start all microservices (default)"
        echo -e "  stop      Stop all microservices"
        echo -e "  restart   Restart all microservices"
        echo -e "  status    Show service status"
        echo -e "  health    Run health checks"
        echo -e "  logs      Follow service logs"
        echo -e "  build     Build Docker images"
        echo
        echo -e "${PURPLE}üïâÔ∏è May your microservices be in harmony${NC}"
        ;;
esac
