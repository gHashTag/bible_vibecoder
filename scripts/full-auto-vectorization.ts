#!/usr/bin/env bun

import { quickSetupVectors } from './quick-setup-vectors';
import { improvedVectorization } from './improved-vectorizer';

/**
 * üöÄ –ü–û–õ–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–Ø VIBECODING
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –°–æ–∑–¥–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * 2. –ó–∞–ø—É—Å–∫–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
 * 3. –ó–∞–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑—É –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
async function fullAutoVectorization(connectionString: string): Promise<void> {
  console.log('üïâÔ∏è ================================================');
  console.log('üßò –ü–û–õ–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–Ø VIBECODING');
  console.log('üïâÔ∏è ================================================\n');

  try {
    // –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    console.log('üèóÔ∏è –≠–¢–ê–ü 1: –°–û–ó–î–ê–ù–ò–ï –í–ï–ö–¢–û–†–ù–û–ô –°–¢–†–£–ö–¢–£–†–´');
    console.log('==========================================\n');
    
    await quickSetupVectors(connectionString);

    console.log('\n‚è±Ô∏è –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...\n');
    await new Promise(resolve => setTimeout(resolve, 2000));

    // –≠—Ç–∞–ø 2: –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    console.log('ü§ñ –≠–¢–ê–ü 2: –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–Ø –ö–û–ù–¢–ï–ù–¢–ê');
    console.log('==================================\n');
    
    await improvedVectorization(connectionString);

    // –§–∏–Ω–∞–ª
    console.log('\nüéâ ================================================');
    console.log('‚úÖ –ü–û–õ–ù–ê–Ø –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
    console.log('üéØ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    console.log('üïâÔ∏è ================================================');

  } catch (error) {
    console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:');
    console.error('=======================');
    console.error(error);
    console.log('\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ connection string');
    console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OPENAI_API_KEY');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ ./vibecoding —Å .md —Ñ–∞–π–ª–∞–º–∏');
    
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if (import.meta.main) {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...\n');

  const connectionString = process.argv[2];
  
  if (!connectionString) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('\nüí° –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:');
    console.log('bun run scripts/full-auto-vectorization.ts "connection_string"');
    console.log('\nüìù –ü–†–ò–ú–ï–†:');
    console.log('bun run scripts/full-auto-vectorization.ts "postgresql://user:pass@host/db"');
    console.log('\nüîë –¢–†–ï–ë–û–í–ê–ù–ò–Ø:');
    console.log('- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é OPENAI_API_KEY');
    console.log('- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞–ø–∫–∞ ./vibecoding —Å–æ–¥–µ—Ä–∂–∏—Ç .md —Ñ–∞–π–ª—ã');
    console.log('- Connection string –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ Neon');
    
    process.exit(1);
  }
  
  if (!process.env.OPENAI_API_KEY) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é OPENAI_API_KEY');
    console.log('\nüí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–∞–∫:');
    console.log('export OPENAI_API_KEY="your_openai_api_key"');
    process.exit(1);
  }

  // –ó–∞–ø—É—Å–∫
  const startTime = Date.now();
  
  fullAutoVectorization(connectionString)
    .then(() => {
      const duration = Math.round((Date.now() - startTime) / 1000);
      console.log(`\n‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration} —Å–µ–∫—É–Ω–¥`);
      console.log('\nüéä –í–°–Å –ì–û–¢–û–í–û! –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüíÄ –ü–û–õ–ù–ê–Ø –ù–ï–£–î–ê–ß–ê:', error);
      process.exit(1);
    });
}

export { fullAutoVectorization };
