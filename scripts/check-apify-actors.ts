#!/usr/bin/env bun

/**
 * üîç Apify Actors Discovery
 *
 * –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–æ—Ä—ã –¥–ª—è Google Search –≤ Apify
 */

async function checkApifyActors() {
  console.log('üîç === –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Apify –∞–∫—Ç–æ—Ä–æ–≤ ===\n');

  const apifyToken = process.env.APIFY_TOKEN;

  if (!apifyToken) {
    console.error('‚ùå APIFY_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  console.log('‚úÖ APIFY_TOKEN –Ω–∞–π–¥–µ–Ω\n');

  try {
    // –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö Google Search –∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const actorsToCheck = [
      'apify/google-search-results-scraper',
      'lukaskrivka/google-search-results',
      'drobnikj/google-search-results-scraper',
      'apify/google-search',
      'apify/web-scraper',
      'lukaskrivka/google-search',
      'dtrungtin/google-search-console',
    ];

    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–∫—Ç–æ—Ä–æ–≤...\n');

    for (const actorId of actorsToCheck) {
      try {
        console.log(`üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${actorId}`);

        const response = await fetch(
          `https://api.apify.com/v2/acts/${actorId}`,
          {
            headers: {
              Authorization: `Bearer ${apifyToken}`,
            },
          }
        );

        if (response.ok) {
          const actorData = await response.json();
          console.log(`   ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω: ${actorData.data.name}`);
          console.log(
            `   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${actorData.data.description?.slice(0, 100)}...`
          );
          console.log(
            `   üè∑Ô∏è –¢–µ–≥–∏: ${actorData.data.taggedBuilds?.[0]?.tag || 'N/A'}\n`
          );
        } else if (response.status === 404) {
          console.log(`   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω (404)\n`);
        } else {
          console.log(
            `   ‚ö†Ô∏è –û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}\n`
          );
        }
      } catch (error) {
        console.log(
          `   üí• –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : error}\n`
        );
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    // –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ Apify Store API
    console.log('üè™ –ò—â–µ–º –≤ Apify Store...\n');

    try {
      const storeResponse = await fetch(
        'https://api.apify.com/v2/acts?limit=50&search=google%20search',
        {
          headers: {
            Authorization: `Bearer ${apifyToken}`,
          },
        }
      );

      if (storeResponse.ok) {
        const storeData = await storeResponse.json();
        const googleActors = storeData.data.items.filter(
          (actor: any) =>
            actor.name.toLowerCase().includes('google') ||
            actor.name.toLowerCase().includes('search')
        );

        console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${googleActors.length} –∞–∫—Ç–æ—Ä–æ–≤ —Å –ø–æ–∏—Å–∫–æ–º:`);

        googleActors.slice(0, 5).forEach((actor: any) => {
          console.log(`   üì¶ ${actor.id}`);
          console.log(`      ${actor.name}`);
          console.log(`      ${actor.description?.slice(0, 80)}...`);
          console.log(`      üë§ ${actor.username}/${actor.name}\n`);
        });
      }
    } catch (storeError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Store');
    }
  } catch (error) {
    console.error(
      '‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:',
      error instanceof Error ? error.message : error
    );
  }
}

checkApifyActors().catch(console.error);
