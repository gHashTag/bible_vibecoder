#!/usr/bin/env bun

/**
 * üîç Apify Web Scraper Test
 *
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —á–µ—Ä–µ–∑ Web Scraper
 * –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ–∏—Å–∫–∞ Google
 */

async function testWebScraper() {
  console.log('üîç === Apify Web Scraper Test ===\n');

  const apifyToken = process.env.APIFY_TOKEN;

  if (!apifyToken) {
    console.error('‚ùå APIFY_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  console.log('‚úÖ APIFY_TOKEN –Ω–∞–π–¥–µ–Ω\n');

  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫–∏–µ –∞–∫—Ç–æ—Ä—ã –≤–æ–æ–±—â–µ –¥–æ—Å—Ç—É–ø–Ω—ã
    console.log('üè™ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–æ—Ä—ã...');

    const actorsResponse = await fetch(
      'https://api.apify.com/v2/acts?limit=20',
      {
        headers: {
          Authorization: `Bearer ${apifyToken}`,
        },
      }
    );

    if (!actorsResponse.ok) {
      throw new Error(
        `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–æ—Ä–æ–≤: ${actorsResponse.status} ${actorsResponse.statusText}`
      );
    }

    const actorsData = await actorsResponse.json();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–æ—Ä–æ–≤: ${actorsData.data.items.length}`);

    if (actorsData.data.items.length > 0) {
      console.log('\nüéØ –ü–µ—Ä–≤—ã–µ 5 –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ç–æ—Ä–æ–≤:');

      actorsData.data.items.slice(0, 5).forEach((actor: any, index: number) => {
        console.log(`   ${index + 1}. ${actor.id}`);
        console.log(`      üìù ${actor.name}`);
        console.log(`      üè∑Ô∏è ${actor.description?.slice(0, 60)}...`);
      });

      // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–∫—Ç–æ—Ä –¥–ª—è –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥–∞
      const webScrapers = actorsData.data.items.filter(
        (actor: any) =>
          actor.name.toLowerCase().includes('web') ||
          actor.name.toLowerCase().includes('scraper') ||
          actor.name.toLowerCase().includes('search') ||
          actor.name.toLowerCase().includes('google')
      );

      if (webScrapers.length > 0) {
        console.log(`\nüéØ –ù–∞–π–¥–µ–Ω—ã –≤–µ–±-—Å–∫—Ä–∞–ø–µ—Ä—ã (${webScrapers.length}):`);

        webScrapers.forEach((scraper: any) => {
          console.log(`   üì¶ ${scraper.id}`);
          console.log(`      ${scraper.name}`);
        });

        // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Å–∫—Ä–∞–ø–µ—Ä
        const selectedScraper = webScrapers[0];
        console.log(`\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${selectedScraper.id}`);

        await testActorRun(selectedScraper.id, apifyToken);
      } else {
        console.log('\n‚ö†Ô∏è –í–µ–±-—Å–∫—Ä–∞–ø–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ç–æ—Ä–æ–≤');

        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ —Å –ø–µ—Ä–≤—ã–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –∞–∫—Ç–æ—Ä–æ–º
        if (actorsData.data.items.length > 0) {
          const firstActor = actorsData.data.items[0];
          console.log(`\nüß™ –ü—Ä–æ–±—É–µ–º —Å –ø–µ—Ä–≤—ã–º –¥–æ—Å—Ç—É–ø–Ω—ã–º: ${firstActor.id}`);
          await testActorRun(firstActor.id, apifyToken);
        }
      }
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ç–æ—Ä–æ–≤');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error instanceof Error ? error.message : error);
  }
}

async function testActorRun(actorId: string, token: string) {
  try {
    console.log(`\n‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–æ—Ä: ${actorId}`);

    // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π input
    const runInput = {
      startUrls: ['https://example.com'],
      maxRequestsPerCrawl: 1,
    };

    const runResponse = await fetch(
      `https://api.apify.com/v2/acts/${actorId}/runs`,
      {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(runInput),
      }
    );

    if (runResponse.ok) {
      const runData = await runResponse.json();
      const runId = runData.data.id;
      console.log(`‚úÖ –ê–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω, Run ID: ${runId}`);

      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
      await new Promise(resolve => setTimeout(resolve, 5000));

      const statusResponse = await fetch(
        `https://api.apify.com/v2/acts/${actorId}/runs/${runId}`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      if (statusResponse.ok) {
        const statusData = await statusResponse.json();
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${statusData.data.status}`);

        if (statusData.data.status === 'SUCCEEDED') {
          console.log('üéâ –ê–∫—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è!');
        } else if (statusData.data.status === 'RUNNING') {
          console.log('‚è≥ –ê–∫—Ç–æ—Ä –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
        } else {
          console.log(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${statusData.data.status}`);
        }
      }
    } else {
      const errorText = await runResponse.text();
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${runResponse.status} ${errorText}`);
    }
  } catch (error) {
    console.log(
      `üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–æ—Ä–∞: ${error instanceof Error ? error.message : error}`
    );
  }
}

console.log('üïâÔ∏è VibeCoding x Apify Web Scraper Test\n');
testWebScraper().catch(console.error);
