#!/usr/bin/env bun

import { vibeCodingCommands } from '../src/commands/vibecoding-commands';

console.log('üîç –¢–ï–°–¢ VIBECODING –í–ï–ö–¢–û–†–ù–û–ì–û –ü–û–ò–°–ö–ê –ò –ö–ê–†–£–°–ï–õ–ò...');

async function testVibeCodingSearch() {
  try {
    console.log('\n1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ VibeCoding –±–∞–∑—ã...');

    const stats = await vibeCodingCommands.getVibeCodingStats();
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   üì¶ –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: ${stats.totalChunks}`);
    console.log(`   üìÅ –§–∞–π–ª–æ–≤: ${stats.totalFiles}`);
    console.log(
      `   üìÇ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${stats.topCategories.slice(0, 3).join(', ')}`
    );
    console.log(
      `   üìù –¢–æ–ø —Ç–∏–ø—ã —Å–µ–∫—Ü–∏–π: ${stats.topSectionTypes.slice(0, 3).join(', ')}`
    );

    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–º–µ...');

    const searchQueries = [
      'Cursor AI —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏',
      '–º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
      '–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞',
      '–ò–ò –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
    ];

    for (const query of searchQueries) {
      console.log(`\nüîç –ü–æ–∏—Å–∫: "${query}"`);

      const searchResult = await vibeCodingCommands.searchVibecoding({
        query,
        searchType: 'hybrid',
        limit: 5,
        generateCarousel: false,
      });

      if (searchResult.success) {
        console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${searchResult.results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
        searchResult.results.slice(0, 2).forEach((result, index) => {
          console.log(
            `      ${index + 1}. ${result.title || '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'} (${result.category})`
          );
          console.log(`         üìÑ ${result.content.substring(0, 80)}...`);
          console.log(`         üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${result.similarity}`);
        });
      } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${searchResult.error}`);
      }
    }

    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏...');

    const carouselThemes = [
      'Cursor AI —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏',
      '–ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞',
      '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞',
    ];

    for (const theme of carouselThemes) {
      console.log(`\nüé® –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏: "${theme}"`);

      const carouselResult =
        await vibeCodingCommands.generateVibeCodingCarousel(theme, {
          maxCards: 3,
          style: 'vibrant',
          includeCodeExamples: true,
          categories: ['general', 'fundamentals', 'tools', 'practices'],
        });

      if (carouselResult.success) {
        console.log(
          `   ‚úÖ –ö–∞—Ä—É—Å–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: ${carouselResult.carouselImages?.length || 0} –∫–∞—Ä—Ç–æ—á–µ–∫`
        );

        if (carouselResult.carouselCards) {
          carouselResult.carouselCards.forEach((card, index) => {
            console.log(`      ${index + 1}. ${card.title} (${card.category})`);
            console.log(`         üìù ${card.summary.substring(0, 60)}...`);
            console.log(
              `         üè∑Ô∏è –¢–µ–≥–∏: ${card.tags.slice(0, 3).join(', ')}`
            );
          });
        }
      } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ä—É—Å–µ–ª–∏: ${carouselResult.error}`);
      }
    }

    console.log('\nüéâ –¢–ï–°–¢ VIBECODING –ü–û–ò–°–ö–ê –ó–ê–í–ï–†–®–ï–ù!');
    console.log('‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('üé® –°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–µ–π –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
  } catch (error) {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

if (import.meta.main) {
  testVibeCodingSearch()
    .then(() => {
      console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! üïâÔ∏è');
      process.exit(0);
    })
    .catch(error => {
      console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}
