#!/usr/bin/env bun

import { readdir, readFile, stat } from 'fs/promises';
import { join, relative, extname, basename } from 'path';
import { createHash } from 'crypto';
import { Pool } from 'pg';
import OpenAI from 'openai';

// üïâÔ∏è –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const CONFIG = {
  VIBECODING_PATH: './vibecoding',
  CHUNK_SIZE: 800, // –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏–∫–∏
  CHUNK_OVERLAP: 100, // –£–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  MIN_CHUNK_SIZE: 200, // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
  OPENAI_MODEL: 'text-embedding-3-small', // 1536 dimensions
  BATCH_SIZE: 5, // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –±–∞—Ç—á –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || '',
});

interface ImprovedChunk {
  sourcePath: string;
  sourceFile: string;
  chunkIndex: number;
  title?: string;
  content: string;
  cleanContent: string; // –û—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
  tokenCount: number;
  chunkHash: string;
  metadata: {
    file_category: string;
    section_type: string;
    semantic_level: number; // –ì–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    has_code: boolean;
    has_philosophy: boolean;
    content_quality: 'high' | 'medium' | 'low';
    keywords: string[];
  };
}

/**
 * üéØ –¢–æ—á–Ω–∞—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º approximation –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
 */
function accurateTokenCount(text: string): number {
  // –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ/–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  const words = text.split(/\s+/).filter(w => w.length > 0);
  const characters = text.length;
  
  // –§–æ—Ä–º—É–ª–∞ —É—á–∏—Ç—ã–≤–∞—é—â–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
  const byWords = words.length * 1.3; // –†—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞ –¥–ª–∏–Ω–Ω–µ–µ
  const byChars = characters / 3.5; // –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
  
  return Math.ceil((byWords + byChars) / 2);
}

/**
 * üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
 */
function cleanTextForEmbedding(text: string): string {
  return text
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ markdown —Å–∏–º–≤–æ–ª—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    .replace(/#{1,6}\s/g, '') // –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    .replace(/\*\*(.*?)\*\*/g, '$1') // –£–±–∏—Ä–∞–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    .replace(/\*(.*?)\*/g, '$1') // –£–±–∏—Ä–∞–µ–º –∫—É—Ä—Å–∏–≤
    .replace(/`([^`]+)`/g, '$1') // –£–±–∏—Ä–∞–µ–º inline –∫–æ–¥
    .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1') // –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —ç–º–æ–¥–∑–∏ (–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã)
    .replace(/[üì±üíªüöÄ‚ö°üéØüìäüîßüõ†Ô∏è]/g, '')
    // –û—á–∏—â–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è UTF-8
    .replace(/[\u0000-\u001F\u007F-\u009F]/g, '') // –£–¥–∞–ª—è–µ–º control characters
    .replace(/\uFEFF/g, '') // –£–¥–∞–ª—è–µ–º BOM
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
    .replace(/\s+/g, ' ')
    .replace(/\n\s*\n/g, '\n')
    .trim();
}

/**
 * üé® –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
function extractKeywords(text: string): string[] {
  const keywords = new Set<string>();
  
  // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
  const techTerms = text.match(/\b(AI|–ò–ò|API|MVP|TDD|JavaScript|TypeScript|React|Node\.js|Cursor|VSCode|Git|Docker|PostgreSQL|Redis|Inngest|Telegram|OpenAI|Claude|GPT|LLM|–º–æ–¥–µ–ª—å|embedding|vector|–≤–µ–∫—Ç–æ—Ä–Ω—ã–π|–ë–î|–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö|–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞|–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å|–º–æ–Ω–æ–ª–∏—Ç|—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥|–±—ç–∫–µ–Ω–¥|fullstack|devops|ci\/cd|—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ|–¥–µ–ø–ª–æ–π|–ø—Ä–æ–¥–∞–∫—à–Ω|staging|development|–∫–æ–¥|–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ|—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞|—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥|–¥–µ–±–∞–≥|–æ—Ç–ª–∞–¥–∫–∞|–ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ|–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)\b/gi);
  
  if (techTerms) {
    techTerms.forEach(term => keywords.add(term.toLowerCase()));
  }
  
  // –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ VibeCoding
  const philosophyTerms = text.match(/\b(–º–µ–¥–∏—Ç–∞—Ü\w*|–∏–Ω—Ç—É–∏—Ü\w*|–ø–æ—Ç–æ–∫|–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å|–Ω–∞–º–µ—Ä–µ–Ω–∏–µ|–¥–æ–≤–µ—Ä–∏–µ|–≥–∞—Ä–º–æ–Ω–∏—è|–±–∞–ª–∞–Ω—Å|—ç–Ω–µ—Ä–≥–∏—è|–≤–∏–±—Ä–∞—Ü–∏—è|—á–∞—Å—Ç–æ—Ç–∞|—Ä–µ–∑–æ–Ω–∞–Ω—Å|—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è|—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è|—ç–≤–æ–ª—é—Ü–∏—è|—Å–æ–∑–Ω–∞–Ω–∏–µ|–¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å|–ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ|–º—É–¥—Ä–æ—Å—Ç—å|–∏—Å—Ç–∏–Ω–∞|–¥—Ö–∞—Ä–º–∞|–∫–∞—Ä–º–∞|–∞—Ç–º–∞–Ω|–±—Ä–∞—Ö–º–∞–Ω|–π–æ–≥–∞|—Ç–∞–Ω—Ç—Ä–∞|–≤–µ–¥–∞|—É–ø–∞–Ω–∏—à–∞–¥–∞|–º–∞–Ω—Ç—Ä–∞|—á–∞–∫—Ä–∞|–ø—Ä–∞–Ω–∞|—Å–∞–º–∞–¥hi|–≤–∏–ø–∞—Å—Å–∞–Ω–∞|–¥–∑–µ–Ω|–±—É–¥–¥–∞|–±–æ–¥—Ö–∏—Å–∞—Ç—Ç–≤–∞|–Ω–∏—Ä–≤–∞–Ω–∞|—Å–∞–Ω—Å–∞—Ä–∞|–º–æ–∫—à–∞)\b/gi);
  
  if (philosophyTerms) {
    philosophyTerms.forEach(term => keywords.add(term.toLowerCase()));
  }
  
  // –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏
  const skillTerms = text.match(/\b(–ø—Ä–∞–∫—Ç–∏–∫\w*|–º–µ—Ç–æ–¥\w*|—Ç–µ—Ö–Ω–∏–∫\w*|–ø–æ–¥—Ö–æ–¥|—Å—Ç—Ä–∞—Ç–µ–≥\w*|—Ç–∞–∫—Ç–∏–∫\w*|–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç|—Å–ø–æ—Å–æ–±|–ø—Ä–∏–µ–º|–∞–ª–≥–æ—Ä–∏—Ç–º|–ø–∞—Ç—Ç–µ—Ä–Ω|–ø—Ä–∏–Ω—Ü–∏–ø|–ø—Ä–∞–≤–∏–ª–æ|–∑–∞–∫–æ–Ω|–∫–æ–Ω—Ü–µ–ø—Ü–∏—è|–∏–¥–µ—è|—Ç–µ–æ—Ä–∏—è|–≥–∏–ø–æ—Ç–µ–∑–∞|—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç|–æ–ø—ã—Ç|–Ω–∞–≤—ã–∫|—É–º–µ–Ω–∏–µ|–º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ|—ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞|–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è)\b/gi);
  
  if (skillTerms) {
    skillTerms.forEach(term => keywords.add(term.toLowerCase()));
  }
  
  return Array.from(keywords).slice(0, 10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
}

/**
 * üìè –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
function assessContentQuality(text: string): 'high' | 'medium' | 'low' {
  const length = text.length;
  const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 10).length;
  const hasStructure = /#{1,6}|^\s*[-*+]|\d+\./m.test(text);
  const hasExamples = /–ø—Ä–∏–º–µ—Ä|example|–Ω–∞–ø—Ä–∏–º–µ—Ä|–∫ –ø—Ä–∏–º–µ—Ä—É|–¥–æ–ø—É—Å—Ç–∏–º/i.test(text);
  const hasCode = /```|`[^`]+`/.test(text);
  
  let score = 0;
  
  if (length > 500) score += 2;
  else if (length > 200) score += 1;
  
  if (sentences > 3) score += 1;
  if (hasStructure) score += 1;
  if (hasExamples) score += 1;
  if (hasCode) score += 1;
  
  if (score >= 5) return 'high';
  if (score >= 3) return 'medium';
  return 'low';
}

/**
 * üîç –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–µ–∫—Ü–∏–∏
 */
function detectImprovedSectionType(content: string): string {
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ
  if (/```[\s\S]*?```/.test(content)) {
    if (content.split('```').length > 3) return 'code_heavy';
    return 'code_example';
  }
  
  if (/^#{1}\s/m.test(content)) return 'chapter';
  if (/^#{2}\s/m.test(content)) return 'main_section';
  if (/^#{3}\s/m.test(content)) return 'subsection';
  if (/^#{4,6}\s/m.test(content)) return 'detail_section';
  
  if (/üïâÔ∏è|üßò|–º–µ–¥–∏—Ç–∞—Ü|–∏–Ω—Ç—É–∏—Ü|–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å|—Å–æ–∑–Ω–∞–Ω–∏–µ|–¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å/i.test(content)) {
    return 'philosophy';
  }
  
  if (/–ø—Ä–∏–º–µ—Ä|example|–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü|–ø–æ–∫–∞–∑|–∏–ª–ª—é—Å—Ç—Ä–∞—Ü/i.test(content)) {
    return 'example';
  }
  
  if (/–ø—Ä–∞–∫—Ç–∏–∫|—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ|–∑–∞–¥–∞–Ω–∏–µ|–≤–æ—Ä–∫—à–æ–ø|–º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å/i.test(content)) {
    return 'practice';
  }
  
  if (/–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ|—á—Ç–æ —Ç–∞–∫–æ–µ|—Ç–µ—Ä–º–∏–Ω|–ø–æ–Ω—è—Ç–∏–µ|–∫–æ–Ω—Ü–µ–ø—Ü–∏—è/i.test(content)) {
    return 'definition';
  }
  
  if (/—Å–ø–∏—Å–æ–∫|–ø–µ—Ä–µ—á–µ–Ω—å|—à–∞–≥|—ç—Ç–∞–ø|–∞–ª–≥–æ—Ä–∏—Ç–º|–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è/i.test(content)) {
    return 'instruction';
  }
  
  return 'general_content';
}

/**
 * üìÇ –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
 */
function detectImprovedFileCategory(filePath: string): string {
  const path = filePath.toLowerCase();
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ VibeCoding
  if (path.includes('–æ—Å–Ω–æ–≤—ã') || path.includes('fundamentals')) return 'fundamentals';
  if (path.includes('–ø—Ä–∞–∫—Ç–∏–∫–∏') || path.includes('practices')) return 'practices';
  if (path.includes('–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã') || path.includes('tools')) return 'tools';
  if (path.includes('—Ä–∞–∑–≤–∏—Ç–∏–µ') || path.includes('development')) return 'development';
  if (path.includes('–∞–Ω–∞–ª–∏—Ç–∏–∫–∞') || path.includes('analytics')) return 'analytics';
  if (path.includes('–∞—Ä—Ö–∏–≤') || path.includes('archive')) return 'archive';
  if (path.includes('–≥–ª–∞–≤–Ω–∞—è') || path.includes('main')) return 'main_book';
  
  // –ü–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–∞
  if (path.includes('philosophy') || path.includes('—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è')) return 'philosophy';
  if (path.includes('workshop') || path.includes('–≤–æ—Ä–∫—à–æ–ø')) return 'workshop';
  if (path.includes('tutorial') || path.includes('—Ç—É—Ç–æ—Ä–∏–∞–ª')) return 'tutorial';
  if (path.includes('guide') || path.includes('–≥–∞–π–¥')) return 'guide';
  if (path.includes('reference') || path.includes('—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫')) return 'reference';
  
  return 'general';
}

/**
 * üß© –£–º–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —á–∞–Ω–∫–∏
 */
function semanticChunking(content: string, filePath: string): ImprovedChunk[] {
  const chunks: ImprovedChunk[] = [];
  
  // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Å–µ–∫—Ü–∏–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
  const sections = content.split(/(?=^#{1,6}\s)/gm).filter(s => s.trim());
  
  let globalChunkIndex = 0;
  
  for (const section of sections) {
    const sectionTokens = accurateTokenCount(section);
    
    // –ï—Å–ª–∏ —Å–µ–∫—Ü–∏—è —É–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–∏–Ω —á–∞–Ω–∫
    if (sectionTokens <= CONFIG.CHUNK_SIZE) {
      if (sectionTokens >= CONFIG.MIN_CHUNK_SIZE) {
        chunks.push(createChunk(section, filePath, globalChunkIndex++));
      }
    } else {
      // –†–∞–∑–±–∏–≤–∞–µ–º –±–æ–ª—å—à—É—é —Å–µ–∫—Ü–∏—é –Ω–∞ –ø–æ–¥—á–∞–Ω–∫–∏
      const subChunks = splitLargeSection(section, filePath, globalChunkIndex);
      chunks.push(...subChunks);
      globalChunkIndex += subChunks.length;
    }
  }
  
  return chunks;
}

/**
 * ‚úÇÔ∏è –†–∞–∑–±–∏–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Å–µ–∫—Ü–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–µ–º–∞–Ω—Ç–∏–∫–∏
 */
function splitLargeSection(section: string, filePath: string, startIndex: number): ImprovedChunk[] {
  const chunks: ImprovedChunk[] = [];
  
  // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–±–∏—Ç—å –ø–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º (–¥–≤–æ–π–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã)
  const paragraphs = section.split(/\n\s*\n/).filter(p => p.trim());
  
  let currentChunk = '';
  let chunkIndex = startIndex;
  
  for (const paragraph of paragraphs) {
    const currentTokens = accurateTokenCount(currentChunk);
    const paragraphTokens = accurateTokenCount(paragraph);
    
    if (currentTokens + paragraphTokens > CONFIG.CHUNK_SIZE && currentChunk.trim()) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫
      chunks.push(createChunk(currentChunk.trim(), filePath, chunkIndex++));
      
      // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Å –Ω–µ–±–æ–ª—å—à–∏–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º
      const overlap = getSemanticOverlap(currentChunk);
      currentChunk = overlap + paragraph;
    } else {
      currentChunk += (currentChunk ? '\n\n' : '') + paragraph;
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
  if (currentChunk.trim() && accurateTokenCount(currentChunk) >= CONFIG.MIN_CHUNK_SIZE) {
    chunks.push(createChunk(currentChunk.trim(), filePath, chunkIndex++));
  }
  
  return chunks;
}

/**
 * üîó –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
function getSemanticOverlap(text: string): string {
  const sentences = text.split(/[.!?]+/).filter(s => s.trim());
  
  // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const overlapSentences = sentences.slice(-2);
  const overlap = overlapSentences.join('. ') + (overlapSentences.length > 0 ? '. ' : '');
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
  if (accurateTokenCount(overlap) > CONFIG.CHUNK_OVERLAP) {
    return overlap.substring(0, CONFIG.CHUNK_OVERLAP * 4) + '...';
  }
  
  return overlap;
}

/**
 * üéØ –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —á–∞–Ω–∫–∞
 */
function createChunk(content: string, filePath: string, index: number): ImprovedChunk {
  const cleanContent = cleanTextForEmbedding(content);
  const keywords = extractKeywords(content);
  
  return {
    sourcePath: filePath,
    sourceFile: basename(filePath),
    chunkIndex: index,
    title: extractTitle(content),
    content: content.trim(),
    cleanContent,
    tokenCount: accurateTokenCount(content),
    chunkHash: createHash('sha256').update(content.trim()).digest('hex'),
    metadata: {
      file_category: detectImprovedFileCategory(filePath),
      section_type: detectImprovedSectionType(content),
      semantic_level: getSemanticLevel(content),
      has_code: /```|`[^`]+`/.test(content),
      has_philosophy: /üïâÔ∏è|üßò|–º–µ–¥–∏—Ç–∞—Ü|–∏–Ω—Ç—É–∏—Ü|–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å|—Å–æ–∑–Ω–∞–Ω–∏–µ|–¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å/i.test(content),
      content_quality: assessContentQuality(content),
      keywords,
    },
  };
}

/**
 * üìè –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è (–≥–ª—É–±–∏–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
 */
function getSemanticLevel(content: string): number {
  const headerMatch = content.match(/^(#{1,6})\s/m);
  return headerMatch ? headerMatch[1].length : 0;
}

/**
 * üìù –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
 */
function extractTitle(content: string): string | undefined {
  // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ª—é–±–æ–≥–æ —É—Ä–æ–≤–Ω—è
  const titleMatch = content.match(/^#{1,6}\s+(.+)$/m);
  if (titleMatch) {
    return titleMatch[1]
      .replace(/[üî•‚ö°üéØüìäüßòüïâÔ∏è]/g, '') // –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
      .trim();
  }
  
  // –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
  const firstSentence = content.split(/[.!?]/)[0]?.trim();
  if (firstSentence && firstSentence.length > 10 && firstSentence.length < 100) {
    return firstSentence;
  }
  
  return undefined;
}

/**
 * ü§ñ –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –±–∞—Ç—á–∞–º–∏
 */
async function generateImprovedEmbeddings(chunks: ImprovedChunk[]): Promise<number[][]> {
  const embeddings: number[][] = [];
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  for (let i = 0; i < chunks.length; i += CONFIG.BATCH_SIZE) {
    const batch = chunks.slice(i, i + CONFIG.BATCH_SIZE);
    const texts = batch.map(chunk => chunk.cleanContent);
    
    console.log(`üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –±–∞—Ç—á–∞ ${Math.floor(i / CONFIG.BATCH_SIZE) + 1}/${Math.ceil(chunks.length / CONFIG.BATCH_SIZE)} (${batch.length} —á–∞–Ω–∫–æ–≤)`);
    
    try {
      const response = await openai.embeddings.create({
        model: CONFIG.OPENAI_MODEL,
        input: texts,
      });
      
      const batchEmbeddings = response.data.map(item => item.embedding);
      embeddings.push(...batchEmbeddings);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limits
      if (i + CONFIG.BATCH_SIZE < chunks.length) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –±–∞—Ç—á–∞ ${Math.floor(i / CONFIG.BATCH_SIZE) + 1}:`, error);
      throw error;
    }
  }
  
  return embeddings;
}

/**
 * üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –≤ –ë–î
 */
async function saveImprovedChunks(
  chunks: ImprovedChunk[],
  embeddings: number[][],
  connectionString: string
): Promise<void> {
  const pool = new Pool({ connectionString });
  const client = await pool.connect();
  
  try {
    await client.query('BEGIN');
    
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º ${chunks.length} —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`);
    
    for (let i = 0; i < chunks.length; i++) {
      const chunk = chunks[i];
      const embedding = embeddings[i];
      
      await client.query(
        `
        INSERT INTO vibecoding_vectors.document_chunks 
        (source_file, source_path, chunk_index, title, content, embedding, metadata, token_count, chunk_hash)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
        ON CONFLICT (source_path, chunk_index) 
        DO UPDATE SET 
          title = EXCLUDED.title,
          content = EXCLUDED.content,
          embedding = EXCLUDED.embedding,
          metadata = EXCLUDED.metadata,
          token_count = EXCLUDED.token_count,
          chunk_hash = EXCLUDED.chunk_hash,
          updated_at = NOW()
        `,
        [
          chunk.sourceFile,
          chunk.sourcePath,
          chunk.chunkIndex,
          chunk.title,
          chunk.content,
          `[${embedding.join(',')}]`,
          JSON.stringify(chunk.metadata),
          chunk.tokenCount,
          chunk.chunkHash,
        ]
      );
      
      if ((i + 1) % 10 === 0) {
        console.log(`   üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${i + 1}/${chunks.length} —á–∞–Ω–∫–æ–≤`);
      }
    }
    
    await client.query('COMMIT');
    console.log(`‚úÖ –í—Å–µ ${chunks.length} —á–∞–Ω–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!`);
    
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î:', error);
    throw error;
  } finally {
    client.release();
    await pool.end();
  }
}

/**
 * üìö –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ markdown —Ñ–∞–π–ª–æ–≤
 */
async function scanMarkdownFiles(dirPath: string): Promise<string[]> {
  const files: string[] = [];
  
  async function scanDir(currentPath: string) {
    try {
      const items = await readdir(currentPath);
      
      for (const item of items) {
        const fullPath = join(currentPath, item);
        const stats = await stat(fullPath);
        
        if (stats.isDirectory()) {
          await scanDir(fullPath);
        } else if (stats.isFile() && extname(item).toLowerCase() === '.md') {
          files.push(fullPath);
        }
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${currentPath}:`, error);
    }
  }
  
  await scanDir(dirPath);
  return files;
}

/**
 * üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
export async function improvedVectorization(connectionString: string): Promise<void> {
  console.log('üïâÔ∏è =====================================');
  console.log('üßò –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–Ø VIBECODING');
  console.log('üïâÔ∏è =====================================\n');
  
  try {
    // 1. –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    console.log('üìö –°–∫–∞–Ω–∏—Ä—É–µ–º markdown —Ñ–∞–π–ª—ã...');
    const files = await scanMarkdownFiles(CONFIG.VIBECODING_PATH);
    console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n`);
    
    if (files.length === 0) {
      throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω–æ markdown —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${CONFIG.VIBECODING_PATH}`);
    }
    
    // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    const allChunks: ImprovedChunk[] = [];
    
    for (const filePath of files) {
      console.log(`üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${basename(filePath)}`);
      
      try {
        const content = await readFile(filePath, 'utf-8');
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É
        const normalizedContent = content.normalize('NFC');
        const chunks = semanticChunking(normalizedContent, filePath);
        
        console.log(`   ‚ú® –°–æ–∑–¥–∞–Ω–æ ${chunks.length} —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö —á–∞–Ω–∫–æ–≤`);
        allChunks.push(...chunks);
        
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error);
      }
    }
    
    console.log(`\nüéØ –í—Å–µ–≥–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${allChunks.length} —á–∞–Ω–∫–æ–≤ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n`);
    
    // 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
    console.log('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏...');
    const embeddings = await generateImprovedEmbeddings(allChunks);
    
    // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    await saveImprovedChunks(allChunks, embeddings, connectionString);
    
    // 5. –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–ò:');
    console.log(`üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
    console.log(`üß© –°–æ–∑–¥–∞–Ω–æ —á–∞–Ω–∫–æ–≤: ${allChunks.length}`);
    console.log(`üìè –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: ${Math.round(allChunks.reduce((sum, c) => sum + c.tokenCount, 0) / allChunks.length)} —Ç–æ–∫–µ–Ω–æ–≤`);
    
    const qualityStats = allChunks.reduce((acc, chunk) => {
      acc[chunk.metadata.content_quality]++;
      return acc;
    }, { high: 0, medium: 0, low: 0 });
    
    console.log(`üèÜ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:`);
    console.log(`   ‚ú® –í—ã—Å–æ–∫–æ–µ: ${qualityStats.high} —á–∞–Ω–∫–æ–≤`);
    console.log(`   üìñ –°—Ä–µ–¥–Ω–µ–µ: ${qualityStats.medium} —á–∞–Ω–∫–æ–≤`);
    console.log(`   üìù –ë–∞–∑–æ–≤–æ–µ: ${qualityStats.low} —á–∞–Ω–∫–æ–≤`);
    
    console.log('\nüéâ =====================================');
    console.log('‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');
    console.log('üïâÔ∏è =====================================');
    
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if (import.meta.main) {
  const connectionString = process.argv[2] || process.env.DATABASE_URL;
  
  if (!connectionString) {
    console.error('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: bun run scripts/improved-vectorizer.ts "connection_string"');
    console.log('üí° –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DATABASE_URL');
    process.exit(1);
  }
  
  if (!process.env.OPENAI_API_KEY) {
    console.error('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é OPENAI_API_KEY');
    process.exit(1);
  }
  
  improvedVectorization(connectionString);
}
