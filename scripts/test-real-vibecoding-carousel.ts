#!/usr/bin/env bun

import { Telegraf } from 'telegraf';
import { Pool } from 'pg';
import { vibeCodingCommands } from '../src/commands/vibecoding-commands';

const bot = new Telegraf(process.env.BOT_TOKEN || '');

// –ü–†–ê–í–ò–õ–¨–ù–ê–Ø —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const DATABASE_URL =
  'postgresql://neondb_owner:npg_CnbBv0JF3NfE@ep-old-snow-a9fqfoj1-pooler.gwc.azure.neon.tech/neondb?sslmode=require&channel_binding=require';

const pool = new Pool({
  connectionString: DATABASE_URL,
});

console.log('üöÄ –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ô VIBECODING –ö–ê–†–£–°–ï–õ–ò...');

async function testVibeCodingCarousel() {
  const client = await pool.connect();

  try {
    // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö VibeCoding –≤ –±–∞–∑–µ...');

    const result = await client.query(`
      SELECT 
        COUNT(*) as total_chunks,
        COUNT(DISTINCT source_file) as total_files,
        COUNT(DISTINCT metadata->>'file_category') as categories
      FROM vibecoding_vectors.document_chunks;
    `);

    const stats = result.rows[0];
    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${stats.total_chunks} —á–∞–Ω–∫–æ–≤`);
    console.log(`   üìö –ò–∑ ${stats.total_files} —Ñ–∞–π–ª–æ–≤`);
    console.log(`   üìÇ ${stats.categories} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);

    // 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    const usersResult = await client.query(`
      SELECT 
        u.id, 
        u.telegram_id, 
        u.username, 
        u.first_name,
        COALESCE(us.notifications_enabled, true) as notifications_enabled
      FROM users u
      LEFT JOIN user_settings us ON u.id = us.user_id
      WHERE u.telegram_id IS NOT NULL
        AND (us.notifications_enabled IS NULL OR us.notifications_enabled = true)
      ORDER BY u.created_at DESC;
    `);

    const activeUsers = usersResult.rows;
    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${activeUsers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    if (activeUsers.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
      return;
    }

    // 3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –†–ï–ê–õ–¨–ù–£–Æ VibeCoding –∫–∞—Ä—É—Å–µ–ª—å
    console.log('\n3Ô∏è‚É£ üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –†–ï–ê–õ–¨–ù–û–ô VibeCoding –∫–∞—Ä—É—Å–µ–ª–∏...');

    const themes = [
      '–§–∏–ª–æ—Å–æ—Ñ–∏—è –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
      'Cursor AI —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏',
      '–ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞',
      '–ü—Ä–∏–Ω—Ü–∏–ø—ã VIBECODING –∏ –¥–æ–≤–µ—Ä–∏–µ –ò–ò',
      '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞',
      '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
    ];

    const selectedTheme = themes[Math.floor(Math.random() * themes.length)];
    const selectedStyle = ['minimalist', 'vibrant', 'dark', 'gradient'][
      Math.floor(Math.random() * 4)
    ];

    console.log(`   üéØ –¢–µ–º–∞: "${selectedTheme}"`);
    console.log(`   üé® –°—Ç–∏–ª—å: "${selectedStyle}"`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—É—Å–µ–ª—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const carouselResult = await vibeCodingCommands.generateVibeCodingCarousel(
      selectedTheme,
      {
        maxCards: 5,
        style: selectedStyle as any,
        includeCodeExamples: true,
        categories: ['general', 'fundamentals', 'tools', 'practices'],
      }
    );

    if (!carouselResult.success) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏: ${carouselResult.error}`);
      return;
    }

    console.log(
      `   ‚úÖ –°–æ–∑–¥–∞–Ω–æ ${carouselResult.carouselImages?.length || 0} –∫–∞—Ä—Ç–æ—á–µ–∫`
    );

    // 4Ô∏è‚É£ –†–ï–ê–õ–¨–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—É—Å–µ–ª–∏
    console.log('\n4Ô∏è‚É£ üö® –†–ï–ê–õ–¨–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê VIBECODING –ö–ê–†–£–°–ï–õ–ò...');

    if (
      !carouselResult.carouselImages ||
      carouselResult.carouselImages.length === 0
    ) {
      console.log('‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
      return;
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É
    const mediaGroup = carouselResult.carouselImages.map(
      (imageData: string, index: number) => {
        // üîß –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Base64 –≤ Buffer –¥–ª—è Telegram API
        const base64Data = imageData.replace(/^data:image\/\w+;base64,/, '');
        const imageBuffer = Buffer.from(base64Data, 'base64');

        return {
          type: 'photo' as const,
          media: { source: imageBuffer }, // ‚úÖ Telegram-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
          caption:
            index === 0
              ? `üïâÔ∏è **VibeCoding: ${selectedTheme}**\n\n` +
                `üìö –ò—Å—Ç–æ—á–Ω–∏–∫: –ë–∏–±–ª–∏—è VibeCoding\n` +
                `üé® –°—Ç–∏–ª—å: ${selectedStyle}\n` +
                `‚è∞ ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}\n\n` +
                `#VibeCoding #–ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–µ–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ #–ò–ò–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ`
              : undefined,
          parse_mode: 'Markdown' as const,
        };
      }
    );

    let successCount = 0;
    let errorCount = 0;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—É—Å–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for (const user of activeUsers) {
      try {
        await bot.telegram.sendMediaGroup(user.telegram_id, mediaGroup as any);
        successCount++;
        console.log(
          `   ‚úÖ –ö–∞—Ä—É—Å–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ${user.first_name} (@${user.username || '–±–µ–∑ username'})`
        );

        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
      } catch (error) {
        errorCount++;
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${user.first_name}:`, error);
      }
    }

    // 5Ô∏è‚É£ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\n5Ô∏è‚É£ üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–¢–ü–†–ê–í–ö–ò VIBECODING –ö–ê–†–£–°–ï–õ–ò:');
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(
      `   üé® –ö–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–∞—Ä—É—Å–µ–ª–∏: ${carouselResult.carouselImages.length}`
    );
    console.log(`   üéØ –¢–µ–º–∞: ${selectedTheme}`);
    console.log(
      `   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((successCount / activeUsers.length) * 100).toFixed(1)}%`
    );

    if (successCount > 0) {
      console.log('\nüéâ –°–ò–°–¢–ï–ú–ê VIBECODING BROADCAST –†–ê–ë–û–¢–ê–ï–¢!');
      console.log('üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram - –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–π—Ç–∏ –∫—Ä–∞—Å–∏–≤—ã–µ –∫–∞—Ä—É—Å–µ–ª–∏!');
    }
  } catch (error) {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    client.release();
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (import.meta.main) {
  testVibeCodingCarousel()
    .then(() => {
      console.log('\n‚ú® –¢–ï–°–¢ VIBECODING –ö–ê–†–£–°–ï–õ–ò –ó–ê–í–ï–†–®–ï–ù! üïâÔ∏è');
      process.exit(0);
    })
    .catch(error => {
      console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}
