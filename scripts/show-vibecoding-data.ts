#!/usr/bin/env bun

import { Pool } from 'pg';

const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 
    'postgresql://neondb_owner:npg_jwz8kFs0XVTe@ep-shy-truth-a5hat2dz-pooler.us-east-2.aws.neon.tech/neondb?sslmode=require'
});

async function showVibeCodingData() {
  console.log('üìä –î–ê–ù–ù–´–ï VIBECODING –í –í–ï–ö–¢–û–†–ù–û–ô –ë–ê–ó–ï\n');
  
  const client = await pool.connect();
  
  try {
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const stats = await client.query(`
      SELECT 
        COUNT(*) as total_chunks,
        COUNT(DISTINCT source_path) as total_files,
        AVG(token_count) as avg_tokens,
        MIN(created_at) as first_indexed,
        MAX(updated_at) as last_updated
      FROM vibecoding_vectors.document_chunks;
    `);
    
    const stat = stats.rows[0];
    console.log('üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`   üì¶ –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: ${stat.total_chunks}`);
    console.log(`   üìÅ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stat.total_files}`);
    console.log(`   üìä –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: ${Math.round(stat.avg_tokens)} —Ç–æ–∫–µ–Ω–æ–≤`);
    console.log(`   ‚è∞ –ü–µ—Ä–≤–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è: ${stat.first_indexed}`);
    console.log(`   üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${stat.last_updated}`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    console.log('\nüìÇ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:');
    const categories = await client.query(`
      SELECT 
        metadata->>'file_category' as category,
        COUNT(*) as chunk_count,
        COUNT(DISTINCT source_path) as file_count
      FROM vibecoding_vectors.document_chunks
      WHERE metadata->>'file_category' IS NOT NULL
      GROUP BY metadata->>'file_category'
      ORDER BY chunk_count DESC;
    `);
    
    categories.rows.forEach(row => {
      console.log(`   üìÅ ${row.category}: ${row.chunk_count} —á–∞–Ω–∫–æ–≤ (${row.file_count} —Ñ–∞–π–ª–æ–≤)`);
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–µ–∫—Ü–∏–π
    console.log('\nüìù –ü–û –¢–ò–ü–ê–ú –°–ï–ö–¶–ò–ô:');
    const sectionTypes = await client.query(`
      SELECT 
        metadata->>'section_type' as section_type,
        COUNT(*) as chunk_count
      FROM vibecoding_vectors.document_chunks
      WHERE metadata->>'section_type' IS NOT NULL
      GROUP BY metadata->>'section_type'
      ORDER BY chunk_count DESC;
    `);
    
    sectionTypes.rows.forEach(row => {
      console.log(`   üìÑ ${row.section_type}: ${row.chunk_count} —á–∞–Ω–∫–æ–≤`);
    });
    
    // –ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
    console.log('\nüìö –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –§–ê–ô–õ–´ (–ø—Ä–∏–º–µ—Ä—ã):');
    const files = await client.query(`
      SELECT 
        source_path,
        COUNT(*) as chunks,
        SUM(token_count) as total_tokens,
        MAX(title) as example_title
      FROM vibecoding_vectors.document_chunks
      GROUP BY source_path
      ORDER BY chunks DESC
      LIMIT 10;
    `);
    
    files.rows.forEach(row => {
      console.log(`   üìñ ${row.source_path}`);
      console.log(`      üì¶ ${row.chunks} —á–∞–Ω–∫–æ–≤, ${row.total_tokens} —Ç–æ–∫–µ–Ω–æ–≤`);
      if (row.example_title) {
        console.log(`      üìù –ü—Ä–∏–º–µ—Ä: "${row.example_title.slice(0, 50)}..."`);
      }
      console.log('');
    });
    
    // –ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    console.log('üîç –ü–†–ò–ú–ï–† –°–û–î–ï–†–ñ–ò–ú–û–ì–û:');
    const sample = await client.query(`
      SELECT title, content, metadata
      FROM vibecoding_vectors.document_chunks
      WHERE title IS NOT NULL
      ORDER BY created_at DESC
      LIMIT 1;
    `);
    
    if (sample.rows.length > 0) {
      const row = sample.rows[0];
      console.log(`   üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${row.title}`);
      console.log(`   üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${row.content.slice(0, 200)}...`);
      console.log(`   üè∑Ô∏è  –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(row.metadata, null, 2)}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    client.release();
    await pool.end();
  }
}

if (import.meta.main) {
  showVibeCodingData();
}
