/**
 * üß™ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Inngest —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /carousel –≤ Telegram –±–æ—Ç
 * –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏: –∫–æ–º–∞–Ω–¥–∞ -> Inngest -> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è -> –æ—Ç–ø—Ä–∞–≤–∫–∞
 */

import { Telegraf } from 'telegraf';

async function testCarouselFinal() {
  console.log('üé® –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Inngest —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏...\n');

  const BOT_TOKEN = process.env.BOT_TOKEN;
  const CHAT_ID = '144022504'; // –í–∞—à Telegram ID

  if (!BOT_TOKEN) {
    throw new Error('BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }

  const bot = new Telegraf(BOT_TOKEN);

  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /carousel –≤ –±–æ—Ç...');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /carousel —á–µ—Ä–µ–∑ Telegram API
    const commandMessage = await bot.telegram.sendMessage(
      CHAT_ID,
      '/carousel "–º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"'
    );

    console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (ID: ${commandMessage.message_id})`);
    console.log('üìù –¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã: /carousel "–º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"');

    console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Inngest —Ñ—É–Ω–∫—Ü–∏–∏...');
    console.log('üéØ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –±–æ—Ç –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
    console.log('üéõÔ∏è  Inngest Dashboard: http://localhost:8288');
    console.log('üìä HTTP Server Health: http://localhost:7103/health');

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    console.log('\n‚è∞ –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏...');
    await new Promise(resolve => setTimeout(resolve, 30000));

    console.log('\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏');

    return {
      success: true,
      message: 'Command sent successfully',
      commandMessageId: commandMessage.message_id,
    };
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã:', error);

    if (error instanceof Error) {
      console.error('üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', error.message);
    }

    return {
      success: false,
      error: error instanceof Error ? error.message : String(error),
    };
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testCarouselFinal()
  .then(result => {
    console.log('\nüìã –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result, null, 2));
    process.exit(result.success ? 0 : 1);
  })
  .catch(error => {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
