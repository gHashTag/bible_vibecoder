#!/usr/bin/env bun

import { Pool } from 'pg';

const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 
    'postgresql://neondb_owner:npg_jwz8kFs0XVTe@ep-shy-truth-a5hat2dz-pooler.us-east-2.aws.neon.tech/neondb?sslmode=require'
});

async function createDatabaseStepByStep() {
  console.log('üïâÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—à–∞–≥–æ–≤–æ...\n');
  
  const client = await pool.connect();
  
  try {
    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º pgvector
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pgvector...');
    try {
      await client.query('CREATE EXTENSION IF NOT EXISTS vector;');
      console.log('   ‚úÖ pgvector —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (error: any) {
      console.log('   ‚ö†Ô∏è pgvector –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    }
    
    // –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É
    console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É vibecoding_vectors...');
    try {
      await client.query('CREATE SCHEMA IF NOT EXISTS vibecoding_vectors;');
      console.log('   ‚úÖ –°—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞');
    } catch (error: any) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã:', error.message);
      throw error;
    }
    
    // –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    console.log('\n3Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É document_chunks...');
    try {
      const createTableSQL = `
        CREATE TABLE IF NOT EXISTS vibecoding_vectors.document_chunks (
          id SERIAL PRIMARY KEY,
          source_file VARCHAR(255) NOT NULL,
          source_path TEXT NOT NULL,
          chunk_index INTEGER NOT NULL,
          title TEXT,
          content TEXT NOT NULL,
          embedding vector(1536),
          metadata JSONB DEFAULT '{}',
          token_count INTEGER NOT NULL DEFAULT 0,
          chunk_hash CHAR(64) NOT NULL,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          UNIQUE(source_path, chunk_index),
          UNIQUE(chunk_hash)
        );
      `;
      
      await client.query(createTableSQL);
      console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞');
    } catch (error: any) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', error.message);
      
      // –ï—Å–ª–∏ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π —Ç–∏–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ
      if (error.message.includes('type "vector" does not exist')) {
        console.log('   üîÑ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞ (–±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–∑–∂–µ)...');
        
        const createTableWithoutVectorSQL = `
          CREATE TABLE IF NOT EXISTS vibecoding_vectors.document_chunks (
            id SERIAL PRIMARY KEY,
            source_file VARCHAR(255) NOT NULL,
            source_path TEXT NOT NULL,
            chunk_index INTEGER NOT NULL,
            title TEXT,
            content TEXT NOT NULL,
            embedding TEXT,
            metadata JSONB DEFAULT '{}',
            token_count INTEGER NOT NULL DEFAULT 0,
            chunk_hash CHAR(64) NOT NULL,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            UNIQUE(source_path, chunk_index),
            UNIQUE(chunk_hash)
          );
        `;
        
        await client.query(createTableWithoutVectorSQL);
        console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ (–±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞)');
      } else {
        throw error;
      }
    }
    
    // –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('\n4Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã...');
    
    const basicIndexes = [
      'CREATE INDEX IF NOT EXISTS idx_vibecoding_source_file ON vibecoding_vectors.document_chunks(source_file);',
      'CREATE INDEX IF NOT EXISTS idx_vibecoding_source_path ON vibecoding_vectors.document_chunks(source_path);',
      'CREATE INDEX IF NOT EXISTS idx_vibecoding_content_fts ON vibecoding_vectors.document_chunks USING gin(to_tsvector(\'russian\', content));',
      'CREATE INDEX IF NOT EXISTS idx_vibecoding_created_at ON vibecoding_vectors.document_chunks(created_at);'
    ];
    
    for (const indexSQL of basicIndexes) {
      try {
        await client.query(indexSQL);
        console.log('   ‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω');
      } catch (error: any) {
        console.log('   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞:', error.message);
      }
    }
    
    // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É...');
    
    const tableCheck = await client.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'vibecoding_vectors' 
        AND table_name = 'document_chunks'
      );
    `);
    
    if (tableCheck.rows[0].exists) {
      console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ vibecoding_vectors.document_chunks —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      const columns = await client.query(`
        SELECT column_name, data_type, is_nullable
        FROM information_schema.columns 
        WHERE table_schema = 'vibecoding_vectors' 
        AND table_name = 'document_chunks'
        ORDER BY ordinal_position;
      `);
      
      console.log('\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:');
      columns.rows.forEach(row => {
        console.log(`   üìÑ ${row.column_name}: ${row.data_type} ${row.is_nullable === 'YES' ? '(nullable)' : '(not null)'}`);
      });
      
    } else {
      throw new Error('–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞');
    }
    
    console.log('\nüéâ ============================================');
    console.log('‚úÖ –í–ï–ö–¢–û–†–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• –°–û–ó–î–ê–ù–ê –£–°–ü–ï–®–ù–û!');
    console.log('üéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
    console.log('üïâÔ∏è ============================================');
    
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    throw error;
  } finally {
    client.release();
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫
if (import.meta.main) {
  createDatabaseStepByStep();
}

export { createDatabaseStepByStep };
