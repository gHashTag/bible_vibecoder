#!/usr/bin/env bun

import { Pool } from 'pg';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const connectionString = process.env.DATABASE_URL || 
  'postgresql://neondb_owner:npg_jwz8kFs0XVTe@ep-shy-truth-a5hat2dz-pooler.us-east-2.aws.neon.tech/neondb?sslmode=require';

console.log('üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•\n');
console.log('üîó –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
console.log(`   ${connectionString.replace(/:[^:@]*@/, ':***@')}`); // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å

const pool = new Pool({ connectionString });

async function fullDiagnosis() {
  const client = await pool.connect();
  
  try {
    // 1. –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    console.log('\n1Ô∏è‚É£ –ë–ê–ó–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:');
    const basicInfo = await client.query(`
      SELECT 
        current_database() as database_name,
        current_user as user_name,
        inet_server_addr() as server_ip,
        inet_server_port() as server_port,
        version() as postgres_version;
    `);
    
    const info = basicInfo.rows[0];
    console.log(`   üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${info.database_name}`);
    console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${info.user_name}`);
    console.log(`   üåê –°–µ—Ä–≤–µ—Ä: ${info.server_ip}:${info.server_port}`);
    console.log(`   üì¶ PostgreSQL: ${info.postgres_version.split(' ').slice(0, 2).join(' ')}`);
    
    // 2. –í—Å–µ —Å—Ö–µ–º—ã
    console.log('\n2Ô∏è‚É£ –í–°–ï –°–•–ï–ú–´:');
    const schemas = await client.query(`
      SELECT 
        schema_name,
        schema_owner
      FROM information_schema.schemata 
      WHERE schema_name NOT IN ('information_schema', 'pg_catalog', 'pg_toast', 'pg_temp_1')
      ORDER BY schema_name;
    `);
    
    schemas.rows.forEach(row => {
      console.log(`   üìÅ ${row.schema_name} (–≤–ª–∞–¥–µ–ª–µ—Ü: ${row.schema_owner})`);
    });
    
    // 3. –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤–æ –≤—Å–µ—Ö —Å—Ö–µ–º–∞—Ö
    console.log('\n3Ô∏è‚É£ –í–°–ï –¢–ê–ë–õ–ò–¶–´:');
    const allTables = await client.query(`
      SELECT 
        schemaname,
        tablename,
        tableowner,
        hasindexes,
        hasrules,
        hastriggers
      FROM pg_tables 
      WHERE schemaname NOT IN ('information_schema', 'pg_catalog')
      ORDER BY schemaname, tablename;
    `);
    
    if (allTables.rows.length === 0) {
      console.log('   ‚ùå –ù–ï–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –¢–ê–ë–õ–ò–¶!');
    } else {
      allTables.rows.forEach(row => {
        console.log(`   üìä ${row.schemaname}.${row.tablename} (–≤–ª–∞–¥–µ–ª–µ—Ü: ${row.tableowner})`);
        console.log(`      –∏–Ω–¥–µ–∫—Å—ã: ${row.hasindexes ? '‚úÖ' : '‚ùå'}, –ø—Ä–∞–≤–∏–ª–∞: ${row.hasrules ? '‚úÖ' : '‚ùå'}, —Ç—Ä–∏–≥–≥–µ—Ä—ã: ${row.hastriggers ? '‚úÖ' : '‚ùå'}`);
      });
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –Ω–∞—à—É —Å—Ö–µ–º—É
    console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê vibecoding_vectors:');
    const schemaExists = await client.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.schemata 
        WHERE schema_name = 'vibecoding_vectors'
      );
    `);
    
    if (schemaExists.rows[0].exists) {
      console.log('   ‚úÖ –°—Ö–µ–º–∞ vibecoding_vectors –°–£–©–ï–°–¢–í–£–ï–¢');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ —ç—Ç–æ–π —Å—Ö–µ–º–µ
      const tablesInSchema = await client.query(`
        SELECT tablename 
        FROM pg_tables 
        WHERE schemaname = 'vibecoding_vectors';
      `);
      
      console.log(`   üìä –¢–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ: ${tablesInSchema.rows.length}`);
      tablesInSchema.rows.forEach(row => {
        console.log(`      üìÑ ${row.tablename}`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ document_chunks
      const tableExists = await client.query(`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_schema = 'vibecoding_vectors' 
          AND table_name = 'document_chunks'
        );
      `);
      
      if (tableExists.rows[0].exists) {
        console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ document_chunks –°–£–©–ï–°–¢–í–£–ï–¢');
        
        try {
          const count = await client.query('SELECT COUNT(*) FROM vibecoding_vectors.document_chunks;');
          console.log(`   üìä –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: ${count.rows[0].count}`);
          
          if (count.rows[0].count > 0) {
            const sample = await client.query(`
              SELECT source_path, title, LENGTH(content) as content_length 
              FROM vibecoding_vectors.document_chunks 
              LIMIT 3;
            `);
            console.log('   üìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:');
            sample.rows.forEach((row, i) => {
              console.log(`      ${i+1}. ${row.source_path}`);
              console.log(`         üìù ${row.title || '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'}`);
              console.log(`         üìè ${row.content_length} —Å–∏–º–≤–æ–ª–æ–≤`);
            });
          }
        } catch (err) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ: ${err}`);
        }
      } else {
        console.log('   ‚ùå –¢–∞–±–ª–∏—Ü–∞ document_chunks –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢');
      }
      
    } else {
      console.log('   ‚ùå –°—Ö–µ–º–∞ vibecoding_vectors –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢');
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º pgvector
    console.log('\n5Ô∏è‚É£ –†–ê–°–®–ò–†–ï–ù–ò–Ø:');
    const extensions = await client.query(`
      SELECT extname, extversion, extowner 
      FROM pg_extension 
      ORDER BY extname;
    `);
    
    extensions.rows.forEach(row => {
      console.log(`   üîß ${row.extname} v${row.extversion} (–≤–ª–∞–¥–µ–ª–µ—Ü: ${row.extowner})`);
    });
    
    // 6. –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    console.log('\n6Ô∏è‚É£ –ü–†–ê–í–ê –î–û–°–¢–£–ü–ê:');
    try {
      const privileges = await client.query(`
        SELECT 
          privilege_type,
          is_grantable
        FROM information_schema.role_table_grants 
        WHERE grantee = current_user 
        AND table_schema = 'vibecoding_vectors'
        AND table_name = 'document_chunks'
        LIMIT 5;
      `);
      
      if (privileges.rows.length > 0) {
        console.log('   ‚úÖ –ï—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ vibecoding_vectors.document_chunks:');
        privileges.rows.forEach(row => {
          console.log(`      üîë ${row.privilege_type} ${row.is_grantable === 'YES' ? '(can grant)' : ''}`);
        });
      } else {
        console.log('   ‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ vibecoding_vectors.document_chunks');
      }
    } catch (err) {
      console.log(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞: ${err.message}`);
    }
    
  } catch (error) {
    console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:', error);
  } finally {
    client.release();
    await pool.end();
  }
}

if (import.meta.main) {
  fullDiagnosis();
}
