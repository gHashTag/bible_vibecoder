#!/usr/bin/env bun

import { readdir, readFile, stat } from 'fs/promises';
import { join, relative, extname, basename } from 'path';
import { createHash } from 'crypto';
import { Pool } from 'pg';
import OpenAI from 'openai';

// üïâÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  VIBECODING_PATH: './vibecoding',
  CHUNK_SIZE: 1000, // —Ç–æ–∫–µ–Ω–æ–≤
  CHUNK_OVERLAP: 200, // —Ç–æ–∫–µ–Ω–æ–≤ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
  OPENAI_MODEL: 'text-embedding-3-small', // 1536 dimensions
  NEON_CONNECTION:
    process.env.DATABASE_URL ||
    'postgresql://neondb_owner:npg_jwz8kFs0XVTe@ep-shy-truth-a5hat2dz-pooler.us-east-2.aws.neon.tech/neondb?sslmode=require',
  BATCH_SIZE: 10, // —á–∞–Ω–∫–æ–≤ –∑–∞ —Ä–∞–∑ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || '',
});

const pool = new Pool({
  connectionString: CONFIG.NEON_CONNECTION,
});

interface VibeCodingChunk {
  sourcePath: string;
  sourceFile: string;
  chunkIndex: number;
  title?: string;
  content: string;
  tokenCount: number;
  chunkHash: string;
  metadata: Record<string, any>;
}

/**
 * üßò‚Äç‚ôÇÔ∏è –ü—Ä–æ—Å—Ç–∞—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
 */
function estimateTokenCount(text: string): number {
  // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  return Math.ceil(text.length / 4);
}

/**
 * üéØ –†–∞–∑–±–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —á–∞–Ω–∫–∏
 */
function chunkMarkdownText(
  content: string,
  filePath: string
): VibeCodingChunk[] {
  const chunks: VibeCodingChunk[] = [];

  // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–º–∞–Ω—Ç–∏–∫–∏
  const sections = content
    .split(/(?=^#{1,6}\s)/gm)
    .filter(section => section.trim());

  let currentChunk = '';
  let chunkIndex = 0;

  for (const section of sections) {
    const sectionTokens = estimateTokenCount(section);
    const currentTokens = estimateTokenCount(currentChunk);

    // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç —á–∞–Ω–∫–∞
    if (
      currentTokens + sectionTokens > CONFIG.CHUNK_SIZE &&
      currentChunk.trim()
    ) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫
      chunks.push({
        sourcePath: filePath,
        sourceFile: basename(filePath),
        chunkIndex: chunkIndex++,
        title: extractTitle(currentChunk),
        content: currentChunk.trim(),
        tokenCount: currentTokens,
        chunkHash: createHash('sha256')
          .update(currentChunk.trim())
          .digest('hex'),
        metadata: {
          section_type: detectSectionType(currentChunk),
          file_category: detectFileCategory(filePath),
        },
      });

      // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —á–∞–Ω–∫ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º
      const overlap = getOverlapText(currentChunk, CONFIG.CHUNK_OVERLAP);
      currentChunk = overlap + section;
    } else {
      currentChunk += section;
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
  if (currentChunk.trim()) {
    chunks.push({
      sourcePath: filePath,
      sourceFile: basename(filePath),
      chunkIndex: chunkIndex++,
      title: extractTitle(currentChunk),
      content: currentChunk.trim(),
      tokenCount: estimateTokenCount(currentChunk),
      chunkHash: createHash('sha256').update(currentChunk.trim()).digest('hex'),
      metadata: {
        section_type: detectSectionType(currentChunk),
        file_category: detectFileCategory(filePath),
      },
    });
  }

  return chunks;
}

/**
 * üìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ —á–∞–Ω–∫–∞
 */
function extractTitle(content: string): string | undefined {
  const titleMatch = content.match(/^#{1,6}\s+(.+)$/m);
  return titleMatch ? titleMatch[1].trim() : undefined;
}

/**
 * üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–µ–∫—Ü–∏–∏
 */
function detectSectionType(content: string): string {
  if (content.includes('```')) return 'code_example';
  if (content.match(/^#{1,2}\s/m)) return 'main_section';
  if (content.match(/^#{3,6}\s/m)) return 'subsection';
  if (content.includes('üïâÔ∏è') || content.includes('üßò')) return 'philosophy';
  if (content.includes('### –ü—Ä–∏–º–µ—Ä') || content.includes('Example'))
    return 'example';
  return 'content';
}

/**
 * üìÇ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–∞–π–ª–∞ –ø–æ –ø—É—Ç–∏
 */
function detectFileCategory(filePath: string): string {
  if (filePath.includes('01-–û–°–ù–û–í–´')) return 'fundamentals';
  if (filePath.includes('02-–ü–†–ê–ö–¢–ò–ö–ò')) return 'practices';
  if (filePath.includes('03-–ò–ù–°–¢–†–£–ú–ï–ù–¢–´')) return 'tools';
  if (filePath.includes('04-–†–ê–ó–í–ò–¢–ò–ï')) return 'development';
  if (filePath.includes('05-–ê–ù–ê–õ–ò–¢–ò–ö–ê')) return 'analytics';
  if (filePath.includes('06-–ê–†–•–ò–í')) return 'archive';
  if (filePath.includes('–ì–õ–ê–í–ù–ê–Ø –ö–ù–ò–ì–ê')) return 'main_book';
  return 'general';
}

/**
 * ‚úÇÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è —á–∞–Ω–∫–æ–≤
 */
function getOverlapText(content: string, overlapTokens: number): string {
  const words = content.split(/\s+/);
  const overlapWords = Math.floor((overlapTokens / 4) * 4); // –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
  return words.slice(-overlapWords).join(' ') + '\n\n';
}

/**
 * ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —á–µ—Ä–µ–∑ OpenAI
 */
async function generateEmbeddings(texts: string[]): Promise<number[][]> {
  try {
    console.log(`üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è ${texts.length} —á–∞–Ω–∫–æ–≤...`);

    const response = await openai.embeddings.create({
      model: CONFIG.OPENAI_MODEL,
      input: texts,
    });

    return response.data.map(item => item.embedding);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:', error);
    throw error;
  }
}

/**
 * üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞–Ω–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */
async function saveChunksToDatabase(
  chunks: VibeCodingChunk[],
  embeddings: number[][]
): Promise<void> {
  const client = await pool.connect();

  try {
    await client.query('BEGIN');

    for (let i = 0; i < chunks.length; i++) {
      const chunk = chunks[i];
      const embedding = embeddings[i];

      await client.query(
        `
        INSERT INTO vibecoding_vectors.document_chunks 
        (source_file, source_path, chunk_index, title, content, embedding, metadata, token_count, content_hash, chunk_hash)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
        ON CONFLICT (source_path, chunk_index) 
        DO UPDATE SET 
          content = EXCLUDED.content,
          embedding = EXCLUDED.embedding,
          metadata = EXCLUDED.metadata,
          token_count = EXCLUDED.token_count,
          content_hash = EXCLUDED.content_hash,
          chunk_hash = EXCLUDED.chunk_hash,
          updated_at = NOW()
      `,
        [
          chunk.sourceFile,
          chunk.sourcePath,
          chunk.chunkIndex,
          chunk.title,
          chunk.content,
          `[${embedding.join(',')}]`,
          JSON.stringify(chunk.metadata),
          chunk.tokenCount,
          chunk.chunkHash, // content_hash
          chunk.chunkHash, // chunk_hash (—Ç–æ—Ç –∂–µ —Ö–µ—à)
        ]
      );
    }

    await client.query('COMMIT');
    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${chunks.length} —á–∞–Ω–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î:', error);
    throw error;
  } finally {
    client.release();
  }
}

/**
 * üìö –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ markdown —Ñ–∞–π–ª–æ–≤
 */
async function scanMarkdownFiles(dirPath: string): Promise<string[]> {
  const files: string[] = [];

  async function scanDir(currentPath: string) {
    const items = await readdir(currentPath);

    for (const item of items) {
      const fullPath = join(currentPath, item);
      const stats = await stat(fullPath);

      if (stats.isDirectory()) {
        await scanDir(fullPath);
      } else if (stats.isFile() && extname(item).toLowerCase() === '.md') {
        files.push(fullPath);
      }
    }
  }

  await scanDir(dirPath);
  return files;
}

/**
 * üéØ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
async function vectorizeVibecoding(): Promise<void> {
  console.log('üïâÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ë–∏–±–ª–∏–∏ Vibecoding...\n');

  try {
    // 1. –°–∫–∞–Ω–∏—Ä—É–µ–º markdown —Ñ–∞–π–ª—ã
    console.log('üìÅ –°–∫–∞–Ω–∏—Ä—É–µ–º markdown —Ñ–∞–π–ª—ã...');
    const markdownFiles = await scanMarkdownFiles(CONFIG.VIBECODING_PATH);
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${markdownFiles.length} markdown —Ñ–∞–π–ª–æ–≤\n`);

    // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    let totalChunks = 0;

    for (const filePath of markdownFiles) {
      console.log(`üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${relative('.', filePath)}`);

      const content = await readFile(filePath, 'utf-8');
      const chunks = chunkMarkdownText(content, relative('.', filePath));

      console.log(`  ‚îî‚îÄ –°–æ–∑–¥–∞–Ω–æ ${chunks.length} —á–∞–Ω–∫–æ–≤`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫–∏ –±–∞—Ç—á–∞–º–∏ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
      for (let i = 0; i < chunks.length; i += CONFIG.BATCH_SIZE) {
        const batch = chunks.slice(i, i + CONFIG.BATCH_SIZE);
        const texts = batch.map(chunk => chunk.content);

        console.log(
          `  ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è —á–∞–Ω–∫–æ–≤ ${i + 1}-${Math.min(i + CONFIG.BATCH_SIZE, chunks.length)}...`
        );
        const embeddings = await generateEmbeddings(texts);

        console.log(`  üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`);
        await saveChunksToDatabase(batch, embeddings);

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
        if (i + CONFIG.BATCH_SIZE < chunks.length) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }

      totalChunks += chunks.length;
      console.log(`  ‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n`);
    }

    console.log(
      `üéâ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${totalChunks} —á–∞–Ω–∫–æ–≤ –∏–∑ ${markdownFiles.length} —Ñ–∞–π–ª–æ–≤`
    );
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

// üöÄ –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.main) {
  vectorizeVibecoding();
}

export { vectorizeVibecoding, CONFIG };
