#!/usr/bin/env bun

import { writeFile } from 'fs/promises';
import { join } from 'path';
import { vibeCodingCommands } from '../src/commands/vibecoding-commands';

// üïâÔ∏è –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
const TEST_QUERIES = [
  {
    name: '–û—Å–Ω–æ–≤—ã Vibecoding',
    query: '—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è vibecoding –º–µ–¥–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
    categories: ['fundamentals', 'philosophy'],
    style: 'gradient' as const,
  },
  {
    name: 'AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
    query: '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç GPT Claude Cursor',
    categories: ['tools'],
    style: 'dark' as const,
  },
  {
    name: '–ü—Ä–∞–∫—Ç–∏–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
    query: '–ø—Ä–∞–∫—Ç–∏–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JavaScript TypeScript',
    categories: ['practices', 'development'],
    style: 'vibrant' as const,
  },
  {
    name: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏',
    query: '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è',
    categories: ['analytics'],
    style: 'minimalist' as const,
  },
];

/**
 * üß™ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function testVibeCodingSystem() {
  console.log('üïâÔ∏è ============================================');
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–ò VIBECODING');
  console.log('üïâÔ∏è ============================================\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã
    console.log('üìä 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã...');
    const stats = await vibeCodingCommands.getVibeCodingStats();

    console.log(`   ‚úÖ –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: ${stats.totalChunks}`);
    console.log(`   ‚úÖ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.totalFiles}`);
    console.log(
      `   ‚úÖ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: ${Math.round(stats.avgTokensPerChunk)} —Ç–æ–∫–µ–Ω–æ–≤`
    );
    console.log(
      `   ‚úÖ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${stats.topCategories.slice(0, 3).join(', ')}`
    );
    console.log(
      `   ‚úÖ –¢–æ–ø —Ç–∏–ø—ã —Å–µ–∫—Ü–∏–π: ${stats.topSectionTypes.slice(0, 3).join(', ')}\n`
    );

    if (stats.totalChunks === 0) {
      console.log('‚ö†Ô∏è  –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –ø—É—Å—Ç–∞! –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');

      const reindexResult = await vibeCodingCommands.reindexVibecoding();

      if (reindexResult.success) {
        console.log(`   ‚úÖ ${reindexResult.message}\n`);
      } else {
        console.error(`   ‚ùå ${reindexResult.message}\n`);
        return;
      }
    }

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–∏—Å–∫–∞
    console.log('üîç 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–∏—Å–∫–∞...');

    const searchResults = await vibeCodingCommands.searchVibecoding({
      query: '–º–µ–¥–∏—Ç–∞—Ü–∏—è –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
      searchType: 'hybrid',
      limit: 5,
      generateCarousel: false,
    });

    if (searchResults.success) {
      console.log(`   ‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${searchResults.totalTime}ms`);
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${searchResults.results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);

      if (searchResults.stats) {
        console.log(
          `   ‚úÖ –í–µ–∫—Ç–æ—Ä–Ω—ã—Ö: ${searchResults.stats.vectorCount}, –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö: ${searchResults.stats.fullTextCount}`
        );
      }

      searchResults.results.slice(0, 2).forEach((result, index) => {
        console.log(
          `   üìÑ ${index + 1}. ${result.title || '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'} (${Math.round(result.similarity * 100)}%)`
        );
        console.log(
          `      –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${result.category}, –§–∞–π–ª: ${result.sourceFile}`
        );
      });
    } else {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${searchResults.error}`);
    }
    console.log('');

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—É—Å–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    console.log('üé® 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–µ–π...\n');

    const outputDir = './test-outputs';

    for (const testCase of TEST_QUERIES) {
      console.log(`   üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${testCase.name}`);
      console.log(`   üìù –ó–∞–ø—Ä–æ—Å: "${testCase.query}"`);
      console.log(`   üé® –°—Ç–∏–ª—å: ${testCase.style}`);

      try {
        const carouselResult =
          await vibeCodingCommands.generateVibeCodingCarousel(testCase.query, {
            maxCards: 3,
            style: testCase.style,
            categories: testCase.categories,
            includeCodeExamples: true,
          });

        if (carouselResult.success) {
          console.log(`   ‚úÖ ${carouselResult.message}`);
          console.log(
            `   ‚è±Ô∏è  –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: ${carouselResult.searchStats?.queryTime}ms`
          );

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª–∏
          if (
            carouselResult.carouselImages &&
            carouselResult.carouselImages.length > 0
          ) {
            for (let i = 0; i < carouselResult.carouselImages.length; i++) {
              const imageData = carouselResult.carouselImages[i];
              const base64Data = imageData.replace(
                /^data:image\/png;base64,/,
                ''
              );
              const fileName = `${testCase.name.replace(/\s+/g, '_').toLowerCase()}_card_${i + 1}.png`;
              const filePath = join(outputDir, fileName);

              try {
                await writeFile(filePath, base64Data, 'base64');
                console.log(`   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${fileName}`);
              } catch (saveError) {
                console.error(
                  `   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${fileName}:`,
                  saveError
                );
              }
            }
          }

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
          if (carouselResult.carouselCards) {
            carouselResult.carouselCards.forEach((card, index) => {
              console.log(`   üìÑ –ö–∞—Ä—Ç–æ—á–∫–∞ ${index + 1}: ${card.title}`);
              console.log(
                `      –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${card.category}, –¢–µ–≥–∏: ${card.tags.slice(0, 3).join(', ')}`
              );
              if (card.codeExamples && card.codeExamples.length > 0) {
                console.log(`      üíª –ï—Å—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞`);
              }
              if (card.keyPrinciples && card.keyPrinciples.length > 0) {
                console.log(`      üéØ –ü—Ä–∏–Ω—Ü–∏–ø–æ–≤: ${card.keyPrinciples.length}`);
              }
            });
          }
        } else {
          console.error(
            `   ‚ùå ${carouselResult.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
          );
        }
      } catch (error) {
        console.error(`   üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error}`);
      }

      console.log('');
    }

    // 4. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('üìà 4. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');

    const finalStats = await vibeCodingCommands.getVibeCodingStats();

    console.log(`   üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:`);
    console.log(`      ‚Ä¢ –ß–∞–Ω–∫–æ–≤: ${finalStats.totalChunks}`);
    console.log(`      ‚Ä¢ –§–∞–π–ª–æ–≤: ${finalStats.totalFiles}`);
    console.log(
      `      ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: ${Math.round(finalStats.avgTokensPerChunk)} —Ç–æ–∫–µ–Ω–æ–≤`
    );

    console.log(`   üìÇ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:`);
    Object.entries(finalStats.categoryCounts)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 5)
      .forEach(([category, count]) => {
        console.log(`      ‚Ä¢ ${category}: ${count} —á–∞–Ω–∫–æ–≤`);
      });

    console.log(`   üìù –¢–∏–ø—ã —Å–µ–∫—Ü–∏–π:`);
    Object.entries(finalStats.sectionTypeCounts)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 5)
      .forEach(([sectionType, count]) => {
        console.log(`      ‚Ä¢ ${sectionType}: ${count} —á–∞–Ω–∫–æ–≤`);
      });

    console.log('\nüéâ ============================================');
    console.log('‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!');
    console.log('üé® –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –∫–∞—Ä—É—Å–µ–ª–µ–π –≤ –ø–∞–ø–∫–µ test-outputs/');
    console.log('üïâÔ∏è ============================================');
  } catch (error) {
    console.error('\nüí• ============================================');
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò:');
    console.error(error);
    console.error('üïâÔ∏è ============================================');
    process.exit(1);
  }
}

/**
 * üèÉ‚Äç‚ôÇÔ∏è –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
 */
async function quickTest(query: string = 'vibecoding —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è') {
  console.log(`üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: "${query}"`);

  const result = await vibeCodingCommands.generateVibeCodingCarousel(query, {
    maxCards: 2,
    style: 'vibrant',
    includeCodeExamples: true,
  });

  if (result.success) {
    console.log(`‚úÖ ${result.message}`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞:`, result.searchStats);

    if (result.carouselCards) {
      result.carouselCards.forEach((card, index) => {
        console.log(
          `üìÑ ${index + 1}. ${card.title} (${Math.round(card.relevanceScore * 100)}%)`
        );
      });
    }
  } else {
    console.error(`‚ùå ${result.error}`);
  }
}

// üöÄ –ó–∞–ø—É—Å–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
const args = process.argv.slice(2);

if (args[0] === 'quick') {
  const query = args.slice(1).join(' ');
  quickTest(query);
} else if (import.meta.main) {
  testVibeCodingSystem();
}

export { testVibeCodingSystem, quickTest };
