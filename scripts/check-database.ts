#!/usr/bin/env bun

import { Pool } from 'pg';

const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 
    'postgresql://neondb_owner:npg_jwz8kFs0XVTe@ep-shy-truth-a5hat2dz-pooler.us-east-2.aws.neon.tech/neondb?sslmode=require'
});

async function checkDatabase() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...\n');
  
  const client = await pool.connect();
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—Ö–µ–º—ã
    console.log('üìÅ –í—Å–µ —Å—Ö–µ–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    const schemas = await client.query(`
      SELECT schema_name 
      FROM information_schema.schemata 
      WHERE schema_name NOT IN ('information_schema', 'pg_catalog', 'pg_toast')
      ORDER BY schema_name;
    `);
    
    schemas.rows.forEach(row => {
      console.log(`   üìÇ ${row.schema_name}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤–æ –≤—Å–µ—Ö —Å—Ö–µ–º–∞—Ö
    console.log('\nüìä –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ —Å—Ö–µ–º–∞–º:');
    const tables = await client.query(`
      SELECT table_schema, table_name, table_type
      FROM information_schema.tables 
      WHERE table_schema NOT IN ('information_schema', 'pg_catalog')
      ORDER BY table_schema, table_name;
    `);
    
    if (tables.rows.length === 0) {
      console.log('   ‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü');
    } else {
      tables.rows.forEach(row => {
        console.log(`   üìÑ ${row.table_schema}.${row.table_name} (${row.table_type})`);
      });
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à—É —Ç–∞–±–ª–∏—Ü—É
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ vibecoding_vectors.document_chunks:');
    const ourTable = await client.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'vibecoding_vectors' 
        AND table_name = 'document_chunks'
      );
    `);
    
    if (ourTable.rows[0].exists) {
      console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ vibecoding_vectors.document_chunks –°–£–©–ï–°–¢–í–£–ï–¢');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
      const count = await client.query('SELECT COUNT(*) FROM vibecoding_vectors.document_chunks;');
      console.log(`   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${count.rows[0].count}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      const structure = await client.query(`
        SELECT column_name, data_type 
        FROM information_schema.columns 
        WHERE table_schema = 'vibecoding_vectors' 
        AND table_name = 'document_chunks'
        ORDER BY ordinal_position;
      `);
      
      console.log('   üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:');
      structure.rows.forEach(row => {
        console.log(`      üìÑ ${row.column_name}: ${row.data_type}`);
      });
      
    } else {
      console.log('   ‚ùå –¢–∞–±–ª–∏—Ü–∞ vibecoding_vectors.document_chunks –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º pgvector
    console.log('\nüîß –ü—Ä–æ–≤–µ—Ä—è–µ–º pgvector —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ:');
    const extensions = await client.query(`
      SELECT extname, extversion 
      FROM pg_extension 
      WHERE extname = 'vector';
    `);
    
    if (extensions.rows.length > 0) {
      console.log(`   ‚úÖ pgvector —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–µ—Ä—Å–∏—è: ${extensions.rows[0].extversion}`);
    } else {
      console.log('   ‚ùå pgvector –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    client.release();
    await pool.end();
  }
}

if (import.meta.main) {
  checkDatabase();
}
