/**
 * üß™ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ Telegram –∏ Inngest
 */

import { CarouselContentGeneratorService } from '../src/services/carousel-content-generator.service';
import { InstagramCanvasService } from '../src/services/instagram-canvas.service';

async function testCarouselDirect() {
  console.log('üé® –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏...\n');

  try {
    const topic = '–º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ';
    console.log(`üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–º—É: "${topic}"`);

    // –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    console.log('\nüîç –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–ª–∞–π–¥–æ–≤...');
    const contentGenerator = new CarouselContentGeneratorService();

    const slides = await contentGenerator.generateCarouselSlides(topic);

    if (!slides || slides.length === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–∞–π–¥—ã');
    }

    console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${slides.length} —Å–ª–∞–π–¥–æ–≤:`);
    slides.forEach((slide, index) => {
      console.log(`  ${index + 1}. ${slide.title} (${slide.type})`);
    });

    // –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    console.log('\nüé® –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    const canvasService = new InstagramCanvasService();

    const imagePaths = await canvasService.generateCarouselImageFiles(slides);

    console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${imagePaths.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:`);
    imagePaths.forEach((path, index) => {
      console.log(`  ${index + 1}. ${path}`);
    });

    // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    console.log('\nüìÅ –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
    const fs = await import('fs/promises');

    for (const imagePath of imagePaths) {
      try {
        const stats = await fs.stat(imagePath);
        console.log(`  ‚úÖ ${imagePath} (${Math.round(stats.size / 1024)} KB)`);
      } catch (error) {
        console.log(`  ‚ùå ${imagePath} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    }

    console.log('\nüéâ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    console.log(
      `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${slides.length} —Å–ª–∞–π–¥–æ–≤, ${imagePaths.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`
    );

    return {
      success: true,
      slidesCount: slides.length,
      imagesCount: imagePaths.length,
      imagePaths,
      slides: slides.map(slide => ({
        title: slide.title,
        type: slide.type,
        order: slide.order,
      })),
    };
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);

    if (error instanceof Error) {
      console.error('üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', error.message);
      console.error('üîç –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    }

    return {
      success: false,
      error: error instanceof Error ? error.message : String(error),
    };
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testCarouselDirect()
  .then(result => {
    console.log('\nüìã –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result, null, 2));
    process.exit(result.success ? 0 : 1);
  })
  .catch(error => {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
