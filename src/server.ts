/**
 * HTTP Server –¥–ª—è Bible VibeCoder
 *
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–µ–∂–¥—É Telegram –±–æ—Ç–æ–º –∏ Inngest —Ñ—É–Ω–∫—Ü–∏—è–º–∏
 * —á–µ—Ä–µ–∑ HTTP endpoints. –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç webhook'–∏ –æ—Ç Inngest –∏
 * –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Telegram –±–æ—Ç–∞.
 */

import { serve } from 'inngest/bun';
import { inngest } from './inngest/client';
import { functions } from './inngest/functions';
import { logger, LogType } from './utils/logger';
// import { config } from './config'; // –£–¥–∞–ª–µ–Ω –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∏–º–ø–æ—Ä—Ç

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
 */
const SERVER_CONFIG = {
  port: parseInt(
    process.env.HTTP_SERVER_PORT || process.env.PORT || '7103',
    10
  ),
  host: '0.0.0.0',
  inngestPath: '/api/inngest',
  appId: 'bible-vibecoder-app-single', // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
} as const;

/**
 * –°–æ–∑–¥–∞–µ—Ç HTTP —Å–µ—Ä–≤–µ—Ä —Å Inngest –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
 */
export async function createServer() {
  logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP —Å–µ—Ä–≤–µ—Ä–∞...', { type: LogType.SYSTEM });

  try {
    // –°–æ–∑–¥–∞–µ–º Inngest handler —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
    const inngestHandler = serve({
      client: inngest,
      functions,
    });

    // –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
    const server = Bun.serve({
      port: SERVER_CONFIG.port,
      hostname: SERVER_CONFIG.host,
      fetch: req => {
        const url = new URL(req.url);

        // Health check endpoint
        if (url.pathname === '/health') {
          return new Response(
            JSON.stringify({
              status: 'ok',
              timestamp: new Date().toISOString(),
              service: 'bible-vibecoder-http-server',
              port: SERVER_CONFIG.port,
              version: '1.0.0',
            }),
            {
              headers: { 'Content-Type': 'application/json' },
              status: 200,
            }
          );
        }

        // üé® –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–≤—å—é-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–µ–º–ø–ª–µ–π—Ç–æ–≤
        if (url.pathname.startsWith('/preview/')) {
          const filename = url.pathname.replace('/preview/', '');
          const previewPath = `${process.cwd()}/template-previews/${filename}`;

          try {
            const file = Bun.file(previewPath);
            return new Response(file, {
              headers: {
                'Content-Type': 'image/png',
                'Cache-Control': 'public, max-age=3600', // –ö–µ—à–∏—Ä—É–µ–º –Ω–∞ —á–∞—Å
              },
            });
          } catch (error) {
            return new Response('Preview not found', { status: 404 });
          }
        }

        // –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∫ /api/inngest –≤ Inngest handler
        if (url.pathname.startsWith('/api/inngest')) {
          return inngestHandler(req);
        }

        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 404
        return new Response('Not Found', { status: 404 });
      },
    });

    logger.info(`‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω`, {
      type: LogType.SYSTEM,
      data: {
        port: SERVER_CONFIG.port,
        host: SERVER_CONFIG.host,
        inngestPath: SERVER_CONFIG.inngestPath,
      },
    });

    logger.info(
      `üìä Inngest endpoint: http://${SERVER_CONFIG.host}:${SERVER_CONFIG.port}${SERVER_CONFIG.inngestPath}`,
      {
        type: LogType.SYSTEM,
      }
    );

    return {
      server,
      config: SERVER_CONFIG,
    };
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞', {
      error: error instanceof Error ? error : new Error(String(error)),
      type: LogType.ERROR,
    });
    throw error;
  }
}

/**
 * Graceful shutdown –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
 */
export function setupGracefulShutdown(server: any) {
  const shutdown = async (signal: string) => {
    logger.info(`üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä...`, {
      type: LogType.SYSTEM,
    });

    try {
      // –ï—Å–ª–∏ —É —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å—Ç—å –º–µ—Ç–æ–¥ close, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (server && typeof server.close === 'function') {
        await server.close();
      }

      logger.info('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', {
        type: LogType.SYSTEM,
      });
      process.exit(0);
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞', {
        error: error instanceof Error ? error : new Error(String(error)),
        type: LogType.ERROR,
      });
      process.exit(1);
    }
  };

  process.once('SIGINT', () => shutdown('SIGINT'));
  process.once('SIGTERM', () => shutdown('SIGTERM'));
}

/**
 * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)
 */
const isEntryPoint =
  (typeof import.meta.main === 'boolean' && import.meta.main) ||
  process.argv[1]?.endsWith('server.ts') ||
  process.argv[1]?.endsWith('server.js');

if (isEntryPoint) {
  createServer()
    .then(({ server }) => {
      setupGracefulShutdown(server);
    })
    .catch(error => {
      logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞', {
        error: error instanceof Error ? error : new Error(String(error)),
        type: LogType.ERROR,
      });
      process.exit(1);
    });
}
