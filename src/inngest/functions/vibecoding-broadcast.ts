/**
 * üéØ Inngest —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ Vibecoding
 */

import { inngest } from '../client';
import { NonRetriableError } from 'inngest';
import { bot } from '../../bot';
import { db } from '../../db';
import { eq } from 'drizzle-orm';
import { users, userSettings } from '../../db/schema';
import { logger } from '../../utils/logger';
import {
  VibeCodingContentService,
  ContentType,
} from '../../services/vibecoding-content.service';
import { generateVibeCodingCarousel } from '../../commands/vibecoding-commands';

const contentService = new VibeCodingContentService();

export const vibecodingBroadcastFunction = inngest.createFunction(
  { id: 'vibecoding-broadcast' },
  { event: 'vibecoding/broadcast' },
  async ({ event, step }) => {
    const { topic, contentType } = event.data;

    // –®–∞–≥ 1: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const activeUsers = await step.run('get-active-users', async () => {
      logger.info('üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');

      if (!db) {
        throw new NonRetriableError('Database connection is not available');
      }

      const usersWithSettings = await db
        .select({
          id: users.id,
          telegram_id: users.telegram_id,
          username: users.username,
          first_name: users.first_name,
          notifications_enabled: userSettings.notifications_enabled,
          preferred_language: userSettings.preferred_language,
        })
        .from(users)
        .leftJoin(userSettings, eq(users.id, userSettings.user_id))
        .where(eq(userSettings.notifications_enabled, true));

      logger.info(
        `‚úÖ –ù–∞–π–¥–µ–Ω–æ ${usersWithSettings.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`
      );
      return usersWithSettings;
    });

    if (activeUsers.length === 0) {
      logger.warn('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
      return { success: true, message: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' };
    }

    // –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    let content: any;
    let mediaGroup: any[] = [];

    if (contentType === ContentType.CAROUSEL) {
      content = await step.run('generate-carousel', async () => {
        logger.info(`üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—É—Å–µ–ª—å –¥–ª—è —Ç–µ–º—ã: ${topic}`);

        const carouselResult = await generateVibeCodingCarousel(topic, {
          maxCards: 7,
          style: 'vibrant',
          includeCodeExamples: true,
        });

        if (!carouselResult.success) {
          throw new NonRetriableError(
            `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—É—Å–µ–ª—å: ${carouselResult.error}`
          );
        }

        return carouselResult;
      });

      // –®–∞–≥ 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏
      mediaGroup = await step.run('prepare-media-group', async () => {
        logger.info('üì∏ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');

        if (!content.carouselImages || content.carouselImages.length === 0) {
          throw new NonRetriableError('–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –æ–±—Ä–∞—Ç–Ω–æ –≤ Buffer –¥–ª—è Telegram API
        const mediaItems = content.carouselImages.map(
          (base64Image: string, index: number) => {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º base64 –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
            const base64Data = base64Image.replace(
              /^data:image\/png;base64,/,
              ''
            );
            const buffer = Buffer.from(base64Data, 'base64');

            return {
              type: 'document' as const,
              media: { source: buffer },
              caption:
                index === 0 ? `üéØ ${topic}\n\n${content.message}` : undefined,
            };
          }
        );

        logger.info(`‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${mediaItems.length} –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤`);
        return mediaItems;
      });
    } else {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–µ–∫—Å—Ç, –≤–∏–¥–µ–æ –∏ —Ç.–¥.)
      content = await step.run('generate-content', async () => {
        logger.info(
          `üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–∏–ø–∞ ${contentType} –¥–ª—è —Ç–µ–º—ã: ${topic}`
        );

        const generatedContent = await contentService.generateContent(
          topic,
          contentType
        );

        return {
          success: true,
          message: generatedContent.title,
          data: generatedContent,
        };
      });
    }

    // –®–∞–≥ 4: –†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const results = await step.run('broadcast-content', async () => {
      logger.info(
        `üì§ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ${activeUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`
      );

      const sendResults = [];

      for (const user of activeUsers) {
        try {
          if (contentType === ContentType.CAROUSEL && mediaGroup.length > 0) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—É—Å–µ–ª—å –∫–∞–∫ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
            await bot.telegram.sendMediaGroup(
              user.telegram_id as number,
              mediaGroup
            );
          } else {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.telegram.sendMessage(
              user.telegram_id as number,
              `üéØ ${topic}\n\n${content.message || content.data?.title || '–ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç Vibecoding!'}`,
              { parse_mode: 'HTML' }
            );
          }

          sendResults.push({
            user_id: user.telegram_id,
            success: true,
          });

          logger.info(
            `‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username || user.telegram_id}`
          );
        } catch (error) {
          logger.error(
            `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username || user.telegram_id}`,
            {
              error: error instanceof Error ? error : new Error(String(error)),
            }
          );

          sendResults.push({
            user_id: user.telegram_id,
            success: false,
            error: error instanceof Error ? error.message : String(error),
          });
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
      }

      return sendResults;
    });

    // –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const successCount = results.filter(r => r.success).length;
    const failCount = results.filter(r => !r.success).length;

    logger.info(
      `üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${failCount} –æ—à–∏–±–æ–∫`
    );

    return {
      success: true,
      message: `–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount}/${activeUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
      stats: {
        total: activeUsers.length,
        success: successCount,
        failed: failCount,
        contentType,
        topic,
      },
    };
  }
);
