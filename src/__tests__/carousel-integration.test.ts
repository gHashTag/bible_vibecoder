/**
 * üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–∞—Ä—É—Å–µ–ª–∏ —Å –≥–∞–ª–µ—Ä–µ–µ–π —Ç–µ–º–ø–ª–µ–π—Ç–æ–≤
 */

import { describe, test, expect, beforeAll } from 'bun:test';
import { promises as fs } from 'fs';
import path from 'path';

describe('üé® Carousel Integration Tests', () => {
  
  beforeAll(async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–≤—å—é-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const previewDir = path.join(process.cwd(), 'template-previews');
    try {
      await fs.access(previewDir);
    } catch {
      console.warn('‚ö†Ô∏è Template previews not found. Run: bun scripts/generate-template-previews.ts');
    }
  });

  test('üñºÔ∏è –ü—Ä–µ–≤—å—é-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç VibeCoding –∫–æ–Ω—Ç–µ–Ω—Ç', async () => {
    const previewDir = path.join(process.cwd(), 'template-previews');
    
    try {
      const files = await fs.readdir(previewDir);
      const previewFiles = files.filter(file => file.endsWith('-preview.png'));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø—Ä–µ–≤—å—é –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º–ø–ª–µ–π—Ç–æ–≤
      expect(previewFiles.length).toBeGreaterThan(10);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º–∏)
      for (const file of previewFiles.slice(0, 3)) { // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        const filePath = path.join(previewDir, file);
        const stats = await fs.stat(filePath);
        
        // –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 5KB –∏ –º–µ–Ω—å—à–µ 200KB
        expect(stats.size).toBeGreaterThan(5000);
        expect(stats.size).toBeLessThan(200000);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Could not test preview images:', error);
      // –ù–µ —Ñ–µ–π–ª–∏–º —Ç–µ—Å—Ç, –µ—Å–ª–∏ –ø—Ä–µ–≤—å—é –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã
    }
  });

  test('üîÑ –ö–∞—Ä—É—Å–µ–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', () => {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏
    const templateCount = 16; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º–ø–ª–µ–π—Ç–æ–≤
    let currentIndex = 0;
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤–ø–µ—Ä–µ–¥
    for (let i = 0; i < templateCount + 2; i++) {
      currentIndex = (currentIndex + 1) % templateCount;
    }
    expect(currentIndex).toBe(2); // –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ + 2
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞–∑–∞–¥
    currentIndex = 0;
    currentIndex = (currentIndex - 1 + templateCount) % templateCount;
    expect(currentIndex).toBe(templateCount - 1); // –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞—Å—Ç—å –≤ –∫–æ–Ω–µ—Ü
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞–∑–∞–¥ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    currentIndex = (currentIndex - 1 + templateCount) % templateCount;
    expect(currentIndex).toBe(templateCount - 2);
  });

  test('üì± Callback –¥–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ', () => {
    const topicKey = 'test_topic_123';
    const templateKey = 'black_gold';
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã callback –¥–∞–Ω–Ω—ã—Ö
    const navNext = `nav:next:${topicKey}`;
    const navPrev = `nav:prev:${topicKey}`;
    const select = `select:${templateKey}:${topicKey}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    expect(navNext.split(':')).toEqual(['nav', 'next', topicKey]);
    expect(navPrev.split(':')).toEqual(['nav', 'prev', topicKey]);
    expect(select.split(':')).toEqual(['select', templateKey, topicKey]);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –∏–∑–≤–ª–µ—á—å –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const [action, param, topic] = select.split(':');
    expect(action).toBe('select');
    expect(param).toBe(templateKey);
    expect(topic).toBe(topicKey);
  });

  test('üé® VibeCoding —Ü–∏—Ç–∞—Ç—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã', () => {
    const quotes = [
      '–ö–æ–¥ - —ç—Ç–æ –ø–æ—ç–∑–∏—è –ª–æ–≥–∏–∫–∏ üé≠',
      '–í –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∂–∏–≤–µ—Ç –¥—É—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ üëª',
      '–ß–∏—Å—Ç—ã–π –∫–æ–¥ - –ø—É—Ç—å –∫ –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏—é ‚ú®',
      '–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ - –º–µ–¥–∏—Ç–∞—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ üßò‚Äç‚ôÇÔ∏è',
      '–ë–∞–≥–∏ - —É—á–∏—Ç–µ–ª—è —Ç–µ—Ä–ø–µ–Ω–∏—è üêõ'
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    const uniqueQuotes = new Set(quotes);
    expect(uniqueQuotes.size).toBe(quotes.length);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    quotes.forEach(quote => {
      expect(quote.length).toBeGreaterThan(10);
      expect(quote).toMatch(/üé≠|üëª|‚ú®|üßò‚Äç‚ôÇÔ∏è|üêõ|üéØ|ü™Ñ|üìö|üåâ|üíÉ/); // —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–æ–¥–∑–∏
    });
  });

  test('üöÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø—Ä–µ–≤—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç', () => {
    const serverPort = process.env.HTTP_SERVER_PORT || '7103';
    const templateKey = 'emerald_luxury';
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ
    const previewUrl = `http://localhost:${serverPort}/preview/${templateKey}-preview.png`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç URL
    expect(previewUrl).toMatch(/^http:\/\/localhost:\d+\/preview\/\w+-preview\.png$/);
    expect(previewUrl).toContain(templateKey);
    expect(previewUrl).toContain(serverPort);
  });

  test('üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', () => {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const mockCarouselState: Record<string, { currentIndex: number }> = {};
    const topicKey = 'test_123';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    mockCarouselState[topicKey] = { currentIndex: 0 };
    expect(mockCarouselState[topicKey].currentIndex).toBe(0);
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–ø–µ—Ä–µ–¥
    mockCarouselState[topicKey].currentIndex = (mockCarouselState[topicKey].currentIndex + 1) % 16;
    expect(mockCarouselState[topicKey].currentIndex).toBe(1);
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
    mockCarouselState[topicKey].currentIndex = 
      (mockCarouselState[topicKey].currentIndex - 1 + 16) % 16;
    expect(mockCarouselState[topicKey].currentIndex).toBe(0);
    
    // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    delete mockCarouselState[topicKey];
    expect(mockCarouselState[topicKey]).toBeUndefined();
  });
});
