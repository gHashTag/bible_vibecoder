/**
 * E2E —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /carousel –≤ Telegram –±–æ—Ç–µ
 *
 * –ü—Ä–æ–≤–µ—Ä—è—é—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é: –∫–æ–º–∞–Ω–¥–∞ -> Inngest -> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è -> –æ—Ç–ø—Ä–∞–≤–∫–∞
 */

import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';
import type { CarouselSlide } from '../../../types';

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
const createTelegramSceneTester = () => ({
  sendUpdate: vi.fn().mockResolvedValue({
    success: true,
    responses: [
      {
        method: 'sendMessage',
        text: 'üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é Instagram –∫–∞—Ä—É—Å–µ–ª—å...\n\nüìã *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n‚Ä¢ –¢–µ–º–∞: VIBECODING\n‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤: 5',
      },
    ],
  }),
  cleanup: vi.fn(),
  spyOnInngestEvent: vi.fn().mockReturnValue(vi.fn()),
  mockInngestResponse: vi.fn(),
  mockInngestError: vi.fn(),
  waitForInngestCompletion: vi.fn().mockResolvedValue(undefined),
  waitForResponse: vi.fn().mockResolvedValue({
    text: 'üé® *–í–∞—à–∞ Instagram –∫–∞—Ä—É—Å–µ–ª—å –≥–æ—Ç–æ–≤–∞!*\n\n5 —Å–ª–∞–π–¥–æ–≤ –ø–æ —Ç–µ–º–µ: Fallback —Ç–µ—Å—Ç\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nüöÄ *–ì–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Instagram!*',
  }),
  getAllResponses: vi.fn().mockResolvedValue([]),
  spyOnLogs: vi.fn().mockReturnValue(vi.fn()),
  spyOnMetrics: vi.fn().mockReturnValue(vi.fn()),
});

const mockTelegramUpdate = (data: any) => data;

describe('üé† E2E: –ö–æ–º–∞–Ω–¥–∞ /carousel', () => {
  let sceneTester: ReturnType<typeof createTelegramSceneTester>;

  beforeEach(() => {
    sceneTester = createTelegramSceneTester();
  });

  afterEach(() => {
    sceneTester.cleanup();
  });

  describe('üìù –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /carousel –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', async () => {
      const update = mockTelegramUpdate({
        message: {
          text: '/carousel',
          from: { id: 12345, first_name: 'Test User' },
          chat: { id: 12345, type: 'private' },
        },
      });

      const result = await sceneTester.sendUpdate(update);

      expect(result.success).toBe(true);
      expect(result.responses).toHaveLength(1);

      const response = result.responses[0];
      expect(response.method).toBe('sendMessage');
      expect(response.text).toContain('üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é Instagram –∫–∞—Ä—É—Å–µ–ª—å');
      expect(response.text).toContain('–¢–µ–º–∞: VIBECODING');
      expect(response.text).toContain('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤: 5');
    });

    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–µ–º—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞', async () => {
      const update = mockTelegramUpdate({
        message: {
          text: '/carousel –ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
          from: { id: 12345, first_name: 'Test User' },
          chat: { id: 12345, type: 'private' },
        },
      });

      sceneTester.sendUpdate.mockResolvedValue({
        success: true,
        responses: [
          {
            method: 'sendMessage',
            text: 'üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é Instagram –∫–∞—Ä—É—Å–µ–ª—å...\n\nüìã *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n‚Ä¢ –¢–µ–º–∞: –ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ\n‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤: 5',
          },
        ],
      });

      const result = await sceneTester.sendUpdate(update);

      expect(result.success).toBe(true);
      expect(result.responses).toHaveLength(1);

      const response = result.responses[0];
      expect(response.text).toContain('–¢–µ–º–∞: –ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ');
    });

    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤ –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä', async () => {
      const update = mockTelegramUpdate({
        message: {
          text: '/carousel "AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã" 7',
          from: { id: 12345, first_name: 'Test User' },
          chat: { id: 12345, type: 'private' },
        },
      });

      sceneTester.sendUpdate.mockResolvedValue({
        success: true,
        responses: [
          {
            method: 'sendMessage',
            text: 'üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é Instagram –∫–∞—Ä—É—Å–µ–ª—å...\n\nüìã *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n‚Ä¢ –¢–µ–º–∞: AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤: 7',
          },
        ],
      });

      const result = await sceneTester.sendUpdate(update);

      expect(result.success).toBe(true);
      expect(result.responses).toHaveLength(1);

      const response = result.responses[0];
      expect(response.text).toContain('–¢–µ–º–∞: AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã');
      expect(response.text).toContain('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤: 7');
    });
  });

  describe('üîÑ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Inngest', () => {
    it.skip('–¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Inngest –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏', async () => {
      const inngestSpy = sceneTester.spyOnInngestEvent(
        'carousel/generate.requested'
      );

      const update = mockTelegramUpdate({
        message: {
          text: '/carousel "TDD –ø—Ä–∞–∫—Ç–∏–∫–∏" 5',
          from: { id: 67890, first_name: 'TDD User' },
          chat: { id: 67890, type: 'private' },
        },
      });

      await sceneTester.sendUpdate(update);

      expect(inngestSpy).toHaveBeenCalledWith({
        name: 'carousel/generate.requested',
        data: {
          userId: '67890',
          chatId: '67890',
          messageId: expect.any(String),
          topic: 'TDD –ø—Ä–∞–∫—Ç–∏–∫–∏',
          slidesCount: 5,
          timestamp: expect.any(String),
        },
      });
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏', async () => {
      // –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
      const mockSlides: CarouselSlide[] = [
        {
          type: 'title',
          title: 'üéØ TDD - –û—Å–Ω–æ–≤—ã',
          content: 'Test-Driven Development - –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
          order: 1,
        },
        {
          type: 'principle',
          title: 'üíé –ö—Ä–∞—Å–Ω—ã–π-–ó–µ–ª–µ–Ω—ã–π-–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥',
          content: '–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª TDD —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
          order: 2,
        },
      ];

      sceneTester.mockInngestResponse('carousel/generate.requested', {
        success: true,
        slides: mockSlides,
        sentToUser: true,
      });

      const update = mockTelegramUpdate({
        message: {
          text: '/carousel TDD',
          from: { id: 11111, first_name: 'TDD Master' },
          chat: { id: 11111, type: 'private' },
        },
      });

      const result = await sceneTester.sendUpdate(update);

      expect(result.success).toBe(true);

      // –û–∂–∏–¥–∞–µ–º –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const initialResponse = result.responses.find((r: any) =>
        r.text?.includes('üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é Instagram –∫–∞—Ä—É—Å–µ–ª—å')
      );
      expect(initialResponse).toBeDefined();
    });
  });

  describe('üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–∞—Ä—É—Å–µ–ª—å –ø—Ä–∏ fallback', async () => {
      // –ú–æ–∫–∞–µ–º —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è
      sceneTester.mockInngestResponse('carousel/generate.requested', {
        success: true,
        sentImages: 0,
        sentSlides: 5,
        sentToUser: true,
      });

      const update = mockTelegramUpdate({
        message: {
          text: '/carousel "Fallback —Ç–µ—Å—Ç"',
          from: { id: 22222, first_name: 'Fallback User' },
          chat: { id: 22222, type: 'private' },
        },
      });

      await sceneTester.sendUpdate(update);

      // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫—Ä–∞—Å–∏–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await sceneTester.waitForInngestCompletion();

      const textMessage = await sceneTester.waitForResponse((response: any) =>
        response.text?.includes('üé® *–í–∞—à–∞ Instagram –∫–∞—Ä—É—Å–µ–ª—å –≥–æ—Ç–æ–≤–∞!*')
      );

      expect(textMessage).toBeDefined();
      expect(textMessage.text).toContain('5 —Å–ª–∞–π–¥–æ–≤ –ø–æ —Ç–µ–º–µ: Fallback —Ç–µ—Å—Ç');
      expect(textMessage.text).toContain(
        '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ'
      );
      expect(textMessage.text).toContain(
        'üöÄ *–ì–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Instagram!*'
      );
    });

    it.skip('–¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', async () => {
      // –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const mockImages = [
        Buffer.from('image-1'),
        Buffer.from('image-2'),
        Buffer.from('image-3'),
      ];

      sceneTester.mockInngestResponse('carousel/generate.requested', {
        success: true,
        sentImages: 3,
        sentSlides: 3,
        images: mockImages,
        sentToUser: true,
      });

      const update = mockTelegramUpdate({
        message: {
          text: '/carousel "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ—Å—Ç" 3',
          from: { id: 33333, first_name: 'Image User' },
          chat: { id: 33333, type: 'private' },
        },
      });

      await sceneTester.sendUpdate(update);
      await sceneTester.waitForInngestCompletion();

      // –û–∂–∏–¥–∞–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É (–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
      // –ü–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
      const responses = await sceneTester.getAllResponses();
      expect(responses.length).toBeGreaterThan(0);
    });
  });

  describe('üö® –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏', async () => {
      sceneTester.mockInngestError(
        'carousel/generate.requested',
        new Error('Generation failed')
      );

      const update = mockTelegramUpdate({
        message: {
          text: '/carousel "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç"',
          from: { id: 44444, first_name: 'Error User' },
          chat: { id: 44444, type: 'private' },
        },
      });

      const result = await sceneTester.sendUpdate(update);

      expect(result.success).toBe(true); // –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è

      // –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const errorResponse = await sceneTester.waitForResponse(
        (response: any) =>
          response.text?.includes('‚ùå') || response.text?.includes('–æ—à–∏–±–∫–∞')
      );

      expect(errorResponse).toBeDefined();
    });

    it('–¥–æ–ª–∂–µ–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã', async () => {
      const update = mockTelegramUpdate({
        message: {
          text: '/carousel "–¢–µ—Å—Ç" 999', // –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ª–∞–π–¥–æ–≤
          from: { id: 55555, first_name: 'Invalid User' },
          chat: { id: 55555, type: 'private' },
        },
      });

      sceneTester.sendUpdate.mockResolvedValue({
        success: true,
        responses: [
          {
            method: 'sendMessage',
            text: '‚ùå –û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 10',
          },
        ],
      });

      const result = await sceneTester.sendUpdate(update);

      expect(result.success).toBe(true);

      const response = result.responses[0];
      expect(response.text).toContain('‚ùå');
      expect(response.text).toMatch(/—Å–ª–∞–π–¥–æ–≤.*–æ—Ç 3 –¥–æ 10/i);
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—É—Å—Ç—É—é —Ç–µ–º—É', async () => {
      const update = mockTelegramUpdate({
        message: {
          text: '/carousel "" 5',
          from: { id: 66666, first_name: 'Empty User' },
          chat: { id: 66666, type: 'private' },
        },
      });

      const result = await sceneTester.sendUpdate(update);

      expect(result.success).toBe(true);

      const response = result.responses[0];
      // –î–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      expect(response.text).toContain('–¢–µ–º–∞: VIBECODING');
    });
  });

  describe('‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –±—ã—Å—Ç—Ä–æ', async () => {
      const startTime = Date.now();

      const update = mockTelegramUpdate({
        message: {
          text: '/carousel "–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç"',
          from: { id: 77777, first_name: 'Speed User' },
          chat: { id: 77777, type: 'private' },
        },
      });

      await sceneTester.sendUpdate(update);

      const endTime = Date.now();
      const duration = endTime - startTime;

      // –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ (< 1 —Å–µ–∫—É–Ω–¥—ã)
      expect(duration).toBeLessThan(1000);
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', async () => {
      const updates = Array.from({ length: 3 }, (_, i) =>
        mockTelegramUpdate({
          message: {
            text: `/carousel "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç ${i + 1}"`,
            from: { id: 88000 + i, first_name: `Parallel User ${i + 1}` },
            chat: { id: 88000 + i, type: 'private' },
          },
        })
      );

      const startTime = Date.now();
      const results = await Promise.all(
        updates.map(update => sceneTester.sendUpdate(update))
      );
      const endTime = Date.now();

      // –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º–∏
      results.forEach((result: any) => {
        expect(result.success).toBe(true);
      });

      // –û–±—â–µ–µ –≤—Ä–µ–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–∏–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è
      expect(endTime - startTime).toBeLessThan(3000);
    });
  });

  describe('üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', () => {
    it.skip('–¥–æ–ª–∂–µ–Ω –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã', async () => {
      const logSpy = sceneTester.spyOnLogs();

      const update = mockTelegramUpdate({
        message: {
          text: '/carousel "–õ–æ–≥ —Ç–µ—Å—Ç"',
          from: { id: 99999, first_name: 'Log User' },
          chat: { id: 99999, type: 'private' },
        },
      });

      await sceneTester.sendUpdate(update);

      expect(logSpy).toHaveBeenCalledWith(
        expect.objectContaining({
          level: 'info',
          message: expect.stringContaining('carousel'),
          userId: '99999',
        })
      );
    });

    it.skip('–¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', async () => {
      const metricsSpy = sceneTester.spyOnMetrics();

      const update = mockTelegramUpdate({
        message: {
          text: '/carousel "–ú–µ—Ç—Ä–∏–∫–∏ —Ç–µ—Å—Ç"',
          from: { id: 10101, first_name: 'Metrics User' },
          chat: { id: 10101, type: 'private' },
        },
      });

      await sceneTester.sendUpdate(update);

      expect(metricsSpy).toHaveBeenCalledWith(
        expect.objectContaining({
          command: 'carousel',
          duration: expect.any(Number),
          success: true,
        })
      );
    });
  });
});
