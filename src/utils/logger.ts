/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—à–∏–±–æ–∫
 *
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏,
 * —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
 */

import { LogLevel, LogType, LogEntry } from '../types/index';

/**
 * üïâÔ∏è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
class Logger {
  private logs: LogEntry[] = [];
  private maxLogs = 1000;

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private log(level: LogLevel | string, message: string, extra?: any): void {
    const entry: LogEntry = {
      timestamp: new Date().toISOString(),
      level,
      message,
      type: extra?.type || LogType.SYSTEM,
      userId: extra?.userId,
      username: extra?.username,
      error: extra?.error,
      data: extra?.data,
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –ª–æ–≥–æ–≤
    this.logs.push(entry);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞
    if (this.logs.length > this.maxLogs) {
      this.logs = this.logs.slice(-this.maxLogs);
    }

    // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log(
      `[${entry.timestamp}] ${level.toUpperCase()}: ${message}`,
      extra?.data || ''
    );
  }

  info(message: string, extra?: any): void {
    this.log(LogLevel.INFO, message, extra);
  }

  warn(message: string, extra?: any): void {
    this.log(LogLevel.WARN, message, extra);
  }

  error(message: string, extra?: any): void {
    this.log(LogLevel.ERROR, message, extra);
  }

  debug(message: string, extra?: any): void {
    this.log(LogLevel.DEBUG, message, extra);
  }

  fatal(message: string, extra?: any): void {
    this.log(LogLevel.ERROR, `FATAL: ${message}`, extra);
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userAction(message: string, extra?: any): void {
    this.log(LogLevel.INFO, message, { ...extra, type: LogType.USER_ACTION });
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –±–æ—Ç–∞
  botAction(message: string, extra?: any): void {
    this.log(LogLevel.INFO, message, { ...extra, type: LogType.SYSTEM });
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  configure(_options: any): void {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏
   */
  getLogs(): LogEntry[] {
    return [...this.logs];
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
   */
  clearLogs(): void {
    this.logs = [];
  }
}

export const logger = new Logger();

// –†–µ—ç–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export { LogLevel, LogType };
export type { LogEntry };
