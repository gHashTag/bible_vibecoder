import nodeHtmlToImage from 'node-html-to-image';
import path from 'path';
import { CarouselSlide, CanvasConfig, ColorTemplate } from '../types/index';
import { logger, LogType } from '../utils/logger';
import { VibeCodingContent, VibeCodingCarouselCard } from '../types';

export type ColorTemplate = 'galaxy' | 'spiritual' | 'modern' | 'light';

/**
 * üé® –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ç–µ–º–ø–ª–µ–π—Ç–æ–≤
 */
interface TemplateDesign {
  name: string;
  emoji: string;
  background: string;
  accent: string;
  cardBackground: string;
  backgrounds: string[];
}

/**
 * üßò‚Äç‚ôÇÔ∏è –ö–∞—Å—Ç–æ–º–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è VibeCoding
 */
interface CustomVisualStyle {
  background: string;
  cardStyle: string;
  textColor: string;
  animation?: string;
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–• –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ HTML/CSS.
 * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à—Ä–∏—Ñ—Ç–æ–≤, —ç–º–æ–¥–∑–∏ –∏ –≤–µ—Ä—Å—Ç–∫–∏.
 */
export class InstagramCanvasService {
  private readonly defaultConfig: CanvasConfig = {
    width: 1080,
    height: 1080,
    quality: 0.9,
    format: 'png',
  };

  private readonly outputDir = path.resolve('./carousel-output');

  /**
   * üé® –ü–æ–ª—É—á–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–¥–µ–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç–æ–≤–æ–π —Ç–µ–º–ø–ª–µ–π—Ç
   */
  public static getColorTemplates(): Partial<
    Record<ColorTemplate, TemplateDesign>
  > {
    return {
      // üåå –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –ò–î–ï–ê–õ–¨–ù–´–ô –¢–ï–ú–ü–õ–ï–ô–¢
      [ColorTemplate.GALAXY_SPIRAL_BLUR]: {
        name: 'üåå Galaxy Spiral Blur',
        emoji: 'üåå',
        background: 'bg-image-galaxy-spiral',
        accent: 'rgba(255, 255, 255, 0.3)',
        cardBackground: 'rgba(0, 0, 0, 0.4)',
        backgrounds: [],
      },
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-—à–∞–±–ª–æ–Ω –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–ª–∞–π–¥–∞.
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Google Fonts –¥–ª—è —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —ç–º–æ–¥–∑–∏.
   */
  private generateHtmlTemplate(
    slide: CarouselSlide,
    totalSlides: number,
    colorTemplate: ColorTemplate = ColorTemplate.GALAXY_SPIRAL_BLUR,
    customStyle?: CustomVisualStyle
  ): string {
    // üßò‚Äç‚ôÇÔ∏è –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∏–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (customStyle) {
      return this.generateCustomStyleTemplate(slide, totalSlides, customStyle);
    }

    const templates = InstagramCanvasService.getColorTemplates();
    const design = templates[colorTemplate];

    if (!design) {
      throw new Error(`Template for color ${colorTemplate} not found.`);
    }

    // üé® –¶–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Galaxy Spiral Blur
    const textColor = '#ffffff'; // –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –ø–æ–≤–µ—Ä—Ö blur –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const textLight = 'rgba(255, 255, 255, 0.95)';

    // üåå Galaxy Spiral Blur - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–º–ø–ª–µ–π—Ç
    const isBlurTemplate = colorTemplate === ColorTemplate.GALAXY_SPIRAL_BLUR;

    // üåå –°—Ç–∏–ª–∏ –¥–ª—è Galaxy Spiral Blur —Å —Ñ–æ–Ω–æ–≤—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    const glassmorphismStyles = `
      /* üåå GALAXY SPIRAL BLUR - —Å—Ç–µ–∫–ª—è–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–≤–µ—Ä—Ö —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */
      background: rgba(255, 255, 255, 0.15);
      backdrop-filter: blur(15px) saturate(150%);
      -webkit-backdrop-filter: blur(15px) saturate(150%);
      border-radius: 25px;
      border: 1px solid rgba(255, 255, 255, 0.3);
        box-shadow: 
        0 10px 20px rgba(0, 0, 0, 0.1),
        0 5px 10px rgba(0, 0, 0, 0.05),
        inset 0 1px 0 rgba(255, 255, 255, 0.3);
      position: relative;
      overflow: hidden;
    `;

    // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Galaxy Spiral Blur

    // üåå –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è body
    let bodyBackground = design.background;
    if (isBlurTemplate) {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏
      const backgroundImages = [
        'u2217837778_A_book_hanging_in_the_air_against_the_backdrop_of_11aa5b66-5b68-422f-b68f-03121eea5b93_0.png',
        'u2217837778_A_book_hanging_in_the_air_against_the_backdrop_of_11aa5b66-5b68-422f-b68f-03121eea5b93_1.png',
        'u2217837778_A_book_hanging_in_the_air_against_the_backdrop_of_11aa5b66-5b68-422f-b68f-03121eea5b93_2.png',
        'u2217837778_A_book_hanging_in_the_air_against_the_backdrop_of_11aa5b66-5b68-422f-b68f-03121eea5b93_3.png',
        'u2217837778_A_book_hanging_in_the_air_against_the_backdrop_of_c_e3dbfd21-c97f-4d45-b3b8-3bf00da39f55.png',
        'u2217837778_A_book_hanging_in_the_air_against_the_backdrop_of_c_bdaf4c83-c9af-457e-aba2-865b825fb4b6.png',
        'u2217837778_A_book_hanging_in_the_air_against_the_backdrop_of_fcb818d8-361d-4c2b-a1d8-8a6c0772c89c_0.png',
        'u2217837778_A_book_hanging_in_the_air_against_the_backdrop_of_fcb818d8-361d-4c2b-a1d8-8a6c0772c89c_1.png',
      ];

      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const randomImage =
        backgroundImages[Math.floor(Math.random() * backgroundImages.length)];
      // üåå –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ base64 –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ Puppeteer
      try {
        const imagePath = path.resolve(
          './assets/bg-bible-vibecoding',
          randomImage
        );
        const imageBuffer = require('fs').readFileSync(imagePath);
        const base64Image = imageBuffer.toString('base64');
        const dataUri = `data:image/png;base64,${base64Image}`;
        bodyBackground = `url('${dataUri}') center/cover no-repeat`;
      } catch (error) {
        // Fallback –∫ –≥—Ä–∞–¥–∏–µ–Ω—Ç—É –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
        bodyBackground = 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)';
      }
    }

    return `
      <!DOCTYPE html>
      <html lang="ru">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Vibecoding Slide</title>
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Golos+Text:wght@400;700&family=Lora:wght@700&family=Noto+Color+Emoji&display=swap" rel="stylesheet">
        <style>
          body, html {
            margin: 0;
            padding: 0;
            width: ${this.defaultConfig.width}px;
            height: ${this.defaultConfig.height}px;
            font-family: 'Golos Text', 'Noto Color Emoji', sans-serif;
            background: ${bodyBackground};
            color: ${textColor};
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            box-sizing: border-box;
            position: relative;
            overflow: hidden;
          }
          
          /* üåå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è Galaxy Spiral Blur */
          body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            pointer-events: none;
            background: 
              radial-gradient(circle at 30% 40%, rgba(255, 255, 255, 0.05) 0%, transparent 50%),
              radial-gradient(circle at 70% 60%, rgba(255, 255, 255, 0.03) 0%, transparent 50%);
            animation: slowFloat 45s ease-in-out infinite;
          }
          
          @keyframes slowFloat {
            0%, 100% { transform: scale(1) rotate(0deg); opacity: 0.5; }
            50% { transform: scale(1.02) rotate(180deg); opacity: 0.3; }
          }
          
          .glass-container {
            width: 800px;
            height: 800px; /* üî≤ –ö–í–ê–î–†–ê–¢–ù–´–ô —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç */
            max-width: 800px;
            max-height: 800px;
            aspect-ratio: 1/1; /* ‚≠ê –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç */
            padding: 60px 50px;
            margin-bottom: 80px; /* üîß –û—Ç—Å—Ç—É–ø –¥–ª—è footer */
            box-sizing: border-box;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            position: relative;
            word-wrap: break-word;
            overflow-wrap: break-word;
            
            ${glassmorphismStyles}
          }
          
          /* üåå –ü—Ä–æ—Å—Ç—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è Galaxy Spiral Blur */
          
          
          .emoji {
            font-size: 120px;
            margin-bottom: 30px;
            line-height: 1;
            filter: drop-shadow(0 6px 12px rgba(0, 0, 0, 0.15));
            animation: gentle-bounce 3s ease-in-out infinite;
            position: relative;
            z-index: 3;
          }
          
          @keyframes gentle-bounce {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-5px); }
          }
          
          h1 {
            font-family: 'Lora', 'Noto Color Emoji', serif;
            font-size: 72px;
            font-weight: 700;
            margin: 0 0 30px 0;
            line-height: 1.3;
            color: ${textColor};
            text-shadow: 
              0 2px 4px rgba(0, 0, 0, 0.3), 0 4px 8px rgba(0, 0, 0, 0.15);
            position: relative;
            z-index: 3;
            word-wrap: break-word;
            overflow-wrap: break-word;
            hyphens: auto;
            text-align: center;
            max-width: 100%;
          }
          
          p {
            font-family: 'Golos Text', 'Noto Color Emoji', sans-serif;
            font-size: 42px;
            line-height: 1.6;
            margin: 0;
            color: ${textColor};
            text-shadow: 
              0 1px 2px rgba(0, 0, 0, 0.4), 0 2px 4px rgba(0, 0, 0, 0.2);
            position: relative;
            z-index: 3;
            word-wrap: break-word;
            overflow-wrap: break-word;
            hyphens: auto;
            text-align: center;
            max-width: 100%;
            white-space: pre-wrap;
          }
          
          .subtitle {
            font-size: 36px;
            margin-top: 20px;
            color: ${textLight};
            text-shadow: 
              0 1px 2px rgba(0, 0, 0, 0.4), 0 2px 4px rgba(0, 0, 0, 0.2);
            position: relative;
            z-index: 3;
          }
          
          .footer {
            position: absolute;
            bottom: 40px;
            left: 50%;
            transform: translateX(-50%);
            width: 720px; /* üîπ –ó–æ–ª–æ—Ç–∞—è —Å–µ—Ä–µ–¥–∏–Ω–∞ - –º–µ–Ω—å—à–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –Ω–∞ 80px */
            max-width: 720px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 28px;
            color: rgba(255, 255, 255, 0.95);
            
            /* üîπ Footer glassmorphism - Galaxy Spiral Blur —Å—Ç–∏–ª—å */
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(15px) saturate(150%);
            -webkit-backdrop-filter: blur(15px) saturate(150%);
            padding: 18px 35px;
            border-radius: 25px;
            border: 1px solid rgba(255, 255, 255, 0.3);
            box-shadow: 
              0 10px 20px rgba(0, 0, 0, 0.1),
              0 5px 10px rgba(0, 0, 0, 0.05),
              inset 0 1px 0 rgba(255, 255, 255, 0.3);
          }
          
          /* üåä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è VibeCoding —Å—Ç–∏–ª–µ–π */
          @keyframes waveMotion {
            0%, 100% { 
              transform: translateY(0px) scale(1);
              border-radius: 35px;
            }
            25% { 
              transform: translateY(-3px) scale(1.01);
              border-radius: 40px 30px 35px 45px;
            }
            50% { 
              transform: translateY(-5px) scale(1.02);
              border-radius: 30px 40px 30px 40px;
            }
            75% { 
              transform: translateY(-3px) scale(1.01);
              border-radius: 45px 35px 40px 30px;
            }
          }
          
          @keyframes codeFloat {
            0%, 100% { 
              transform: translateX(0px) translateY(0px);
              opacity: 0.15;
            }
            25% { 
              transform: translateX(-2px) translateY(-1px);
              opacity: 0.12;
            }
            50% { 
              transform: translateX(-1px) translateY(-2px);
              opacity: 0.18;
            }
            75% { 
              transform: translateX(1px) translateY(-1px);
              opacity: 0.14;
            }
          }
        </style>
      </head>
      <body>
        <div class="glass-container">
          <div class="emoji">${this.extractEmoji(slide.title)}</div>
          <h1>${this.removeEmoji(slide.title)}</h1>
          <p>${slide.content.replace(/\n/g, '<br>')}</p>
          ${slide.subtitle ? `<p class="subtitle">${slide.subtitle}</p>` : ''}
        </div>
        <div class="footer">
          <span>@bible_vibecoder_bot</span>
          <span>${slide.order}/${totalSlides}</span>
        </div>
      </body>
      </html>
    `;
  }

  /**
   * üßò‚Äç‚ôÇÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º VibeCoding —Å—Ç–∏–ª–µ–º
   */
  private generateCustomStyleTemplate(
    slide: CarouselSlide,
    totalSlides: number,
    customStyle: CustomVisualStyle
  ): string {
    return `
      <!DOCTYPE html>
      <html lang="ru">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>VibeCoding Slide</title>
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Golos+Text:wght@400;700&family=Lora:wght@700&family=Noto+Color+Emoji&display=swap" rel="stylesheet">
        <style>
          body, html {
            margin: 0;
            padding: 0;
            width: ${this.defaultConfig.width}px;
            height: ${this.defaultConfig.height}px;
            font-family: 'Golos Text', 'Noto Color Emoji', sans-serif;
            background: ${customStyle.background};
            color: ${customStyle.textColor};
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            box-sizing: border-box;
            position: relative;
            overflow: hidden;
          }
          
          .card {
            position: relative;
            width: calc(90% - 80px);
            max-width: 800px;
            padding: 80px 60px;
            ${customStyle.cardStyle}
          }
          
          .emoji {
            font-size: 120px;
            margin-bottom: 40px;
            display: block;
            position: relative;
            z-index: 3;
          }
          
          h1 {
            font-family: 'Lora', serif;
            font-size: 64px;
            font-weight: 700;
            line-height: 1.2;
            margin: 0 0 40px 0;
            color: ${customStyle.textColor};
            position: relative;
            z-index: 3;
          }
          
          p {
            font-size: 42px;
            font-weight: 400;
            line-height: 1.5;
            margin: 0;
            color: ${customStyle.textColor};
            position: relative;
            z-index: 3;
          }
          
          .footer {
            position: absolute;
            bottom: 40px;
            left: 50%;
            transform: translateX(-50%);
            width: calc(90% - 160px);
            max-width: 800px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 28px;
            color: ${customStyle.textColor};
            opacity: 0.8;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 18px 35px;
            border-radius: 25px;
            border: 1px solid rgba(255, 255, 255, 0.2);
          }
          
          ${customStyle.animation || ''}
        </style>
      </head>
      <body>
        <div class="card">
          <div class="emoji">${this.extractEmoji(slide.title)}</div>
          <h1>${this.removeEmoji(slide.title)}</h1>
          <p>${slide.content.replace(/\n/g, '<br>')}</p>
          ${slide.subtitle ? `<p class="subtitle">${slide.subtitle}</p>` : ''}
        </div>
        <div class="footer">
          <span>@bible_vibecoder_bot</span>
          <span>${slide.order}/${totalSlides}</span>
        </div>
      </body>
      </html>
    `;
  }

  public async generateCarouselImages(
    slides: CarouselSlide[],
    config?: Partial<CanvasConfig>,
    colorTemplate: ColorTemplate = ColorTemplate.GALAXY_SPIRAL_BLUR,
    customStyle?: CustomVisualStyle
  ): Promise<Buffer[]> {
    const finalConfig = { ...this.defaultConfig, ...config };
    logger.info('–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ HTML/CSS...', {
      type: LogType.BUSINESS_LOGIC,
      data: { slideCount: slides.length, colorTemplate },
    });

    const imagePromises = slides.map(async (slide, index) => {
      const html = this.generateHtmlTemplate(
        slide,
        slides.length,
        colorTemplate,
        customStyle
      );
      const output = path.join(this.outputDir, `slide-${index + 1}.png`);

      const imageBuffer = await nodeHtmlToImage({
        output,
        html,
        puppeteerArgs: {
          defaultViewport: {
            width: finalConfig.width,
            height: finalConfig.height,
          },
        },
      });

      return imageBuffer as Buffer;
    });

    const buffers = await Promise.all(imagePromises);
    logger.info('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ HTML.', {
      type: LogType.BUSINESS_LOGIC,
      data: { generatedImages: buffers.length, colorTemplate },
    });

    return buffers;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏
   */
  private extractEmoji(text: string): string {
    // –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–µ–≥–µ–∫—Å –¥–ª—è –≤—Å–µ—Ö —ç–º–æ–¥–∑–∏, –≤–∫–ª—é—á–∞—è —Å–æ—Å—Ç–∞–≤–Ω—ã–µ
    const emojiRegex =
      /^[\u{1F300}-\u{1F9FF}][\u{200D}\u{FE0F}]*[\u{1F300}-\u{1F9FF}]*|^[\u{2600}-\u{27BF}][\u{FE0F}]*|^[\u{1F100}-\u{1F1FF}]/u;
    const match = text.match(emojiRegex);
    return match ? match[0] : '‚ú®';
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏
   */
  private removeEmoji(text: string): string {
    // –£–¥–∞–ª—è–µ–º –í–°–ï —ç–º–æ–¥–∑–∏ —Å –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏, –≤–∫–ª—é—á–∞—è —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —Ç–∏–ø–∞ üßò‚Äç‚ôÇÔ∏è
    const emojiRegex =
      /^[\u{1F300}-\u{1F9FF}][\u{200D}\u{FE0F}]*[\u{1F300}-\u{1F9FF}]*|^[\u{2600}-\u{27BF}][\u{FE0F}]*|^[\u{1F100}-\u{1F1FF}]/u;
    return text.replace(emojiRegex, '').trim();
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
   */
  public async generateCarouselImageFiles(
    slides: CarouselSlide[],
    config?: Partial<CanvasConfig>,
    colorTemplate: ColorTemplate = ColorTemplate.GALAXY_SPIRAL_BLUR
  ): Promise<string[]> {
    const finalConfig = { ...this.defaultConfig, ...config };
    logger.info('–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ HTML/CSS...', {
      type: LogType.BUSINESS_LOGIC,
      data: { slideCount: slides.length, colorTemplate },
    });

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const fs = await import('fs/promises');
    await fs.mkdir(this.outputDir, { recursive: true });

    const imagePaths: string[] = [];

    for (let index = 0; index < slides.length; index++) {
      const slide = slides[index];
      const html = this.generateHtmlTemplate(
        slide,
        slides.length,
        colorTemplate,
        undefined
      );
      const output = path.join(this.outputDir, `slide-${index + 1}.png`);

      await nodeHtmlToImage({
        output,
        html,
        puppeteerArgs: {
          defaultViewport: {
            width: finalConfig.width,
            height: finalConfig.height,
          },
        },
      });

      // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω!
      try {
        await fs.access(output);
        const stats = await fs.stat(output);
        if (stats.size === 0) {
          throw new Error(`–§–∞–π–ª ${output} —Å–æ–∑–¥–∞–Ω, –Ω–æ –ø—É—Å—Ç–æ–π!`);
        }
        logger.info(
          `‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω: ${output} (${stats.size} bytes)`,
          {
            type: LogType.BUSINESS_LOGIC,
          }
        );
      } catch (error) {
        logger.error(`‚ùå –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: ${output}`, {
          type: LogType.BUSINESS_LOGIC,
          error: error instanceof Error ? error : new Error(String(error)),
        });
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${output}`);
      }

      imagePaths.push(output);
    }

    logger.info('–§–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ HTML.', {
      type: LogType.BUSINESS_LOGIC,
      data: { generatedFiles: imagePaths.length, colorTemplate },
    });

    return imagePaths;
  }
}

// üè≠ –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const instagramCanvasService = new InstagramCanvasService();
