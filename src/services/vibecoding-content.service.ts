import * as fs from 'fs';
import * as path from 'path';
import { VibeCodingContent, CarouselSlide } from '../types/index';
import { logger } from '../utils/logger';
import { VibeCodingSearchOptions } from '../types';

export enum ContentType {
  TEXT = 'text',
  CAROUSEL = 'carousel',
  VIDEO = 'video',
  AUDIO = 'audio',
}

/**
 * üïâÔ∏è –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º Vibecoding
 */
export class VibeCodingContentService {
  private readonly _vibeCodingPath: string;

  constructor() {
    this._vibeCodingPath = path.join(process.cwd(), 'vibecoding');
  }

  /**
   * üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
   */
  async searchByKeywords(
    keywords: string[],
    options: {
      categories?: string[];
      sectionTypes?: string[];
      limit?: number;
    } = {}
  ): Promise<
    Array<{
      file: string;
      content: string;
      relevanceScore: number;
      category: string;
      sectionType: string;
    }>
  > {
    const results: Array<{
      file: string;
      content: string;
      relevanceScore: number;
      category: string;
      sectionType: string;
    }> = [];
    const allFiles = this.getAllMarkdownFiles();

    for (const file of allFiles) {
      const content = fs.readFileSync(file, 'utf-8');
      const score = this.calculateRelevanceScore(content, keywords);

      if (score > 0) {
        const category = this.extractCategory(file);
        const sectionType = this.extractSectionType(content);

        if (
          (!options.categories || options.categories.includes(category)) &&
          (!options.sectionTypes || options.sectionTypes.includes(sectionType))
        ) {
          results.push({
            file,
            content,
            relevanceScore: score,
            category,
            sectionType,
          });
        }
      }
    }

    return results
      .sort((a, b) => b.relevanceScore - a.relevanceScore)
      .slice(0, options.limit || 10);
  }

  /**
   * üìä –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏
   */
  async analyzeForCarousel(
    topic: string,
    searchResults: any[]
  ): Promise<VibeCodingContent> {
    logger.info('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏', {
      data: { topic },
    });

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    const combinedContent = searchResults
      .map(result => result.content)
      .join('\n\n');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–∞–π–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const slides = this.generateSlidesFromContent(combinedContent, topic);

    return {
      title: `–ö–∞—Ä—É—Å–µ–ª—å: ${topic}`,
      slides,
    };
  }

  /**
   * üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–∞–π–¥–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private generateSlidesFromContent(
    content: string,
    topic: string
  ): CarouselSlide[] {
    const slides: CarouselSlide[] = [];

    // –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Å–ª–∞–π–¥
    slides.push({
      title: topic,
      content: `–ò–∑—É—á–∞–µ–º ${topic} —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É VibeCoding —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏`,
      order: 1,
      type: 'title',
    });

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã
    const principles = this.extractPrinciples(content);
    principles.forEach((principle, index) => {
      slides.push({
        title: `–ü—Ä–∏–Ω—Ü–∏–ø ${index + 1}`,
        content: principle,
        order: slides.length + 1,
        type: 'principle',
      });
    });

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
    const practices = this.extractPractices(content);
    practices.forEach((practice, index) => {
      slides.push({
        title: `–ü—Ä–∞–∫—Ç–∏–∫–∞ ${index + 1}`,
        content: practice,
        order: slides.length + 1,
        type: 'practice',
      });
    });

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–∏—Ç–∞—Ç—ã
    const quotes = this.extractQuotes(content);
    if (quotes.length > 0) {
      slides.push({
        title: '–ú—É–¥—Ä–æ—Å—Ç—å',
        content: quotes[0],
        order: slides.length + 1,
        type: 'quote',
      });
    }

    // –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–∞–π–¥
    slides.push({
      title: '–ó–∞–∫–ª—é—á–µ–Ω–∏–µ',
      content: `–ü—Ä–∏–º–µ–Ω—è–π—Ç–µ —ç—Ç–∏ –∑–Ω–∞–Ω–∏—è –≤ —Å–≤–æ–µ–π –ø—Ä–∞–∫—Ç–∏–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è`,
      order: slides.length + 1,
      type: 'conclusion',
    });

    return slides.slice(0, 8); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 8 —Å–ª–∞–π–¥–æ–≤
  }

  /**
   * üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö markdown —Ñ–∞–π–ª–æ–≤
   */
  private getAllMarkdownFiles(): string[] {
    const files: string[] = [];

    const scanDirectory = (dir: string) => {
      try {
        const items = fs.readdirSync(dir);
        for (const item of items) {
          const fullPath = path.join(dir, item);
          const stat = fs.statSync(fullPath);

          if (stat.isDirectory()) {
            scanDirectory(fullPath);
          } else if (item.endsWith('.md')) {
            files.push(fullPath);
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
      }
    };

    if (fs.existsSync(this._vibeCodingPath)) {
      scanDirectory(this._vibeCodingPath);
    }

    return files;
  }

  /**
   * üéØ –†–∞—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private calculateRelevanceScore(content: string, keywords: string[]): number {
    const lowerContent = content.toLowerCase();
    let score = 0;

    for (const keyword of keywords) {
      const lowerKeyword = keyword.toLowerCase();
      const matches = (lowerContent.match(new RegExp(lowerKeyword, 'g')) || [])
        .length;
      score += matches;
    }

    return score;
  }

  /**
   * üè∑Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞
   */
  private extractCategory(filePath: string): string {
    const pathParts = filePath.split(path.sep);
    if (pathParts.includes('fundamentals')) return 'fundamentals';
    if (pathParts.includes('practices')) return 'practices';
    if (pathParts.includes('tools')) return 'tools';
    if (pathParts.includes('development')) return 'development';
    if (pathParts.includes('analytics')) return 'analytics';
    if (pathParts.includes('archive')) return 'archive';
    if (pathParts.includes('main_book')) return 'main_book';
    if (pathParts.includes('philosophy')) return 'philosophy';
    return 'general';
  }

  /**
   * üìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–µ–∫—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private extractSectionType(content: string): string {
    if (content.includes('# ')) return 'chapter';
    if (content.includes('## ')) return 'section';
    if (content.includes('### ')) return 'subsection';
    if (content.includes('```')) return 'code_example';
    if (content.includes('> ')) return 'quote';
    return 'text';
  }

  /**
   * üß† –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private extractPrinciples(content: string): string[] {
    const principles: string[] = [];
    const lines = content.split('\n');

    for (const line of lines) {
      if (
        line.includes('–ø—Ä–∏–Ω—Ü–∏–ø') ||
        line.includes('–ø—Ä–∞–≤–∏–ª–æ') ||
        line.includes('–∑–∞–∫–æ–Ω')
      ) {
        const cleaned = line.replace(/^[#*->\s]+/, '').trim();
        if (cleaned.length > 10 && cleaned.length < 200) {
          principles.push(cleaned);
        }
      }
    }

    return principles.slice(0, 3);
  }

  /**
   * üõ†Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private extractPractices(content: string): string[] {
    const practices: string[] = [];
    const lines = content.split('\n');

    for (const line of lines) {
      if (
        line.includes('–ø—Ä–∞–∫—Ç–∏–∫–∞') ||
        line.includes('—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ') ||
        line.includes('—Ç–µ—Ö–Ω–∏–∫–∞') ||
        line.includes('–º–µ—Ç–æ–¥')
      ) {
        const cleaned = line.replace(/^[#*->\s]+/, '').trim();
        if (cleaned.length > 10 && cleaned.length < 200) {
          practices.push(cleaned);
        }
      }
    }

    return practices.slice(0, 3);
  }

  /**
   * üí¨ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private extractQuotes(content: string): string[] {
    const quotes: string[] = [];
    const lines = content.split('\n');

    for (const line of lines) {
      if (line.startsWith('> ')) {
        const cleaned = line.replace('> ', '').trim();
        if (cleaned.length > 20 && cleaned.length < 250) {
          quotes.push(cleaned);
        }
      }
    }

    return quotes.slice(0, 1);
  }

  /**
   * üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ç–∏–ø—É
   */
  async generateContent(
    topic: string,
    contentType: ContentType
  ): Promise<VibeCodingContent> {
    const searchResults = await this.searchByKeywords([topic], { limit: 5 });

    if (contentType === ContentType.CAROUSEL) {
      return this.analyzeForCarousel(topic, searchResults);
    }

    if (contentType === ContentType.TEXT) {
      return {
        title: topic,
        slides: [
          {
            title: topic,
            content: this.generateTextContent(searchResults),
            order: 1,
            type: 'text',
          },
        ],
      };
    }

    return {
      title: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${topic}`,
      slides: [
        {
          title: '–û—à–∏–±–∫–∞',
          content: '–≠—Ç–æ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –µ—â–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.',
          order: 1,
          type: 'text',
        },
      ],
    };
  }

  /**
   * üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private generateTextContent(
    searchResults: Array<{
      file: string;
      content: string;
      relevanceScore: number;
      category: string;
    }>
  ): string {
    const combinedContent = searchResults
      .map(result => result.content)
      .join('\n\n');
    const principles = this.extractPrinciples(combinedContent).join('\n- ');
    const practices = this.extractPractices(combinedContent).join('\n- ');

    return `
      –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:\n- ${principles}\n\n
      –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏:\n- ${practices}
    `.trim();
  }
}
