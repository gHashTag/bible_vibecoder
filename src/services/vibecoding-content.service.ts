import { promises as fs } from 'fs';
import path from 'path';
import { VibeCodingContent, CarouselSlide, Llm } from '../types';
import { logger, LogType } from '../utils/logger';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VIBECODING –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
 */
export class VibeCodingContentService {
  private readonly docsPath: string;
  private contentCache: Map<string, VibeCodingContent[]> = new Map();

  constructor(docsPath: string = path.join(process.cwd(), 'vibecoding')) {
    this.docsPath = docsPath;
  }

  /**
   * –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ç–µ–º–µ
   */
  async searchByTopic(topic: string): Promise<VibeCodingContent[]> {
    const cacheKey = topic.toLowerCase();

    if (this.contentCache.has(cacheKey)) {
      return this.contentCache.get(cacheKey)!;
    }

    try {
      const allContent = await this.loadAllContent();
      const relevantContent = this.filterByTopic(allContent, topic);

      this.contentCache.set(cacheKey, relevantContent);
      return relevantContent;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ç–µ–º–µ', {
        error: error instanceof Error ? error : new Error(String(error)),
        type: LogType.BUSINESS_LOGIC,
        data: { topic },
      });
      return [];
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
   */
  private async loadAllContent(): Promise<VibeCodingContent[]> {
    const content: VibeCodingContent[] = [];

    try {
      const categories = await this.getCategories();

      for (const category of categories) {
        const categoryPath = path.join(this.docsPath, category);
        const files = await this.getMarkdownFiles(categoryPath);

        for (const file of files) {
          const filePath = path.join(categoryPath, file);
          const fileContent = await this.parseMarkdownFile(filePath, category);
          if (fileContent) {
            content.push(fileContent);
          }
        }
      }

      // –¢–∞–∫–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω—è
      const rootFiles = await this.getMarkdownFiles(this.docsPath);
      for (const file of rootFiles) {
        const filePath = path.join(this.docsPath, file);
        const fileContent = await this.parseMarkdownFile(filePath, 'root');
        if (fileContent) {
          content.push(fileContent);
        }
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', {
        error: error instanceof Error ? error : new Error(String(error)),
        type: LogType.SYSTEM,
      });
    }

    return content;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–∞–ø–æ–∫)
   */
  private async getCategories(): Promise<string[]> {
    try {
      const items = await fs.readdir(this.docsPath, { withFileTypes: true });
      return items
        .filter(item => item.isDirectory() && !item.name.startsWith('.'))
        .map(item => item.name);
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π', {
        error: error instanceof Error ? error : new Error(String(error)),
        type: LogType.SYSTEM,
      });
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ Markdown —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
   */
  private async getMarkdownFiles(dirPath: string): Promise<string[]> {
    try {
      const items = await fs.readdir(dirPath, { withFileTypes: true });
      return items
        .filter(item => item.isFile() && item.name.endsWith('.md'))
        .map(item => item.name);
    } catch (error) {
      // –ü–∞–ø–∫–∞ –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏–ª–∏ –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π
      return [];
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ Markdown —Ñ–∞–π–ª–∞
   */
  private async parseMarkdownFile(
    filePath: string,
    category: string
  ): Promise<VibeCodingContent | null> {
    try {
      const content = await fs.readFile(filePath, 'utf-8');
      const fileName = path.basename(filePath, '.md');

      return {
        title: this.extractTitle(content, fileName),
        content: this.cleanContent(content),
        filePath,
        category: this.normalizeCategoryName(category),
        concepts: this.extractConcepts(content),
        quotes: this.extractQuotes(content),
      };
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞', {
        error: error instanceof Error ? error : new Error(String(error)),
        type: LogType.SYSTEM,
        data: { filePath },
      });
      return null;
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private extractTitle(content: string, fallbackTitle: string): string {
    // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ H1
    const h1Match = content.match(/^#\s+(.+)$/m);
    if (h1Match) {
      return h1Match[1].trim();
    }

    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (—É–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã)
    return fallbackTitle
      .replace(/[üìöüïâÔ∏èüî•üéØüßòüå±‚ö°üó∫Ô∏èüöÄüìäüåüüìñüìëüé¨üí•]/g, '')
      .replace(/[-_]/g, ' ')
      .trim();
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
   */
  private cleanContent(content: string): string {
    return content
      .replace(/^#+\s+/gm, '') // –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      .replace(/\*\*(.*?)\*\*/g, '$1') // –£–±–∏—Ä–∞–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
      .replace(/\*(.*?)\*/g, '$1') // –£–±–∏—Ä–∞–µ–º –∫—É—Ä—Å–∏–≤
      .replace(/`(.*?)`/g, '$1') // –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–æ–¥
      .replace(/```[\s\S]*?```/g, '') // –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞
      .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1') // –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
      .replace(/\n{3,}/g, '\n\n') // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
      .trim();
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
   */
  private extractConcepts(content: string): string[] {
    const concepts: string[] = [];

    // –ò—â–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ (–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç)
    const boldMatches = content.match(/\*\*(.*?)\*\*/g);
    if (boldMatches) {
      concepts.push(
        ...boldMatches.map(match => match.replace(/\*\*/g, '').trim())
      );
    }

    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∫ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
    const headingMatches = content.match(/^#+\s+(.+)$/gm);
    if (headingMatches) {
      concepts.push(
        ...headingMatches.map(match => match.replace(/^#+\s+/, '').trim())
      );
    }

    return [...new Set(concepts)].filter(
      concept => concept.length > 3 && concept.length < 100
    );
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç –∏ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤
   */
  private extractQuotes(content: string): string[] {
    const quotes: string[] = [];

    // –ò—â–µ–º —Ü–∏—Ç–∞—Ç—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    const quoteMatches = content.match(/"([^"]+)"/g);
    if (quoteMatches) {
      quotes.push(...quoteMatches.map(quote => quote.replace(/"/g, '').trim()));
    }

    // –ò—â–µ–º –±–ª–æ–∫–∏ —Ü–∏—Ç–∞—Ç (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å >)
    const blockQuotes = content.match(/^>\s+(.+)$/gm);
    if (blockQuotes) {
      quotes.push(
        ...blockQuotes.map(quote => quote.replace(/^>\s+/, '').trim())
      );
    }

    // –ò—â–µ–º –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏ –ø—Ä–∞–≤–∏–ª–∞
    const principleMatches = content.match(/^[*-]\s+(.+)$/gm);
    if (principleMatches) {
      quotes.push(
        ...principleMatches
          .map(principle => principle.replace(/^[*-]\s+/, '').trim())
          .filter(principle => principle.length > 20)
      );
    }

    return [...new Set(quotes)].filter(
      quote => quote.length > 10 && quote.length < 300
    );
  }

  /**
   * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ç–µ–º–µ
   */
  private filterByTopic(
    content: VibeCodingContent[],
    topic: string
  ): VibeCodingContent[] {
    const topicLower = topic.toLowerCase();
    const keywords = topicLower.split(/\s+/);

    return content
      .map(item => ({
        ...item,
        relevanceScore: this.calculateRelevance(item, keywords),
      }))
      .filter(item => item.relevanceScore > 0)
      .sort((a, b) => b.relevanceScore - a.relevanceScore)
      .slice(0, 10) // –ë–µ—Ä–µ–º —Ç–æ–ø-10 –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö
      .map(({ relevanceScore, ...item }) => item);
  }

  /**
   * –†–∞—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private calculateRelevance(
    content: VibeCodingContent,
    keywords: string[]
  ): number {
    let score = 0;
    const searchText = `${content.title} ${
      content.content
    } ${content.concepts.join(' ')} ${content.quotes.join(' ')}`.toLowerCase();

    for (const keyword of keywords) {
      // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
      if (content.title.toLowerCase().includes(keyword)) {
        score += 10;
      }

      // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è—Ö
      if (
        content.concepts.some(concept =>
          concept.toLowerCase().includes(keyword)
        )
      ) {
        score += 5;
      }

      // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ
      const matches = (searchText.match(new RegExp(keyword, 'g')) || []).length;
      score += matches * 2;
    }

    return score;
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  private normalizeCategoryName(category: string): string {
    const categoryMap: Record<string, string> = {
      '01-–û–°–ù–û–í–´': '–æ—Å–Ω–æ–≤—ã',
      '02-–ü–†–ê–ö–¢–ò–ö–ò': '–ø—Ä–∞–∫—Ç–∏–∫–∏',
      '03-–ò–ù–°–¢–†–£–ú–ï–ù–¢–´': '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
      '04-–†–ê–ó–í–ò–¢–ò–ï': '—Ä–∞–∑–≤–∏—Ç–∏–µ',
      '05-–ê–ù–ê–õ–ò–¢–ò–ö–ê': '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
      '06-–ê–†–•–ò–í': '–∞—Ä—Ö–∏–≤',
      '07 TELEGRAM –ü–û–°–¢–´': 'telegram',
      root: '–æ—Å–Ω–æ–≤–Ω–æ–µ',
    };

    return categoryMap[category] || category.toLowerCase();
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
   */
  clearCache(): void {
    this.contentCache.clear();
  }

  /**
   * üî• –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–û–õ–ï–ó–ù–´–ô —Ç–µ–∫—Å—Ç –¥–ª—è Instagram –ø–æ—Å—Ç–∞
   * —Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –¥–æ 2200 —Å–∏–º–≤–æ–ª–æ–≤
   */
  public async generateInstagramPost(
    topic: string,
    slides: CarouselSlide[]
  ): Promise<string> {
    const hook = this.generateHook(topic);
    const expandedContent = this.generateExpandedContent(slides);
    const webResearchContent = await this.generateWebResearchContent(topic);
    const practicalTips = this.generatePracticalTips(topic, slides);
    const realWorldExamples = this.generateRealWorldExamples(topic);
    const hashtags = this.generateHashtags(topic);
    const callToAction = this.generateCallToAction();

    // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–æ—Å—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª—å–∑–æ–π
    const fullPost = `${hook}

${expandedContent}

${webResearchContent}

${practicalTips}

${realWorldExamples}

${callToAction}

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

${hashtags}

#vibecoding #–∫–æ–¥–∏–Ω–≥ #–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ #—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ #—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ #IT #productivity #mindset #—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ #–º–æ—Ç–∏–≤–∞—Ü–∏—è`;

    // –û–±—Ä–µ–∑–∞–µ–º –¥–æ 2200 —Å–∏–º–≤–æ–ª–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–ª–∏–º–∏—Ç Instagram)
    return fullPost.length > 2200
      ? this.truncateToLimit(fullPost, 2200)
      : fullPost;
  }

  /**
   * üìú –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Å–ª–∞–π–¥–æ–≤
   */
  private generateExpandedContent(slides: CarouselSlide[]): string {
    return (
      slides
        .map(slide => `üîπ **${slide.title}**\n${slide.content}`)
        .join('\n\n') +
      '\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –∫–∞–∂–¥—ã–π —Å–ª–∞–π–¥. –¶–µ–ª—å: –¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —è—Å–Ω–æ—Å—Ç—å –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏.'
    );
  }

  /**
   * üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ü–µ–ø–ª—è—é—â–∏–π —Ö—É–∫ –¥–ª—è –ø–æ—Å—Ç–∞
   */
  private generateHook(topic: string): string {
    const hooks = [
      `üî• ${topic.toUpperCase()} ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–≤—ã–∫, —ç—Ç–æ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è`,
      `üíé –°–µ–∫—Ä–µ—Ç—ã ${topic}, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω—è—Ç —Ç–≤–æ–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–æ–¥—É`,
      `‚ö° ${topic}: –æ—Ç –Ω–æ–≤–∏—á–∫–∞ –¥–æ –º–∞—Å—Ç–µ—Ä–∞ –∑–∞ 10 —Å–ª–∞–π–¥–æ–≤`,
      `üöÄ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –≤–∑–≥–ª—è–¥ –Ω–∞ ${topic}`,
      `‚ú® ${topic} ‚Äî —Ç–≤–æ–π –ø—É—Ç—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—Å–∫–æ–º—É –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏—é`,
      `üéØ –í—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –æ ${topic} –≤ –æ–¥–Ω–æ–π –∫–∞—Ä—É—Å–µ–ª–∏`,
      `üí° ${topic}: –º—É–¥—Ä–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è–µ—Ç –∫–æ–¥`,
    ];

    return hooks[Math.floor(Math.random() * hooks.length)];
  }

  /**
   * üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏
   */
  private generateSummary(slides: CarouselSlide[]): string {
    const keyPoints = slides
      .slice(1, 4) // –ë–µ—Ä–µ–º 2-4 —Å–ª–∞–π–¥—ã –∫–∞–∫ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
      .map((slide, index) => `${index + 1}Ô∏è‚É£ ${slide.title}`)
      .join('\n');

    return `–í —ç—Ç–æ–π –∫–∞—Ä—É—Å–µ–ª–∏:

${keyPoints}

–ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ! üëÜ –õ–∏—Å—Ç–∞–π –∫–∞—Ä—É—Å–µ–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é`;
  }

  /**
   * üè∑Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏
   */
  private generateHashtags(topic: string): string {
    const topicWords = topic.toLowerCase().split(' ');
    const relevantHashtags: string[] = [];

    // –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Ç–µ–º—ã
    topicWords.forEach(word => {
      if (word.includes('ai') || word.includes('–∏–∏')) {
        relevantHashtags.push(
          '#AI',
          '#–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç',
          '#machinelearning'
        );
      }
      if (word.includes('react') || word.includes('—Ä–µ–∞–∫—Ç')) {
        relevantHashtags.push('#React', '#frontend', '#javascript');
      }
      if (word.includes('python') || word.includes('–ø–∏—Ç–æ–Ω')) {
        relevantHashtags.push('#Python', '#backend', '#datascience');
      }
      if (word.includes('–¥–∏–∑–∞–π–Ω') || word.includes('design')) {
        relevantHashtags.push('#design', '#UX', '#UI');
      }
      if (word.includes('—Ç–µ—Å—Ç') || word.includes('test')) {
        relevantHashtags.push('#testing', '#QA', '#automation');
      }
    });

    // –ë–∞–∑–æ–≤—ã–µ —Ö–µ—à—Ç–µ–≥–∏
    const baseHashtags = [
      '#–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
      '#coding',
      '#developer',
      '#webdev',
      '#softwaredev',
      '#tech',
      '#education',
      '#learning',
      '#–∫–∞—Ä—å–µ—Ä–∞',
      '#—Ä–æ—Å—Ç',
    ];

    return [...new Set([...relevantHashtags, ...baseHashtags])]
      .slice(0, 15) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 15 —Ö–µ—à—Ç–µ–≥–æ–≤
      .join(' ');
  }

  /**
   * üì¢ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
   */
  private generateCallToAction(): string {
    const ctas = [
      `üí¨ –ö–∞–∫–æ–π —Å–ª–∞–π–¥ –∑–∞—Ü–µ–ø–∏–ª –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ? –ü–∏—à–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ö!

üîÑ –°–æ—Ö—Ä–∞–Ω–∏ –ø–æ—Å—Ç, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å
‚ù§Ô∏è –°—Ç–∞–≤—å –ª–∞–π–∫, –µ—Å–ª–∏ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω–æ
üì§ –ü–æ–¥–µ–ª–∏—Å—å —Å —Ç–µ–º–∏, –∫–æ–º—É –Ω—É–∂–Ω–æ —ç—Ç–æ —É–≤–∏–¥–µ—Ç—å`,

      `ü§î –ê —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —ç—Ç–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã –≤ —Å–≤–æ–µ–º –∫–æ–¥–µ?

üíæ –°–æ—Ö—Ä–∞–Ω—è–π –∫–∞—Ä—É—Å–µ–ª—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏
üë• –û—Ç–º–µ—á–∞–π –¥—Ä—É–∑–µ–π-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤
üí≠ –î–µ–ª–∏—Å—å —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö`,

      `‚≠ê –û—Ü–µ–Ω–∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 10 –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ö!

üîñ –°–æ—Ö—Ä–∞–Ω–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
üöÄ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
üí° –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –∏–Ω—Å–∞–π—Ç–∞–º–∏`,
    ];

    return ctas[Math.floor(Math.random() * ctas.length)];
  }

  /**
   * üåê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ–±-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
   */
  private async generateWebResearchContent(topic: string): Promise<string> {
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å MCP –≤–µ–±-–ø–æ–∏—Å–∫–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    return `üîç **–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã ${topic}:**\n\n‚Ä¢ –ù–æ–≤–µ–π—à–∏–µ –ø–æ–¥—Ö–æ–¥—ã –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏\n‚Ä¢ –ß—Ç–æ –æ–±—Å—É–∂–¥–∞–µ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤\n‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫–µ–π—Å—ã –æ—Ç –ª–∏–¥–µ—Ä–æ–≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏\n‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ 2025 –≥–æ–¥–∞`;
  }

  /**
   * üí° –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
   */
  private generatePracticalTips(
    topic: string,
    slides: CarouselSlide[]
  ): string {
    const tips = [
      'üìã –ù–∞—á–∏–Ω–∞–π —Å –º–∞–ª–æ–≥–æ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É—Å–ª–æ–∂–Ω—è–π',
      '‚è∞ –í—ã–¥–µ–ª—è–π –≤—Ä–µ–º—è –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
      'üîÑ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö',
      'üë• –û–±—â–∞–π—Å—è —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤',
      'üìö –ò–∑—É—á–∞–π best practices –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤',
      'üß™ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π —Å –Ω–æ–≤—ã–º–∏ –ø–æ–¥—Ö–æ–¥–∞–º–∏',
    ];

    return `üí° **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ ${topic}:**\n\n${tips.slice(0, 4).join('\n')}`;
  }

  /**
   * üè¢ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–∏—Ä–∞
   */
  private generateRealWorldExamples(topic: string): string {
    return `üè¢ **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö:**\n\n‚Ä¢ –ö–∞–∫ –∫—Ä—É–ø–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç —ç—Ç–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã\n‚Ä¢ –ö–µ–π—Å—ã —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏\n‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–Ω–µ–¥—Ä–µ–Ω–∏—è\n‚Ä¢ –£—Ä–æ–∫–∏, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥–∞–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏`;
  }

  /**
   * ‚úÇÔ∏è –û–±—Ä–µ–∑–∞–µ—Ç –ø–æ—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
   */
  private truncateToLimit(text: string, limit: number): string {
    if (text.length <= limit) {
      return text;
    }

    const truncated = text.substring(0, limit - 50); // –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
    const lastNewline = truncated.lastIndexOf('\n\n');

    return lastNewline > 0
      ? truncated.substring(0, lastNewline) +
          '\n\n... (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö) üëá'
      : truncated + '...';
  }

  private async generateTitles(
    topic: string,
    existingContent: VibeCodingContent[],
    llm: Llm
  ): Promise<string[]> {
    const existingTitles = existingContent.map(item => item.title).join(', ');
    const prompt = `Based on the topic "${topic}" and existing titles [${existingTitles}], generate 5 new, unique, and engaging titles for YouTube shorts or TikTok videos. The titles should be short, catchy, and relevant to the topic. Return only a JSON array of strings.`;
    return [];
  }

  private async generateSlides(
    title: string,
    llm: Llm
  ): Promise<CarouselSlide[]> {
    // ... (rest of the implementation for generating slides)
    return [];
  }
}
