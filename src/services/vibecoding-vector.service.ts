import {
  pg,
  pool,
  PgVectorStore,
  CamelCasePlugin,
} from 'drizzle-orm-pg/vector';
import { OpenAIEmbeddings } from '@langchain/openai';
import { Document } from '@langchain/core/documents';
import * as fs from 'fs';
import * as path from 'path';
import { Tiktoken } from 'js-tiktoken';
import { VibeCodingCarouselCard } from '../types';
import {
  chunks,
  files,
  vibeCoding,
  vibeCodingChapters,
  vibeCodingContent,
} from '../db/schema';
import { db } from '../db';
import { count, eq, sql } from 'drizzle-orm';
import { logger } from '../utils/logger';

// üïâÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
const VECTOR_CONFIG = {
  NEON_CONNECTION:
    process.env.DATABASE_URL ||
    'postgresql://neondb_owner:npg_jwz8kFs0XVTe@ep-shy-truth-a5hat2dz-pooler.us-east-2.aws.neon.tech/neondb?sslmode=require',
  OPENAI_MODEL: 'text-embedding-3-small', // 1536 dimensions
  SEARCH_LIMIT: 10,
  SIMILARITY_THRESHOLD: 0.7,
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const openai = new OpenAIEmbeddings({
  apiKey: process.env.OPENAI_API_KEY || '',
});

const vectorStore = new PgVectorStore(pool, {
  vectorColumnName: 'embedding',
  textIdColumnName: 'id',
});

// üéØ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
export interface VectorSearchResult {
  id: number;
  sourcePath: string;
  sourceFile: string;
  chunkIndex: number;
  title?: string;
  content: string;
  metadata: Record<string, any>;
  similarity: number;
  tokenCount: number;
  createdAt: Date;
}

export interface VibeCodingCarouselCard {
  id: string;
  title: string;
  content: string;
  summary: string;
  category: string;
  tags: string[];
  sourceFile: string;
  relevanceScore: number;
  codeExamples?: string[];
  keyPrinciples?: string[];
}

export interface HybridSearchResult {
  vectorResults: VectorSearchResult[];
  fullTextResults: VectorSearchResult[];
  combinedResults: VectorSearchResult[];
  searchStats: {
    vectorCount: number;
    fullTextCount: number;
    uniqueResults: number;
    queryTime: number;
  };
}

/**
 * üïâÔ∏è –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Vibecoding
 */
export class VibeCodingVectorService {
  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  }

  /**
   * ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
   */
  private async generateQueryEmbedding(query: string): Promise<number[]> {
    try {
      const response = await openai.embeddings.create({
        model: VECTOR_CONFIG.OPENAI_MODEL,
        input: query,
      });

      return response.data[0].embedding;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞');
    }
  }

  /**
   * üéØ –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º
   */
  async vectorSearch(
    query: string,
    options: {
      limit?: number;
      threshold?: number;
      categories?: string[];
      sectionTypes?: string[];
    } = {}
  ): Promise<VectorSearchResult[]> {
    const startTime = Date.now();
    const {
      limit = VECTOR_CONFIG.SEARCH_LIMIT,
      threshold = VECTOR_CONFIG.SIMILARITY_THRESHOLD,
    } = options;

    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const queryEmbedding = await this.generateQueryEmbedding(query);

      const client = await pool.connect();
      try {
        let whereClause = '';
        const queryParams: any[] = [
          `[${queryEmbedding.join(',')}]`,
          threshold,
          limit,
        ];
        let paramIndex = 4;

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if (options.categories && options.categories.length > 0) {
          whereClause += ` AND (metadata->>'file_category' = ANY($${paramIndex}))`;
          queryParams.push(options.categories);
          paramIndex++;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Ç–∏–ø–∞–º —Å–µ–∫—Ü–∏–π
        if (options.sectionTypes && options.sectionTypes.length > 0) {
          whereClause += ` AND (metadata->>'section_type' = ANY($${paramIndex}))`;
          queryParams.push(options.sectionTypes);
          paramIndex++;
        }

        const searchQuery = `
          SELECT 
            id,
            source_path,
            source_file,
            chunk_index,
            title,
            content,
            metadata,
            token_count,
            created_at,
            1 - (embedding <=> $1::vector) as similarity
          FROM vibecoding_vectors.document_chunks
          WHERE 1 - (embedding <=> $1::vector) > $2
            ${whereClause}
          ORDER BY embedding <=> $1::vector
          LIMIT $3
        `;

        const result = await client.query(searchQuery, queryParams);

        const searchResults: VectorSearchResult[] = result.rows.map(row => ({
          id: row.id,
          sourcePath: row.source_path,
          sourceFile: row.source_file,
          chunkIndex: row.chunk_index,
          title: row.title,
          content: row.content,
          metadata: row.metadata,
          similarity: parseFloat(row.similarity),
          tokenCount: row.token_count,
          createdAt: new Date(row.created_at),
        }));

        console.log(
          `üîç –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞ ${Date.now() - startTime}ms: –Ω–∞–π–¥–µ–Ω–æ ${searchResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`
        );
        return searchResults;
      } finally {
        client.release();
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
      throw error;
    }
  }

  /**
   * üìù –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É
   */
  async fullTextSearch(
    query: string,
    options: {
      limit?: number;
      categories?: string[];
    } = {}
  ): Promise<VectorSearchResult[]> {
    const { limit = VECTOR_CONFIG.SEARCH_LIMIT } = options;

    try {
      const client = await pool.connect();
      try {
        let whereClause = '';
        const queryParams: any[] = [query, limit];
        let paramIndex = 3;

        // –§–∏–ª—å—Ç—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if (options.categories && options.categories.length > 0) {
          whereClause += ` AND (metadata->>'file_category' = ANY($${paramIndex}))`;
          queryParams.push(options.categories);
          paramIndex++;
        }

        const searchQuery = `
          SELECT 
            id,
            source_path,
            source_file,
            chunk_index,
            title,
            content,
            metadata,
            token_count,
            created_at,
            ts_rank(to_tsvector('russian', content), plainto_tsquery('russian', $1)) as similarity
          FROM vibecoding_vectors.document_chunks
          WHERE to_tsvector('russian', content) @@ plainto_tsquery('russian', $1)
            ${whereClause}
          ORDER BY ts_rank(to_tsvector('russian', content), plainto_tsquery('russian', $1)) DESC
          LIMIT $2
        `;

        const result = await client.query(searchQuery, queryParams);

        return result.rows.map(row => ({
          id: row.id,
          sourcePath: row.source_path,
          sourceFile: row.source_file,
          chunkIndex: row.chunk_index,
          title: row.title,
          content: row.content,
          metadata: row.metadata,
          similarity: parseFloat(row.similarity),
          tokenCount: row.token_count,
          createdAt: new Date(row.created_at),
        }));
      } finally {
        client.release();
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
      throw error;
    }
  }

  /**
   * üîÑ –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ (–≤–µ–∫—Ç–æ—Ä–Ω—ã–π + –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π)
   */
  async hybridSearch(
    query: string,
    options: {
      limit?: number;
      vectorWeight?: number;
      fullTextWeight?: number;
      categories?: string[];
    } = {}
  ): Promise<HybridSearchResult> {
    const startTime = Date.now();
    const {
      limit = VECTOR_CONFIG.SEARCH_LIMIT,
      vectorWeight = 0.7,
      fullTextWeight = 0.3,
    } = options;

    try {
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
      const [vectorResults, fullTextResults] = await Promise.all([
        this.vectorSearch(query, { ...options, limit: Math.ceil(limit * 1.5) }),
        this.fullTextSearch(query, {
          ...options,
          limit: Math.ceil(limit * 1.5),
        }),
      ]);

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –≤–∑–≤–µ—à–µ–Ω–Ω—ã–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏
      const combinedMap = new Map<number, VectorSearchResult>();

      // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      for (const result of vectorResults) {
        combinedMap.set(result.id, {
          ...result,
          similarity: result.similarity * vectorWeight,
        });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      for (const result of fullTextResults) {
        const existing = combinedMap.get(result.id);
        if (existing) {
          // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫–∏ –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –µ—Å—Ç—å
          existing.similarity += result.similarity * fullTextWeight;
        } else {
          combinedMap.set(result.id, {
            ...result,
            similarity: result.similarity * fullTextWeight,
          });
        }
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Ç–æ–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–µ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      const combinedResults = Array.from(combinedMap.values())
        .sort((a, b) => b.similarity - a.similarity)
        .slice(0, limit);

      const searchStats = {
        vectorCount: vectorResults.length,
        fullTextCount: fullTextResults.length,
        uniqueResults: combinedResults.length,
        queryTime: Date.now() - startTime,
      };

      console.log(
        `üîÑ –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞ ${searchStats.queryTime}ms:`,
        searchStats
      );

      return {
        vectorResults,
        fullTextResults,
        combinedResults,
        searchStats,
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
      throw error;
    }
  }

  /**
   * üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–∞—Ä—É—Å–µ–ª–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
   */
  async generateCarouselCards(
    searchResults: VectorSearchResult[],
    options: {
      maxCards?: number;
      includeCodeExamples?: boolean;
      groupByCategory?: boolean;
    } = {}
  ): Promise<VibeCodingCarouselCard[]> {
    const {
      maxCards = 5,
      includeCodeExamples = true,
      groupByCategory = false,
    } = options;

    try {
      const cards: VibeCodingCarouselCard[] = [];

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      const resultsToProcess = groupByCategory
        ? this.groupResultsByCategory(searchResults, maxCards)
        : searchResults.slice(0, maxCards);

      for (const result of resultsToProcess) {
        const card: VibeCodingCarouselCard = {
          id: `vibecoding-${result.id}`,
          title: result.title || this.extractTitleFromContent(result.content),
          content: this.truncateContent(result.content, 300),
          summary: this.generateSummary(result.content),
          category: result.metadata.file_category || 'general',
          tags: this.extractTags(result.content, result.metadata),
          sourceFile: result.sourceFile,
          relevanceScore: result.similarity,
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
        if (includeCodeExamples) {
          card.codeExamples = this.extractCodeExamples(result.content);
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã
        card.keyPrinciples = this.extractKeyPrinciples(result.content);

        cards.push(card);
      }

      console.log(`üé® –°–æ–∑–¥–∞–Ω–æ ${cards.length} –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–∞—Ä—É—Å–µ–ª–∏`);
      return cards;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫:', error);
      throw error;
    }
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã
   */
  async getVectorDatabaseStats(): Promise<{
    totalChunks: number;
    totalFiles: number;
    categoryCounts: Record<string, number>;
    sectionTypeCounts: Record<string, number>;
    avgTokensPerChunk: number;
  }> {
    try {
      logger.info('–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');

      const client = await pool.connect();
      try {
        const [statsResult, categoryResult, sectionResult] = await Promise.all([
          client.query(`
            SELECT 
              COUNT(*) as total_chunks,
              COUNT(DISTINCT source_path) as total_files,
              AVG(token_count) as avg_tokens
            FROM vibecoding_vectors.document_chunks
          `),
          client.query(`
            SELECT 
              metadata->>'file_category' as category,
              COUNT(*) as count
            FROM vibecoding_vectors.document_chunks
            WHERE metadata->>'file_category' IS NOT NULL
            GROUP BY metadata->>'file_category'
            ORDER BY count DESC
          `),
          client.query(`
            SELECT 
              metadata->>'section_type' as section_type,
              COUNT(*) as count
            FROM vibecoding_vectors.document_chunks
            WHERE metadata->>'section_type' IS NOT NULL
            GROUP BY metadata->>'section_type'
            ORDER BY count DESC
          `),
        ]);

        const stats = statsResult.rows[0];

        const categoryCounts: Record<string, number> = {};
        for (const row of categoryResult.rows) {
          categoryCounts[row.category] = parseInt(row.count);
        }

        const sectionTypeCounts: Record<string, number> = {};
        for (const row of sectionResult.rows) {
          sectionTypeCounts[row.section_type] = parseInt(row.count);
        }

        return {
          totalChunks: parseInt(stats.total_chunks),
          totalFiles: parseInt(stats.total_files),
          categoryCounts,
          sectionTypeCounts,
          avgTokensPerChunk: parseFloat(stats.avg_tokens) || 0,
        };
      } finally {
        client.release();
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', {
        error: error instanceof Error ? error : new Error(String(error)),
      });
      throw error;
    }
  }

  // üõ†Ô∏è –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  private groupResultsByCategory(
    results: VectorSearchResult[],
    maxCards: number
  ): VectorSearchResult[] {
    const categoryGroups = new Map<string, VectorSearchResult[]>();

    for (const result of results) {
      const category = result.metadata.file_category || 'general';
      if (!categoryGroups.has(category)) {
        categoryGroups.set(category, []);
      }
      categoryGroups.get(category)!.push(result);
    }

    const balanced: VectorSearchResult[] = [];
    const maxPerCategory = Math.ceil(maxCards / categoryGroups.size);

    for (const [, categoryResults] of categoryGroups) {
      balanced.push(...categoryResults.slice(0, maxPerCategory));
      if (balanced.length >= maxCards) break;
    }

    return balanced.slice(0, maxCards);
  }

  private extractTitleFromContent(content: string): string {
    const lines = content.split('\n').filter(line => line.trim());
    for (const line of lines) {
      if (line.match(/^#{1,6}\s+/)) {
        return line.replace(/^#{1,6}\s+/, '').slice(0, 100);
      }
    }
    return lines[0]?.slice(0, 50) || '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞';
  }

  private truncateContent(content: string, maxLength: number): string {
    if (content.length <= maxLength) return content;
    return content.slice(0, maxLength).replace(/\s+\S*$/, '') + '...';
  }

  private generateSummary(content: string): string {
    // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∞–±–∑–∞—Ü–∞ –∫–∞–∫ —Å–∞–º–º–∞—Ä–∏
    const paragraphs = content.split('\n\n').filter(p => p.trim());
    const firstParagraph = paragraphs[0] || '';
    return this.truncateContent(firstParagraph.replace(/^#{1,6}\s+/, ''), 150);
  }

  private extractTags(
    content: string,
    metadata: Record<string, any>
  ): string[] {
    const tags: string[] = [];

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    if (metadata.file_category) tags.push(metadata.file_category);
    if (metadata.section_type) tags.push(metadata.section_type);

    // –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    const keywords = [
      'AI',
      '–ò–ò',
      'GPT',
      'Claude',
      'Cursor',
      'Vibecoding',
      'Vibe',
      'JavaScript',
      'TypeScript',
      'React',
      'Node.js',
      'API',
      '–º–µ–¥–∏—Ç–∞—Ü–∏—è',
      '—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è',
      '–ø—Ä–∞–∫—Ç–∏–∫–∞',
      '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç',
    ];

    for (const keyword of keywords) {
      if (content.toLowerCase().includes(keyword.toLowerCase())) {
        tags.push(keyword);
      }
    }

    return [...new Set(tags)].slice(0, 5);
  }

  private extractCodeExamples(content: string): string[] {
    const codeBlocks = content.match(/```[\s\S]*?```/g) || [];
    return codeBlocks
      .map(block =>
        block
          .replace(/```\w*\n?/, '')
          .replace(/```$/, '')
          .trim()
      )
      .filter(code => code.length > 0)
      .slice(0, 3);
  }

  private extractKeyPrinciples(content: string): string[] {
    // –ò—â–µ–º —Å–ø–∏—Å–∫–∏ —Å –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏
    const bulletPoints = content.match(/^[-*+]\s+.+$/gm) || [];
    const numberedPoints = content.match(/^\d+\.\s+.+$/gm) || [];

    const allPoints = [...bulletPoints, ...numberedPoints]
      .map(point => point.replace(/^[-*+\d.]\s+/, '').trim())
      .filter(point => point.length > 10 && point.length < 150);

    return allPoints.slice(0, 5);
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  async getStats(): Promise<{
    totalChunks: number;
    totalFiles: number;
    categoryCounts: Record<string, number>;
    sectionTypeCounts: Record<string, number>;
    avgTokensPerChunk: number;
    topCategories: string[];
    topSectionTypes: string[];
  }> {
    const stats = await this.getVectorDatabaseStats();

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–∏–ø—ã —Å–µ–∫—Ü–∏–π
    const topCategories = Object.entries(stats.categoryCounts)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 5)
      .map(([category]) => category);

    const topSectionTypes = Object.entries(stats.sectionTypeCounts)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 5)
      .map(([sectionType]) => sectionType);

    return {
      ...stats,
      topCategories,
      topSectionTypes,
    };
  }

  /**
   * üîß –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
   */
  async close(): Promise<void> {
    await pool.end();
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
   */
  async searchSimilar(query: string, limit = 5): Promise<any[]> {
    try {
      logger.info('–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', { data: { query, limit } });

      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
      return [];
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ', {
        error: error instanceof Error ? error : new Error(String(error)),
      });
      return [];
    }
  }

  /**
   * –†–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π Vibecoding
   */
  async reindexVibecoding(): Promise<void> {
    try {
      logger.info('–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é Vibecoding');

      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
      await new Promise(resolve => setTimeout(resolve, 1000));

      logger.info('–†–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏', {
        error: error instanceof Error ? error : new Error(String(error)),
      });
      throw error;
    }
  }
}

// üè≠ –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const vibeCodingVectorService = new VibeCodingVectorService();
