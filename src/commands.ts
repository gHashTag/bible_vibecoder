import { Telegraf } from 'telegraf';
import { CustomContext } from './bot';
import { logger, LogType } from './utils/logger';
import { inngest } from './inngest/client';

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ä–µ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ—Ç–∞
 */
function getEnvironmentInfo() {
  const isProduction = process.env.NODE_ENV === 'production';
  const isRailway =
    process.env.RAILWAY_ENVIRONMENT_NAME || process.env.RAILWAY_PROJECT_NAME;
  const port = process.env.PORT || '7100';

  if (isRailway) {
    return {
      env: 'production',
      platform: 'Railway',
      indicator: '‚òÅÔ∏è Railway Cloud',
      details: `Environment: ${
        process.env.RAILWAY_ENVIRONMENT_NAME || 'production'
      }`,
    };
  } else if (isProduction) {
    return {
      env: 'production',
      platform: 'Unknown Cloud',
      indicator: 'üåê Production',
      details: `Port: ${port}`,
    };
  } else {
    return {
      env: 'development',
      platform: 'Local',
      indicator: 'üè† Local Development',
      details: `Port: ${port}, PID: ${process.pid}`,
    };
  }
}

export const setupCommands = (bot: Telegraf<CustomContext>): void => {
  // –ö–æ–º–∞–Ω–¥–∞ /start
  bot.start(async ctx => {
    logger.info('/start command handled by commands.ts', {
      type: LogType.USER_ACTION,
      userId: ctx.from?.id,
    });

    const userFirstName =
      ctx.session?.user?.first_name || ctx.from?.first_name || '–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü';

    const envInfo = getEnvironmentInfo();

    await ctx.reply(
      `üöÄ –ü—Ä–∏–≤–µ—Ç, ${userFirstName}! –Ø - **Bible VibeCoder Bot**\n\n` +
        `üé® –°–æ–∑–¥–∞—é Instagram –∫–∞—Ä—É—Å–µ–ª–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ VIBECODING\n` +
        `‚ú® –ü—Ä–µ–≤—Ä–∞—â–∞—é –º—É–¥—Ä–æ—Å—Ç—å –≤ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.\n\n` +
        `_${envInfo.indicator}_`,
      { parse_mode: 'Markdown' }
    );
  });

  // –ö–æ–º–∞–Ω–¥–∞ /help
  bot.help(async ctx => {
    logger.info('/help command handled by commands.ts', {
      type: LogType.USER_ACTION,
      userId: ctx.from?.id,
    });

    const envInfo = getEnvironmentInfo();

    const helpMessage =
      'ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n' +
      'üöÄ `/start` - –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n' +
      '‚ùì `/help` - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é\n' +
      'üé® `/carousel [—Ç–µ–º–∞]` - –°–æ–∑–¥–∞—Ç—å Instagram –∫–∞—Ä—É—Å–µ–ª—å\n\n' +
      '**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª–∏:**\n' +
      '`/carousel –º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ`\n' +
      '`/carousel —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞`\n' +
      '`/carousel AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã 2025`\n' +
      '`/carousel –ø—Ä–∏–Ω—Ü–∏–ø—ã VIBECODING`\n\n' +
      'üí° *–ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é VIBECODING –∏ —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–µ —Å–ª–∞–π–¥—ã –¥–ª—è Instagram!*\n\n' +
      `_${envInfo.indicator} | ${envInfo.details}_`;

    await ctx.reply(helpMessage, { parse_mode: 'Markdown' });
  });

  // –ö–æ–º–∞–Ω–¥–∞ /carousel –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Instagram –∫–∞—Ä—É—Å–µ–ª–∏
  bot.command('carousel', async ctx => {
    logger.info('/carousel command received', {
      type: LogType.USER_ACTION,
      userId: ctx.from?.id,
      data: { text: ctx.message.text },
    });

    const args = ctx.message.text.split(' ').slice(1);
    const topic = args.join(' ').trim();

    if (!topic) {
      await ctx.reply(
        'üé® **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º –∫–∞—Ä—É—Å–µ–ª–∏**\n\n' +
          '–ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –Ø —Å–æ–∑–¥–∞–º –¥–ª—è –≤–∞—Å 10 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–∞–π–¥–æ–≤.\n\n' +
          '**–ü—Ä–∏–º–µ—Ä:**\n' +
          '`/carousel –ö–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞ –¥–ª—è –∫–æ—Ç–æ–≤`',
        { parse_mode: 'Markdown' }
      );
      return;
    }

    const telegramUserId = ctx.from?.id;
    const messageId = ctx.message.message_id;

    if (!telegramUserId) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return;
    }

    try {
      logger.info('–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –≤ Inngest', {
        type: LogType.BUSINESS_LOGIC,
        data: {
          topic,
          telegramUserId,
          eventName: 'app/carousel.generate.request',
          inngestBaseUrl:
            process.env.NODE_ENV !== 'production'
              ? `http://localhost:8288`
              : 'production',
        },
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Inngest
      await inngest.send({
        name: 'app/carousel.generate.request',
        data: {
          topic,
          telegramUserId: String(telegramUserId),
          messageId,
        },
      });

      logger.info(
        '‚úÖ –°–æ–±—ã—Ç–∏–µ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—É—Å–µ–ª–∏ –£–°–ü–ï–®–ù–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Inngest',
        {
          type: LogType.USER_ACTION,
          data: {
            topic,
            telegramUserId,
          },
        }
      );

      // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –Ω–æ –æ—Å–Ω–æ–≤–Ω—É—é —Ä–∞–±–æ—Ç—É –¥–µ–ª–∞–µ—Ç Inngest
      // await ctx.reply("üöÄ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –ù–∞—á–∏–Ω–∞—é –º–∞–≥–∏—é...", { reply_to_message_id: messageId });
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è –≤ Inngest', {
        type: LogType.BUSINESS_LOGIC,
        error: error instanceof Error ? error : new Error(String(error)),
        data: { topic, telegramUserId },
      });

      await ctx.reply(
        '‚ùå **–û—à–∏–±–∫–∞!** –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—É—Å–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        { parse_mode: 'Markdown', reply_parameters: { message_id: messageId } }
      );
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('text', async ctx => {
    logger.info('Text message received', {
      type: LogType.USER_ACTION,
      userId: ctx.from?.id,
      data: { text: ctx.message.text },
    });

    const envInfo = getEnvironmentInfo();

    await ctx.reply(
      `üëÇ –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ: _"${ctx.message.text}"_\n\n` +
        `üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:\n` +
        `‚Ä¢ /help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n` +
        `‚Ä¢ /carousel [—Ç–µ–º–∞] - —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—É—Å–µ–ª—å\n\n` +
        `_${envInfo.indicator}_`,
      { parse_mode: 'Markdown' }
    );
  });

  const envInfo = getEnvironmentInfo();
  logger.info(
    `‚úÖ Commands successfully registered: /start, /help, /carousel, text handler | ${envInfo.platform}`,
    {
      type: LogType.SYSTEM,
      data: { environment: envInfo },
    }
  );
};
