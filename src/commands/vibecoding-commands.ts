import {
  vibeCodingVectorService,
  VibeCodingCarouselCard,
} from '../services/vibecoding-vector.service';
import {
  instagramCanvasService,
  ColorTemplate,
} from '../services/instagram-canvas.service';
import { logger, LogType } from '../utils/logger';
import type { CarouselSlide } from '../types';
import { vibeCodingBroadcast } from '../inngest/functions/vibecoding-broadcast';
import { BotContext } from '../types';
import { handleSendCarousel } from '../utils/button-handler';
import { VibeCodingVectorService } from '../services/vibecoding-vector.service';

// üïâÔ∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –∫–æ–º–∞–Ω–¥
interface VibeCodingSearchOptions {
  query: string;
  searchType?: 'vector' | 'fulltext' | 'hybrid';
  categories?: string[];
  sectionTypes?: string[];
  limit?: number;
  generateCarousel?: boolean;
  carouselOptions?: {
    maxCards?: number;
    includeCodeExamples?: boolean;
    groupByCategory?: boolean;
    style?: 'minimalist' | 'vibrant' | 'dark' | 'gradient';
  };
}

interface VibeCodingStatsResult {
  totalChunks: number;
  totalFiles: number;
  categoryCounts: Record<string, number>;
  sectionTypeCounts: Record<string, number>;
  avgTokensPerChunk: number;
  topCategories: string[];
  topSectionTypes: string[];
}

interface VibeCodingCommandResult {
  success: boolean;
  message?: string;
  error?: string;
  stats?: any;
}

/**
 * üîç –ü–æ–∏—Å–∫ –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ Vibecoding —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–∞—Ä—É—Å–µ–ª–∏
 */
export async function searchVibecoding(options: VibeCodingSearchOptions) {
  try {
    console.log(`üïâÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –≤ –ë–∏–±–ª–∏–∏ Vibecoding: "${options.query}"`);
    console.log(
      `üìä –¢–∏–ø –ø–æ–∏—Å–∫–∞: ${options.searchType || 'hybrid'}, –ª–∏–º–∏—Ç: ${options.limit || 10}`
    );

    const startTime = Date.now();
    let searchResults;
    let searchStats;

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    switch (options.searchType) {
      case 'vector':
        searchResults = await vibeCodingVectorService.vectorSearch(
          options.query,
          {
            limit: options.limit,
            categories: options.categories,
            sectionTypes: options.sectionTypes,
          }
        );
        break;

      case 'fulltext':
        searchResults = await vibeCodingVectorService.fullTextSearch(
          options.query,
          {
            limit: options.limit,
            categories: options.categories,
          }
        );
        break;

      case 'hybrid':
      default:
        const hybridResult = await vibeCodingVectorService.hybridSearch(
          options.query,
          {
            limit: options.limit,
            categories: options.categories,
          }
        );
        searchResults = hybridResult.combinedResults;
        searchStats = hybridResult.searchStats;
        break;
    }

    console.log(
      `‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${Date.now() - startTime}ms. –ù–∞–π–¥–µ–Ω–æ ${searchResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`
    );

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—É—Å–µ–ª—å –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    let carouselCards: VibeCodingCarouselCard[] | undefined;
    let carouselImages: string[] | undefined;

    if (options.generateCarousel && searchResults.length > 0) {
      console.log('üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—É—Å–µ–ª—å –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞...');

      carouselCards = await vibeCodingVectorService.generateCarouselCards(
        searchResults,
        options.carouselOptions
      );

      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–æ—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
      if (carouselCards.length > 0) {
        console.log('üñºÔ∏è –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª–∏...');

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CarouselSlide[]
        const slides: CarouselSlide[] = carouselCards.map((card, index) => ({
          order: index + 1,
          type:
            index === 0
              ? 'title'
              : index === carouselCards!.length - 1
                ? 'summary'
                : 'practice',
          title: `${getCategoryEmoji(card.category)} ${card.title}`,
          content: card.summary,
          subtitle: card.codeExamples?.[0]
            ? `üíª ${card.codeExamples[0].substring(0, 100)}...`
            : undefined,
        }));

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ColorTemplate - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ Galaxy Spiral Blur
        const colorTemplate = ColorTemplate.GALAXY_SPIRAL_BLUR;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        const imageBuffers =
          await instagramCanvasService.generateCarouselImages(
            slides,
            undefined,
            colorTemplate
          );

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        carouselImages = imageBuffers.map(
          buffer => `data:image/png;base64,${buffer.toString('base64')}`
        );

        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${carouselImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—É—Å–µ–ª–∏`);
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result = {
      success: true,
      query: options.query,
      searchType: options.searchType || 'hybrid',
      results: searchResults.map(r => ({
        id: r.id,
        title: r.title,
        content:
          r.content.substring(0, 300) + (r.content.length > 300 ? '...' : ''),
        category: r.metadata.file_category,
        sectionType: r.metadata.section_type,
        sourceFile: r.sourceFile,
        similarity: Math.round(r.similarity * 100) / 100,
        tokenCount: r.tokenCount,
      })),
      stats: searchStats,
      carouselCards,
      carouselImages,
      totalTime: Date.now() - startTime,
    };

    console.log('üéâ –ü–æ–∏—Å–∫ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    return result;
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ Vibecoding:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      query: options.query,
    };
  }
}

/**
 * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã Vibecoding
 */
export async function getVibeCodingStats(): Promise<VibeCodingStatsResult> {
  try {
    console.log('üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã Vibecoding...');

    const stats = await vibeCodingVectorService.getVectorDatabaseStats();

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–∏–ø—ã —Å–µ–∫—Ü–∏–π –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    const topCategories = Object.entries(stats.categoryCounts)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 10)
      .map(([category]) => category);

    const topSectionTypes = Object.entries(stats.sectionTypeCounts)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 10)
      .map(([sectionType]) => sectionType);

    const result: VibeCodingStatsResult = {
      ...stats,
      topCategories,
      topSectionTypes,
    };

    console.log(
      `‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: ${stats.totalChunks} —á–∞–Ω–∫–æ–≤ –∏–∑ ${stats.totalFiles} —Ñ–∞–π–ª–æ–≤`
    );
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    throw error;
  }
}

/**
 * üé® –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—É—Å–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É (–±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞)
 */
export async function generateVibeCodingCarousel(
  query: string,
  options: {
    maxCards?: number;
    style?: 'minimalist' | 'vibrant' | 'dark' | 'gradient';
    categories?: string[];
    includeCodeExamples?: boolean;
  } = {}
) {
  try {
    console.log(
      `üé® –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—É—Å–µ–ª–∏ Vibecoding –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: "${query}"`
    );

    const { maxCards = 5, style = 'vibrant' } = options;

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫
    const hybridResult = await vibeCodingVectorService.hybridSearch(query, {
      limit: Math.ceil(maxCards * 1.5), // –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–±–æ—Ä–∞
      categories: options.categories,
    });

    if (hybridResult.combinedResults.length === 0) {
      return {
        success: false,
        message: '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–∏–±–ª–∏–∏ Vibecoding',
        query,
      };
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
    const carouselCards = await vibeCodingVectorService.generateCarouselCards(
      hybridResult.combinedResults,
      {
        maxCards,
        includeCodeExamples: options.includeCodeExamples ?? true,
        groupByCategory: true,
      }
    );

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º VibeCoding –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ CarouselSlide[]
    const slides: CarouselSlide[] = carouselCards.map((card, index) => ({
      order: index + 1,
      type:
        index === 0
          ? 'title'
          : index === carouselCards.length - 1
            ? 'summary'
            : 'practice',
      title: `${getCategoryEmoji(card.category)} ${card.title}`,
      content: card.summary,
      subtitle: card.codeExamples?.[0]
        ? `üíª ${card.codeExamples[0].substring(0, 100)}...`
        : undefined,
    }));

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Galaxy Spiral Blur
    const colorTemplate = ColorTemplate.GALAXY_SPIRAL_BLUR;

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é generateCarouselImages
    const imageBuffers = await instagramCanvasService.generateCarouselImages(
      slides,
      undefined, // –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π config
      colorTemplate
    );

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Buffer[] –≤ base64 —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const carouselImages = imageBuffers.map(
      buffer => `data:image/png;base64,${buffer.toString('base64')}`
    );

    console.log(
      `‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${carouselImages.length} –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–æ–∑–¥–∞–Ω–æ`
    );

    return {
      success: true,
      query,
      carouselCards: carouselCards.slice(0, carouselImages.length),
      carouselImages,
      searchStats: hybridResult.searchStats,
      message: `–°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—É—Å–µ–ª—å –∏–∑ ${carouselImages.length} –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —Ç–µ–º–µ "${query}"`,
    };
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      query,
    };
  }
}

/**
 * üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function getCategoryEmoji(category: string): string {
  const categoryEmojis: Record<string, string> = {
    fundamentals: 'üèõÔ∏è',
    practices: 'üßò‚Äç‚ôÇÔ∏è',
    tools: 'üõ†Ô∏è',
    development: 'üöÄ',
    analytics: 'üìä',
    archive: 'üìö',
    main_book: 'üìñ',
    philosophy: 'üïâÔ∏è',
    general: '‚ú®',
  };
  return categoryEmojis[category] || '‚ú®';
}

/**
 * üîÑ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã Vibecoding
 */
export async function reindexVibeCoding(): Promise<VibeCodingCommandResult> {
  try {
    logger.info('üîÑ Starting VibeCoding knowledge base reindexing', {
      type: LogType.BUSINESS_LOGIC,
    });

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const { vectorizeVibecoding } = await import(
      '../../scripts/vectorize-vibecoding'
    );

    await vectorizeVibecoding();

    return {
      success: true,
      message: `‚úÖ VibeCoding knowledge base successfully reindexed.`,
    };
  } catch (error) {
    logger.error('Failed to reindex VibeCoding knowledge base', {
      error: error instanceof Error ? error : new Error(String(error)),
      type: LogType.ERROR,
    });

    return {
      success: false,
      error: `Reindexing failed: ${error instanceof Error ? error.message : String(error)}`,
    };
  }
}

// üéØ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
export const vibeCodingCommands = {
  searchVibecoding,
  getVibeCodingStats,
  generateVibeCodingCarousel,
  reindexVibeCoding,
};

// üïâÔ∏è –¢–∏–ø—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
export type { VibeCodingSearchOptions, VibeCodingStatsResult };

// ======================== TELEGRAM BOT COMMANDS ========================

import { Context } from 'telegraf';
import { inngest } from '../inngest/client';

/**
 * üé® –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VibeCoding –∫–∞—Ä—É—Å–µ–ª–∏
 */
export function setupCarouselCommand(bot: any) {
  bot.command('carousel', async (ctx: Context) => {
    const telegramUserId = ctx.from?.id;
    if (!telegramUserId) {
      return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    const messageText = (ctx.message as any)?.text || '';
    const topic = messageText.replace('/carousel', '').trim();

    if (!topic) {
      return ctx.reply(
        'üïâÔ∏è *VibeCoding Carousel Generator*\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Å —Ç–µ–º–æ–π:\n' +
          '`/carousel <—Ç–µ–º–∞>`\n\n' +
          '–ü—Ä–∏–º–µ—Ä—ã:\n' +
          '‚Ä¢ `/carousel –º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ`\n' +
          '‚Ä¢ `/carousel cursor ai –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã`\n' +
          '‚Ä¢ `/carousel —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –≤ –∫–æ–¥–µ`',
        { parse_mode: 'Markdown' }
      );
    }

    logger.info('/carousel command received', {
      type: LogType.USER_ACTION,
      data: { text: messageText },
    });

    try {
      await inngest.send({
        name: 'app/carousel.generate.request',
        data: {
          topic,
          telegramUserId,
        },
      });

      logger.info(
        '‚úÖ –°–æ–±—ã—Ç–∏–µ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—É—Å–µ–ª–∏ –£–°–ü–ï–®–ù–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Inngest',
        {
          type: LogType.USER_ACTION,
          data: { topic, telegramUserId },
        }
      );

      await ctx.reply(
        `üßò‚Äç‚ôÇÔ∏è *–°–æ–∑–¥–∞—é VibeCoding –∫–∞—Ä—É—Å–µ–ª—å –ø–æ —Ç–µ–º–µ:*\n"${topic}"\n\n` +
          '‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥...\n' +
          'üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–º —Å—Ç–∏–ª–µ\n' +
          'üìö –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –±–∏–±–ª–∏–∏ VibeCoding\n\n' +
          '*–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–¥–µ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç*',
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è –≤ Inngest', {
        type: LogType.ERROR,
        error: error instanceof Error ? error : new Error(String(error)),
      });

      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏.\n' +
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      );
    }
  });
}

/**
 * üîç –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ç–µ–º VibeCoding
 */
export function setupResearchCommand(bot: any) {
  bot.command('research', async (ctx: Context) => {
    const telegramUserId = ctx.from?.id;
    if (!telegramUserId) {
      return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    const messageText = (ctx.message as any)?.text || '';
    const topic = messageText.replace('/research', '').trim();

    if (!topic) {
      return ctx.reply(
        'üïâÔ∏è *VibeCoding Research Agent*\n\n' +
          '–ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–µ–º VibeCoding —Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º –∏ AI-–∞–Ω–∞–ª–∏–∑–æ–º\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Å —Ç–µ–º–æ–π:\n' +
          '`/research <—Ç–µ–º–∞>`\n\n' +
          '–ü—Ä–∏–º–µ—Ä—ã:\n' +
          '‚Ä¢ `/research –º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ`\n' +
          '‚Ä¢ `/research AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã 2025`\n' +
          '‚Ä¢ `/research —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`\n' +
          '‚Ä¢ `/research cursor ai –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏`\n\n' +
          '*Agent –≤—ã–ø–æ–ª–Ω–∏—Ç –≤–µ–±-–ø–æ–∏—Å–∫, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç*',
        { parse_mode: 'Markdown' }
      );
    }

    logger.info('/research command received', {
      type: LogType.USER_ACTION,
      data: { text: messageText },
    });

    try {
      await inngest.send({
        name: 'app/research.request',
        data: {
          topic,
          telegramUserId,
          depth: 'detailed',
        },
      });

      logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –£–°–ü–ï–®–ù–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Inngest', {
        type: LogType.USER_ACTION,
        data: { topic, telegramUserId },
      });

      await ctx.reply(
        `ü§ñ *VibeCoding Research Agent –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω*\n\n` +
          `üìä –ò—Å—Å–ª–µ–¥—É—é —Ç–µ–º—É: "${topic}"\n\n` +
          'üîç –í—ã–ø–æ–ª–Ω—è—é –≤–µ–±-–ø–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...\n' +
          'üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É VibeCoding...\n' +
          'üìù –ì–æ—Ç–æ–≤–ª—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç...\n\n' +
          '‚è≥ *–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ 30-60 —Å–µ–∫—É–Ω–¥*',
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ Inngest', {
        type: LogType.ERROR,
        error: error instanceof Error ? error : new Error(String(error)),
      });

      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.\n' +
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      );
    }
  });
}

/**
 * üí° –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ VibeCoding
 */
export function setupAskCommand(bot: any) {
  bot.command('ask', async (ctx: Context) => {
    const telegramUserId = ctx.from?.id;
    if (!telegramUserId) {
      return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    const messageText = (ctx.message as any)?.text || '';
    const question = messageText.replace('/ask', '').trim();

    if (!question) {
      return ctx.reply(
        'üïâÔ∏è *VibeCoding Wisdom*\n\n' +
          '–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ VibeCoding\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Å –≤–æ–ø—Ä–æ—Å–æ–º:\n' +
          '`/ask <–≤–æ–ø—Ä–æ—Å>`\n\n' +
          '–ü—Ä–∏–º–µ—Ä—ã:\n' +
          '‚Ä¢ `/ask –∫–∞–∫ –Ω–∞—á–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ?`\n' +
          '‚Ä¢ `/ask —á—Ç–æ —Ç–∞–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞?`\n' +
          '‚Ä¢ `/ask –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Cursor AI?`\n' +
          '‚Ä¢ `/ask –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∏–Ω–≥–∞`\n\n' +
          '*–î–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π* `/research <—Ç–µ–º–∞>`',
        { parse_mode: 'Markdown' }
      );
    }

    logger.info('/ask command received', {
      type: LogType.USER_ACTION,
      data: { text: messageText },
    });

    try {
      await inngest.send({
        name: 'app/question.ask',
        data: {
          question,
          telegramUserId,
        },
      });

      logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –£–°–ü–ï–®–ù–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Inngest', {
        type: LogType.USER_ACTION,
        data: { question, telegramUserId },
      });

      await ctx.reply(
        `ü§î *–†–∞–∑–º—ã—à–ª—è—é –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º...*\n\n` +
          `"${question}"\n\n` +
          '‚è≥ *–û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥*',
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è –≤–æ–ø—Ä–æ—Å–∞ –≤ Inngest', {
        type: LogType.ERROR,
        error: error instanceof Error ? error : new Error(String(error)),
      });

      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞.\n' +
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/research` –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.'
      );
    }
  });
}

export const handleSearchCommand = async (ctx: BotContext) => {
  try {
    const result = await searchVibecoding({
      query: ctx.message.text.replace('/search', '').trim(),
      searchType: 'hybrid',
      limit: 10,
      generateCarousel: true,
    });

    if (!result.carouselImages || result.carouselImages.length === 0) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—É—Å–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
      return;
    }

    return handleSendCarousel(ctx, result.carouselImages);
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ Vibecoding', { error });
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
    return;
  }
};

export const handleReindexCommand = async (ctx: BotContext) => {
  try {
    const result = await reindexVibeCoding();

    if (!result.success) {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
      return;
    }

    await ctx.reply(result.message);
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ Vibecoding', { error });
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
    return;
  }
};

export const handleVibecodingSystemTestCommand = async (ctx: BotContext) => {
  try {
    // ... existing code ...
  } catch (error) {
    // ... existing code ...
  }
};

const vectorService = new VibeCodingVectorService();

const reindexVibeCoding = async () => {
  await vectorService.reindexVibecoding();
  return { success: true, message: '–†–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞' };
};

export const handleVibecodingCommand = async (ctx: BotContext) => {
  try {
    // ... existing code ...
  } catch (error) {
    // ... existing code ...
  }
};
