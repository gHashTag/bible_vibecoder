import { Telegraf, Context } from 'telegraf';
import { InstagramCanvasService } from '../services/instagram-canvas.service';
import { VibeCodingContentService } from '../services/vibecoding-content.service';
import { generateVibeCodingCarousel } from './functional-commands';
import {
  VibeCodingCommandResult,
  VibeCodingSearchOptions,
  VibeCodingStatsResult,
  CarouselSlide,
  ColorTemplate,
  LogType,
} from '../types';
import { logger } from '../utils/logger';

const instagramCanvasService = new InstagramCanvasService();
const vibeContentService = new VibeCodingContentService();

/**
 * üîç –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π Vibecoding
 */
async function searchVibecoding(
  options: VibeCodingSearchOptions
): Promise<VibeCodingCommandResult> {
  try {
    logger.info('–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ Vibecoding', {
      data: { query: options.query, searchType: options.searchType },
    });

    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    const results = await vectorService.searchSimilar(
      options.query,
      options.limit || 5
    );

    return {
      success: true,
      message: `–ù–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`,
      data: { results },
      carouselCards: [],
    };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ Vibecoding', {
      error: error instanceof Error ? error : new Error(errorMessage),
    });

    return {
      success: false,
      error: errorMessage,
      data: {},
      carouselCards: [],
    };
  }
}

/**
 * üé® –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—É—Å–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É (–±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞)
 */
export async function generateVibeCodingCarousel(
  query: string,
  options: {
    maxCards?: number;
    style?: 'minimalist' | 'vibrant' | 'dark' | 'gradient';
    categories?: string[];
    includeCodeExamples?: boolean;
  } = {}
) {
  try {
    console.log(
      `üé® –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—É—Å–µ–ª–∏ Vibecoding –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: "${query}"`
    );

    const { maxCards = 5 } = options;

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫
    const hybridResult = await vectorService.hybridSearch(query, {
      limit: Math.ceil(maxCards * 1.5), // –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–±–æ—Ä–∞
      categories: options.categories,
    });

    if (hybridResult.combinedResults.length === 0) {
      return {
        success: false,
        message: '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–∏–±–ª–∏–∏ Vibecoding',
        query,
      };
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
    const carouselCards = await vectorService.generateCarouselCards(
      hybridResult.combinedResults,
      {
        maxCards,
        includeCodeExamples: options.includeCodeExamples ?? true,
        groupByCategory: true,
      }
    );

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º VibeCoding –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ CarouselSlide[]
    const slides: CarouselSlide[] = carouselCards.map(
      (card: any, index: number) => ({
        order: index + 1,
        type:
          index === 0
            ? 'title'
            : index === carouselCards.length - 1
              ? 'summary'
              : 'practice',
        title: `${getCategoryEmoji(card.category)} ${card.title}`,
        content: card.summary,
      })
    );

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Galaxy Spiral Blur
    const colorTemplate = ColorTemplate.GALAXY_SPIRAL_BLUR;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é generateCarouselImages
    const imageBuffers = await instagramCanvasService.generateCarouselImages(
      slides,
      undefined, // –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π config
      colorTemplate
    );

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Buffer[] –≤ base64 —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const carouselImages = imageBuffers.map(
      (buffer: Buffer) => `data:image/png;base64,${buffer.toString('base64')}`
    );

    console.log(
      `‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${carouselImages.length} –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–æ–∑–¥–∞–Ω–æ`
    );

    return {
      success: true,
      query,
      carouselCards: carouselCards.slice(0, carouselImages.length),
      carouselImages,
      searchStats: hybridResult.searchStats,
      message: `–°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—É—Å–µ–ª—å –∏–∑ ${carouselImages.length} –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —Ç–µ–º–µ "${query}"`,
    };
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      query,
    };
  }
}

/**
 * üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function getCategoryEmoji(category: string): string {
  const categoryEmojis: Record<string, string> = {
    fundamentals: 'üèõÔ∏è',
    practices: 'üßò‚Äç‚ôÇÔ∏è',
    tools: 'üõ†Ô∏è',
    development: 'üöÄ',
    analytics: 'üìä',
    archive: 'üìö',
    main_book: 'üìñ',
    philosophy: 'üïâÔ∏è',
    general: '‚ú®',
  };
  return categoryEmojis[category] || '‚ú®';
}

/**
 * üîÑ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã Vibecoding
 */
export async function reindexVibeCoding(): Promise<VibeCodingCommandResult> {
  try {
    logger.info('üîÑ Starting VibeCoding knowledge base reindexing', {
      type: LogType.BUSINESS_LOGIC,
    });

    // –ó–∞–ø—É—Å–∫ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π —Å–∫—Ä–∏–ø—Ç
    const { execSync } = await import('child_process');
    execSync('bun run scripts/vectorize-vibecoding.ts', { stdio: 'inherit' });

    logger.info('‚úÖ VibeCoding reindexing completed successfully');

    return {
      success: true,
      message: 'VibeCoding knowledge base has been successfully reindexed',
    };
  } catch (error) {
    logger.error('‚ùå Error during VibeCoding reindexing', {
      type: LogType.ERROR,
      error: error instanceof Error ? error : new Error(String(error)),
    });

    return {
      success: false,
      error:
        error instanceof Error
          ? error.message
          : 'Unknown error during reindexing',
    };
  }
}

/**
 * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
 */
export type { VibeCodingSearchOptions, VibeCodingStatsResult };

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export async function getVibeCodingStats(): Promise<VibeCodingStatsResult> {
  try {
    logger.info('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ VibeCoding');

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    const stats = await vectorService.getStats();

    logger.info('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ VibeCoding –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

    // –ö–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
    const result: VibeCodingStatsResult = {
      totalChunks: stats.totalChunks || 0,
      totalFiles: stats.totalFiles || 0,
      categoryCounts: stats.categoryCounts || {},
      sectionTypeCounts: stats.sectionTypeCounts || {},
      avgTokensPerChunk: stats.avgTokensPerChunk || 0,
      topCategories: stats.topCategories || [],
      topSectionTypes: stats.topSectionTypes || [],
    };

    return result;
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ VibeCoding', {
      error: error instanceof Error ? error : new Error(String(error)),
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    return {
      totalChunks: 0,
      totalFiles: 0,
      categoryCounts: {},
      sectionTypeCounts: {},
      avgTokensPerChunk: 0,
      topCategories: [],
      topSectionTypes: [],
    };
  }
}

/**
 * ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Vibecoding
 */
export function setupVibeCodingCommands(bot: Telegraf<Context>) {
  // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞
  bot.command('vibecoding_search', async ctx => {
    const args = ctx.message.text.split(' ').slice(1);
    const query = args.join(' ');

    if (!query) {
      await ctx.reply(
        '‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: /vibecoding_search [–∑–∞–ø—Ä–æ—Å]'
      );
      return;
    }

    const result = await searchVibecoding({
      query,
      searchType: 'hybrid',
      limit: 5,
    });

    if (result.success) {
      await ctx.reply(
        `‚úÖ ${result.message}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n${JSON.stringify(result.data, null, 2)}`
      );
    } else {
      await ctx.reply(`‚ùå ${result.error}`);
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
  bot.command('vibecoding_reindex', async ctx => {
    await ctx.reply('üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π Vibecoding...');

    const result = await reindexVibeCoding();

    if (result.success) {
      await ctx.reply(`‚úÖ ${result.message}`);
    } else {
      await ctx.reply(`‚ùå ${result.error}`);
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  bot.command('vibecoding_stats', async ctx => {
    await ctx.reply('üìä –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...');

    try {
      const stats = await getVibeCodingStats();
      const message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ VibeCoding:
- –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: ${stats.totalChunks}
- –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${stats.totalFiles}
- –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: ${stats.avgTokensPerChunk} —Ç–æ–∫–µ–Ω–æ–≤
- –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${stats.topCategories.join(', ')}
- –¢–æ–ø —Ç–∏–ø—ã —Å–µ–∫—Ü–∏–π: ${stats.topSectionTypes.join(', ')}`;

      await ctx.reply(message);
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  });
}

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
export const handleVibecodingSystemTestCommand =
  async (): Promise<VibeCodingCommandResult> => {
    return { success: true, message: 'System test passed' };
  };

export const handleVibecodingCommand =
  async (): Promise<VibeCodingCommandResult> => {
    return { success: true, message: 'Vibecoding command executed' };
  };

export { searchVibecoding };
