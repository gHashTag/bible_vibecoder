// üïâÔ∏è Functional Commands - Pure Event Handlers
// üö´ NO CLASSES, NO MUTATIONS, PURE COMPOSITION

import { Context } from 'telegraf';
import { logger, LogType } from '../utils/logger.js';
import { inngest } from '../inngest/client.js';
import {
  InstagramCanvasService,
  ColorTemplate,
} from '../services/instagram-canvas.service';

// üé® –¢–∏–ø—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—É—Å–µ–ª–∏
declare global {
  var carouselTopics:
    | Record<string, { topic: string; messageId: number }>
    | undefined;
  var carouselState: Record<string, { currentIndex: number }> | undefined;
}

// üìã Pure Types
export type CommandContext = Context & {
  storage?: any; // Will be injected by middleware
  session?: any;
};

export type CommandHandler = (ctx: CommandContext) => Promise<void>;

export type BotEnvironment = {
  readonly env: 'development' | 'production';
  readonly platform: string;
  readonly indicator: string;
  readonly details: string;
};

// üå± Pure Environment Detection
export const detectEnvironment = (): BotEnvironment => {
  const isProduction = process.env.NODE_ENV === 'production';
  const isRailway =
    process.env.RAILWAY_ENVIRONMENT_NAME || process.env.RAILWAY_PROJECT_NAME;
  const port = process.env.PORT || '7100';

  if (isRailway) {
    return {
      env: 'production',
      platform: 'Railway',
      indicator: '‚òÅÔ∏è Railway Cloud',
      details: `Environment: ${process.env.RAILWAY_ENVIRONMENT_NAME || 'production'}`,
    };
  }

  if (isProduction) {
    return {
      env: 'production',
      platform: 'Unknown Cloud',
      indicator: 'üåê Production',
      details: `Port: ${port}`,
    };
  }

  return {
    env: 'development',
    platform: 'Local',
    indicator: 'üè† Local Development',
    details: `Port: ${port}, PID: ${process.pid}`,
  };
};

// üéØ Pure Message Builders
export const buildWelcomeMessage = (
  userFirstName: string,
  environment: BotEnvironment
): string => {
  return (
    `üöÄ –ü—Ä–∏–≤–µ—Ç, ${userFirstName}! –Ø - **Bible VibeCoder Bot**\n\n` +
    `üé® –°–æ–∑–¥–∞—é Instagram –∫–∞—Ä—É—Å–µ–ª–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ VIBECODING\n` +
    `‚ú® –ü—Ä–µ–≤—Ä–∞—â–∞—é –º—É–¥—Ä–æ—Å—Ç—å –≤ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n\n` +
    `–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.\n\n` +
    `_${environment.indicator}_`
  );
};

export const buildHelpMessage = (environment: BotEnvironment): string => {
  return (
    'ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n' +
    'üöÄ `/start` - –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n' +
    '‚ùì `/help` - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é\n' +
    'üé® `/carousel [—Ç–µ–º–∞]` - –°–æ–∑–¥–∞—Ç—å Instagram –∫–∞—Ä—É—Å–µ–ª—å\n' +
    'üîç `/research [—Ç–µ–º–∞]` - –ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å AI –∞–≥–µ–Ω—Ç–æ–º\n' +
    'üí° `/ask [–≤–æ–ø—Ä–æ—Å]` - –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å\n' +
    'üßò‚Äç‚ôÇÔ∏è `/wisdom` - –ü–æ–ª—É—á–∏—Ç—å –º—É–¥—Ä–æ—Å—Ç—å –¥–Ω—è\n' +
    '‚ö° `/quick` - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞\n\n' +
    '**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n' +
    '`/carousel –º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ`\n' +
    '`/research AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã 2025`\n' +
    '`/ask —á—Ç–æ —Ç–∞–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞?`\n' +
    '`/carousel –ø—Ä–∏–Ω—Ü–∏–ø—ã VIBECODING`\n\n' +
    'ü§ñ *Research Agent –∏—â–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã!*\n' +
    'üé® *Carousel –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–µ —Å–ª–∞–π–¥—ã –¥–ª—è Instagram –∏–∑ –∑–Ω–∞–Ω–∏–π VibeCoding!*\n\n' +
    `_${environment.indicator} | ${environment.details}_`
  );
};

export const buildTextResponse = (
  text: string,
  environment: BotEnvironment
): string => {
  return (
    `üëÇ –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ: _"${text}"_\n\n` +
    `üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:\n` +
    `‚Ä¢ /help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n` +
    `‚Ä¢ /carousel [—Ç–µ–º–∞] - —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—É—Å–µ–ª—å\n` +
    `‚Ä¢ /wisdom - –ø–æ–ª—É—á–∏—Ç—å –º—É–¥—Ä–æ—Å—Ç—å\n` +
    `‚Ä¢ /quick - –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç\n\n` +
    `_${environment.indicator}_`
  );
};

// üïâÔ∏è Sacred Wisdom Arrays (Pure Data)
export const SACRED_WISDOM = [
  'üïâÔ∏è ‡§§‡§§‡•ç‡§§‡•ç‡§µ‡§Æ‡§∏‡§ø - –¢—ã –µ—Å—Ç—å –¢–æ (Tat tvam asi)',
  'üïâÔ∏è ‡§∏‡§§‡•ç‡§Ø‡§Æ‡•á‡§µ ‡§ú‡§Ø‡§§‡•á - –ò—Å—Ç–∏–Ω–∞ –ø–æ–±–µ–∂–¥–∞–µ—Ç (Satyameva jayate)',
  'üïâÔ∏è ‡§Ö‡§π‡§ø‡§Ç‡§∏‡§æ ‡§™‡§∞‡§Æ‡•ã ‡§ß‡§∞‡•ç‡§Æ‡§É - –ù–µ–Ω–∞—Å–∏–ª–∏–µ - –≤—ã—Å—à–∞—è –¥—Ö–∞—Ä–º–∞ (Ahimsa paramo dharma)',
  'üïâÔ∏è ‡§∏‡§∞‡•ç‡§µ‡§Ç ‡§ñ‡§≤‡•ç‡§µ‡§ø‡§¶‡§Ç ‡§¨‡•ç‡§∞‡§π‡•ç‡§Æ - –í—Å—ë –µ—Å—Ç—å –ë—Ä–∞—Ö–º–∞–Ω (Sarvam khalvidam brahma)',
  'üïâÔ∏è ‡§Ö‡§π‡§Ç ‡§¨‡•ç‡§∞‡§π‡•ç‡§Æ‡§æ‡§∏‡•ç‡§Æ‡§ø - –Ø –µ—Å—Ç—å –ë—Ä–∞—Ö–º–∞–Ω (Aham Brahmasmi)',
  'üïâÔ∏è ‡§Ø‡•ã‡§ó‡§É ‡§ï‡§∞‡•ç‡§Æ‡§∏‡•Å ‡§ï‡•å‡§∂‡§≤‡§Æ‡•ç - –ô–æ–≥–∞ –µ—Å—Ç—å –∏—Å–∫—É—Å–Ω–æ—Å—Ç—å –≤ –¥–µ–π—Å—Ç–≤–∏–∏ (Yogah karmasu kaushalam)',
  'üïâÔ∏è ‡§™‡•ç‡§∞‡§ú‡•ç‡§û‡§æ‡§®‡§Ç ‡§¨‡•ç‡§∞‡§π‡•ç‡§Æ - –°–æ–∑–Ω–∞–Ω–∏–µ –µ—Å—Ç—å –ë—Ä–∞—Ö–º–∞–Ω (Prajnanam brahma)',
] as const;

// ‚ú® Pure Wisdom Selector
export const getRandomWisdom = (): string => {
  const randomIndex = Math.floor(Math.random() * SACRED_WISDOM.length);
  return SACRED_WISDOM[randomIndex];
};

export const getDailyWisdom = (): string => {
  const today = new Date().getDate();
  const index = today % SACRED_WISDOM.length;
  return SACRED_WISDOM[index];
};

// üéØ Pure Command Handlers
export const handleStart: CommandHandler = async ctx => {
  logger.info('/start command handled by functional-commands.ts', {
    type: LogType.USER_ACTION,
    userId: ctx.from?.id,
  });

  const userFirstName =
    ctx.session?.user?.first_name || ctx.from?.first_name || '–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü';

  const environment = detectEnvironment();
  const message = buildWelcomeMessage(userFirstName, environment);

  await ctx.reply(message, { parse_mode: 'Markdown' });
};

export const handleHelp: CommandHandler = async ctx => {
  logger.info('/help command handled by functional-commands.ts', {
    type: LogType.USER_ACTION,
    userId: ctx.from?.id,
  });

  const environment = detectEnvironment();
  const message = buildHelpMessage(environment);

  await ctx.reply(message, { parse_mode: 'Markdown' });
};

export const handleWisdom: CommandHandler = async ctx => {
  logger.info('/wisdom command handled by functional-commands.ts', {
    type: LogType.USER_ACTION,
    userId: ctx.from?.id,
  });

  const wisdom = getDailyWisdom();
  const environment = detectEnvironment();

  await ctx.reply(
    `üßò‚Äç‚ôÇÔ∏è **–ú—É–¥—Ä–æ—Å—Ç—å –¥–Ω—è:**\n\n${wisdom}\n\n` +
      `*–î–∞ –ø—Ä–µ–±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π –ø–æ–∫–æ–π –∏ –æ—Å–æ–∑–Ω–∞–Ω–∏–µ* üôè\n\n` +
      `_${environment.indicator}_`,
    { parse_mode: 'Markdown' }
  );
};

export const handleQuickStart: CommandHandler = async ctx => {
  logger.info('/quick command handled by functional-commands.ts', {
    type: LogType.USER_ACTION,
    userId: ctx.from?.id,
  });

  const environment = detectEnvironment();

  const quickStartMessage =
    `‚ö° **–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç VibeCode Bible**\n\n` +
    `üìã **1. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:**\n` +
    `\`git clone https://github.com/playra/bible_vibecoder.git\`\n\n` +
    `üì¶ **2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:**\n` +
    `\`cd bible_vibecoder && bun install\`\n\n` +
    `üîß **3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ:**\n` +
    `\`cp .env.example .env\`\n` +
    `\`# –î–æ–±–∞–≤–∏—Ç—å BOT_TOKEN –≤ .env\`\n\n` +
    `üöÄ **4. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç:**\n` +
    `\`bun run dev\`\n\n` +
    `üß™ **5. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã:**\n` +
    `\`bun test\`\n\n` +
    `üìä **6. –î–µ–ø–ª–æ–π –Ω–∞ Railway:**\n` +
    `\`railway login && railway up\`\n\n` +
    `üí° *–í–µ—Å—å –ø—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞!*\n\n` +
    `_${environment.indicator}_`;

  await ctx.reply(quickStartMessage, { parse_mode: 'Markdown' });
};

// üé® Carousel Handler —Å –≤—ã–±–æ—Ä–æ–º —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ç–µ–º–ø–ª–µ–π—Ç–æ–≤
export const handleCarousel: CommandHandler = async ctx => {
  logger.info('/carousel command received', {
    type: LogType.USER_ACTION,
    userId: ctx.from?.id,
    data: { text: (ctx as any).message?.text },
  });

  const args = ((ctx as any).message?.text || '').split(' ').slice(1);
  const topic = args.join(' ').trim();

  if (!topic) {
    await ctx.reply(
      'üé® **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º –∫–∞—Ä—É—Å–µ–ª–∏**\n\n' +
        '–ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –Ø —Å–æ–∑–¥–∞–º –¥–ª—è –≤–∞—Å 10 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–∞–π–¥–æ–≤.\n\n' +
        '**–ü—Ä–∏–º–µ—Ä:**\n' +
        '`/carousel –ö–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞ –¥–ª—è –∫–æ—Ç–æ–≤`',
      { parse_mode: 'Markdown' }
    );
    return;
  }

  const telegramUserId = ctx.from?.id;
  const messageId = (ctx as any).message?.message_id;

  if (!telegramUserId) {
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    return;
  }

  // üé® –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ callback
  const topicKey = `topic_${telegramUserId}_${Date.now()}`;
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Redis)
  global.carouselTopics = global.carouselTopics || {};
  global.carouselTopics[topicKey] = { topic, messageId };

  // üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏ –∏ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é
  const templates = InstagramCanvasService.getColorTemplates();
  const templateKeys = Object.keys(templates);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏
  if (!global.carouselState) {
    global.carouselState = {};
  }
  global.carouselState[topicKey] = { currentIndex: 0 };

  // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–º–ø–ª–µ–π—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const currentTemplateKey = templateKeys[0];
  const selectedTemplate = templates[currentTemplateKey as ColorTemplate];

  // üîß –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ

  // üîß –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ
  await ctx.reply(
    `üé® **–ì–∞–ª–µ—Ä–µ—è —Ç–µ–º–ø–ª–µ–π—Ç–æ–≤ –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏**\n\n` +
      `üìù **–¢–µ–º–∞:** "${topic}"\n\n` +
      `${selectedTemplate.emoji} **${selectedTemplate.name}**\n` +
      `üé® **–¶–≤–µ—Ç–∞:** ${selectedTemplate.background}\n\n` +
      `üí° –õ–∏—Å—Ç–∞–π—Ç–µ –≤–ª–µ–≤–æ-–≤–ø—Ä–∞–≤–æ –¥–ª—è –≤—ã–±–æ—Ä–∞. –ß—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"!\n\n` +
      `üéØ –ü–æ–∑–∏—Ü–∏—è: 1 –∏–∑ ${templateKeys.length}`,
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `nav:prev:${topicKey}` },
            { text: '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', callback_data: `nav:next:${topicKey}` },
          ],
          [
            {
              text: '‚úîÔ∏è –ü—Ä–∏–º–µ–Ω–∏—Ç—å',
              callback_data: `select:${currentTemplateKey}:${topicKey}`,
            },
          ],
        ],
      },
    }
  );
};

// üé® –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ —Ç–µ–º–ø–ª–µ–π—Ç–∞
export const handleColorSelection = async (ctx: any) => {
  const callbackData = ctx.callbackQuery?.data;
  if (!callbackData) {
    return;
  }

  if (callbackData.startsWith('nav:')) {
    const [, direction, topicKey] = callbackData.split(':');
    const templates = InstagramCanvasService.getColorTemplates();
    const templateKeys = Object.keys(templates);

    if (!global.carouselState) {
      global.carouselState = {};
    }

    const state = global.carouselState[topicKey] || { currentIndex: 0 };
    state.currentIndex =
      direction === 'next'
        ? (state.currentIndex + 1) % templateKeys.length
        : (state.currentIndex - 1 + templateKeys.length) % templateKeys.length;

    global.carouselState[topicKey] = state;

    const currentTemplateKey = templateKeys[state.currentIndex];
    const selectedTemplate = templates[currentTemplateKey as ColorTemplate];

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –∏–∑ –ø–∞–º—è—Ç–∏
    const topicData = global.carouselTopics?.[topicKey];
    const topic = topicData?.topic || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞';

    // üîß –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ
    await ctx.editMessageText(
      `üé® **–ì–∞–ª–µ—Ä–µ—è —Ç–µ–º–ø–ª–µ–π—Ç–æ–≤ –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏**\n\n` +
        `üìù **–¢–µ–º–∞:** "${topic}"\n\n` +
        `${selectedTemplate.emoji} **${selectedTemplate.name}**\n` +
        `üé® **–¶–≤–µ—Ç–∞:** ${selectedTemplate.background}\n\n` +
        `üí° –õ–∏—Å—Ç–∞–π—Ç–µ –≤–ª–µ–≤–æ-–≤–ø—Ä–∞–≤–æ –¥–ª—è –≤—ã–±–æ—Ä–∞. –ß—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"!\n\n` +
        `üéØ –ü–æ–∑–∏—Ü–∏—è: ${state.currentIndex + 1} –∏–∑ ${templateKeys.length}`,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `nav:prev:${topicKey}` },
              { text: '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', callback_data: `nav:next:${topicKey}` },
            ],
            [
              {
                text: '‚úîÔ∏è –ü—Ä–∏–º–µ–Ω–∏—Ç—å',
                callback_data: `select:${currentTemplateKey}:${topicKey}`,
              },
            ],
          ],
        },
      }
    );
    return;
  }

  if (callbackData.startsWith('select:')) {
    const [, colorKey, topicKey] = callbackData.split(':');

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –∏–∑ –ø–∞–º—è—Ç–∏
    const topicData = global.carouselTopics?.[topicKey];
    if (!topicData) {
      await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
      return;
    }

    const { topic, messageId } = topicData;
    const colorTemplate = colorKey as ColorTemplate;
    const telegramUserId = ctx.from?.id;

    const templates = InstagramCanvasService.getColorTemplates();
    const selectedTemplate = templates[colorTemplate];

    try {
      // üîß –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
      await ctx.editMessageText(
        `üé® **–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—É—Å–µ–ª—å –≤ —Å—Ç–∏–ª–µ "${selectedTemplate.name}"**\n\n` +
          `üìù **–¢–µ–º–∞:** "${topic}"\n` +
          `üé® **–°—Ç–∏–ª—å:** ${selectedTemplate.emoji} ${selectedTemplate.name}\n\n` +
          `‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... –°–æ–∑–¥–∞—é –¥–ª—è –≤–∞—Å –∫—Ä–∞—Å–∏–≤—ã–µ —Å–ª–∞–π–¥—ã!`,
        { parse_mode: 'Markdown', reply_markup: undefined }
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Inngest —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º
      logger.info('–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –≤ Inngest —Å —Ü–≤–µ—Ç–æ–≤—ã–º —Ç–µ–º–ø–ª–µ–π—Ç–æ–º', {
        type: LogType.BUSINESS_LOGIC,
        data: {
          topic,
          telegramUserId,
          colorTemplate,
          eventName: 'app/carousel.generate.request',
          inngestBaseUrl:
            process.env.NODE_ENV !== 'production'
              ? `http://localhost:8288`
              : 'production',
        },
      });

      await inngest.send({
        name: 'app/carousel.generate.request',
        data: {
          topic,
          telegramUserId: String(telegramUserId),
          messageId,
          colorTemplate, // üé® –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç–æ–≤–æ–π —Ç–µ–º–ø–ª–µ–π—Ç
        },
      });

      logger.info(
        '‚úÖ –°–æ–±—ã—Ç–∏–µ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—É—Å–µ–ª–∏ —Å —Ü–≤–µ—Ç–æ–≤—ã–º —Ç–µ–º–ø–ª–µ–π—Ç–æ–º –£–°–ü–ï–®–ù–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Inngest',
        {
          type: LogType.USER_ACTION,
          data: { topic, telegramUserId, colorTemplate },
        }
      );

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
      await ctx.answerCbQuery(`üé® –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: ${selectedTemplate.name}`);

      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏
      if (global.carouselTopics) {
        delete global.carouselTopics[topicKey];
      }
      if (global.carouselState) {
        delete global.carouselState[topicKey];
      }
    } catch (error) {
      logger.error(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è –≤ Inngest —Å —Ü–≤–µ—Ç–æ–≤—ã–º —Ç–µ–º–ø–ª–µ–π—Ç–æ–º',
        {
          type: LogType.BUSINESS_LOGIC,
          error: error instanceof Error ? error : new Error(String(error)),
          data: { topic, telegramUserId, colorTemplate },
        }
      );

      await ctx.editMessageText(
        '‚ùå **–û—à–∏–±–∫–∞!** –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—É—Å–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        { parse_mode: 'Markdown', reply_markup: undefined }
      );

      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');

      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (global.carouselTopics) {
        delete global.carouselTopics[topicKey];
      }
      if (global.carouselState) {
        delete global.carouselState[topicKey];
      }
    }
    return;
  }

  if (!callbackData.startsWith('color:')) {
    return;
  }

  const [, colorKey, topicKey] = callbackData.split(':');

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –∏–∑ –ø–∞–º—è—Ç–∏
  const topicData = global.carouselTopics?.[topicKey];
  if (!topicData) {
    await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
    return;
  }

  const { topic, messageId } = topicData;
  const colorTemplate = colorKey as ColorTemplate;
  const telegramUserId = ctx.from?.id;

  const templates = InstagramCanvasService.getColorTemplates();
  const selectedTemplate = templates[colorTemplate];

  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º
    await ctx.editMessageText(
      `üé® **–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—É—Å–µ–ª—å –≤ —Å—Ç–∏–ª–µ "${selectedTemplate.name}"**\n\n` +
        `üìù **–¢–µ–º–∞:** "${topic}"\n` +
        `üé® **–°—Ç–∏–ª—å:** ${selectedTemplate.emoji} ${selectedTemplate.name}\n\n` +
        `‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... –°–æ–∑–¥–∞—é –¥–ª—è –≤–∞—Å –∫—Ä–∞—Å–∏–≤—ã–µ —Å–ª–∞–π–¥—ã!`,
      { parse_mode: 'Markdown' }
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Inngest —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º
    logger.info('–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –≤ Inngest —Å —Ü–≤–µ—Ç–æ–≤—ã–º —Ç–µ–º–ø–ª–µ–π—Ç–æ–º', {
      type: LogType.BUSINESS_LOGIC,
      data: {
        topic,
        telegramUserId,
        colorTemplate,
        eventName: 'app/carousel.generate.request',
        inngestBaseUrl:
          process.env.NODE_ENV !== 'production'
            ? `http://localhost:8288`
            : 'production',
      },
    });

    await inngest.send({
      name: 'app/carousel.generate.request',
      data: {
        topic,
        telegramUserId: String(telegramUserId),
        messageId,
        colorTemplate, // üé® –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç–æ–≤–æ–π —Ç–µ–º–ø–ª–µ–π—Ç
      },
    });

    logger.info(
      '‚úÖ –°–æ–±—ã—Ç–∏–µ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—É—Å–µ–ª–∏ —Å —Ü–≤–µ—Ç–æ–≤—ã–º —Ç–µ–º–ø–ª–µ–π—Ç–æ–º –£–°–ü–ï–®–ù–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Inngest',
      {
        type: LogType.USER_ACTION,
        data: { topic, telegramUserId, colorTemplate },
      }
    );

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
    await ctx.answerCbQuery(`üé® –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: ${selectedTemplate.name}`);

    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏
    if (global.carouselTopics) {
      delete global.carouselTopics[topicKey];
    }
  } catch (error) {
    logger.error(
      '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è –≤ Inngest —Å —Ü–≤–µ—Ç–æ–≤—ã–º —Ç–µ–º–ø–ª–µ–π—Ç–æ–º',
      {
        type: LogType.BUSINESS_LOGIC,
        error: error instanceof Error ? error : new Error(String(error)),
        data: { topic, telegramUserId, colorTemplate },
      }
    );

    await ctx.editMessageText(
      '‚ùå **–û—à–∏–±–∫–∞!** –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—É—Å–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      { parse_mode: 'Markdown' }
    );

    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');

    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    if (global.carouselTopics) {
      delete global.carouselTopics[topicKey];
    }
  }
};

// üîç Research Command Handler
export const handleResearch: CommandHandler = async ctx => {
  const telegramUserId = ctx.from?.id;
  if (!telegramUserId) {
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  const messageText = (ctx as any)?.message?.text || '';
  const topic = messageText.replace('/research', '').trim();

  if (!topic) {
    await ctx.reply(
      'üïâÔ∏è *VibeCoding Research Agent*\n\n' +
        '–ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–µ–º VibeCoding —Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º –∏ AI-–∞–Ω–∞–ª–∏–∑–æ–º\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Å —Ç–µ–º–æ–π:\n' +
        '`/research <—Ç–µ–º–∞>`\n\n' +
        '–ü—Ä–∏–º–µ—Ä—ã:\n' +
        '‚Ä¢ `/research –º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ`\n' +
        '‚Ä¢ `/research AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã 2025`\n' +
        '‚Ä¢ `/research —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`\n' +
        '‚Ä¢ `/research cursor ai –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏`\n\n' +
        '*Agent –≤—ã–ø–æ–ª–Ω–∏—Ç –≤–µ–±-–ø–æ–∏—Å–∫, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç*',
      { parse_mode: 'Markdown' }
    );
    return;
  }

  logger.info('/research command received', {
    type: LogType.USER_ACTION,
    data: { text: messageText },
  });

  try {
    await inngest.send({
      name: 'app/research.request',
      data: {
        topic,
        telegramUserId,
        depth: 'detailed',
      },
    });

    logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –£–°–ü–ï–®–ù–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Inngest', {
      type: LogType.USER_ACTION,
      data: { topic, telegramUserId },
    });

    await ctx.reply(
      `ü§ñ *VibeCoding Research Agent –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω*\n\n` +
        `üìä –ò—Å—Å–ª–µ–¥—É—é —Ç–µ–º—É: "${topic}"\n\n` +
        'üîç –í—ã–ø–æ–ª–Ω—è—é –≤–µ–±-–ø–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...\n' +
        'üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É VibeCoding...\n' +
        'üìù –ì–æ—Ç–æ–≤–ª—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç...\n\n' +
        '‚è≥ *–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ 30-60 —Å–µ–∫—É–Ω–¥*',
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ Inngest', {
      type: LogType.ERROR,
      error: error instanceof Error ? error : new Error(String(error)),
    });

    await ctx.reply(
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.\n' +
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
    );
  }
};

// üí° Ask Command Handler
export const handleAsk: CommandHandler = async ctx => {
  const telegramUserId = ctx.from?.id;
  if (!telegramUserId) {
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  const messageText = (ctx as any)?.message?.text || '';
  const question = messageText.replace('/ask', '').trim();

  if (!question) {
    await ctx.reply(
      'üïâÔ∏è *VibeCoding Wisdom*\n\n' +
        '–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ VibeCoding\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Å –≤–æ–ø—Ä–æ—Å–æ–º:\n' +
        '`/ask <–≤–æ–ø—Ä–æ—Å>`\n\n' +
        '–ü—Ä–∏–º–µ—Ä—ã:\n' +
        '‚Ä¢ `/ask –∫–∞–∫ –Ω–∞—á–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ?`\n' +
        '‚Ä¢ `/ask —á—Ç–æ —Ç–∞–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞?`\n' +
        '‚Ä¢ `/ask –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Cursor AI?`\n' +
        '‚Ä¢ `/ask –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∏–Ω–≥–∞`\n\n' +
        '*–î–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π* `/research <—Ç–µ–º–∞>`',
      { parse_mode: 'Markdown' }
    );
    return;
  }

  logger.info('/ask command received', {
    type: LogType.USER_ACTION,
    data: { text: messageText },
  });

  try {
    await inngest.send({
      name: 'app/question.ask',
      data: {
        question,
        telegramUserId,
      },
    });

    logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –£–°–ü–ï–®–ù–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Inngest', {
      type: LogType.USER_ACTION,
      data: { question, telegramUserId },
    });

    await ctx.reply(
      `ü§î *–†–∞–∑–º—ã—à–ª—è—é –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º...*\n\n` +
        `"${question}"\n\n` +
        '‚è≥ *–û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥*',
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è –≤–æ–ø—Ä–æ—Å–∞ –≤ Inngest', {
      type: LogType.ERROR,
      error: error instanceof Error ? error : new Error(String(error)),
    });

    await ctx.reply(
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞.\n' +
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/research` –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.'
    );
  }
};

// üìù Pure Text Handler
export const handleText: CommandHandler = async ctx => {
  logger.info('Text message received', {
    type: LogType.USER_ACTION,
    userId: ctx.from?.id,
    data: { text: (ctx as any).message?.text },
  });

  const text = (ctx as any).message?.text || '';
  const environment = detectEnvironment();
  const message = buildTextResponse(text, environment);

  await ctx.reply(message, { parse_mode: 'Markdown' });
};

// üïâÔ∏è Command Registry (Pure Data Structure)
export const COMMAND_HANDLERS = {
  start: handleStart,
  help: handleHelp,
  wisdom: handleWisdom,
  quick: handleQuickStart,
  carousel: handleCarousel,
  research: handleResearch,
  ask: handleAsk,
  colorSelection: handleColorSelection,
  text: handleText,
} as const;

// üéØ Pure Command Setup Function
export const setupFunctionalCommands = (bot: any): void => {
  bot.start(COMMAND_HANDLERS.start);
  bot.help(COMMAND_HANDLERS.help);
  bot.command('wisdom', COMMAND_HANDLERS.wisdom);
  bot.command('quick', COMMAND_HANDLERS.quick);
  bot.command('carousel', COMMAND_HANDLERS.carousel);
  bot.command('research', COMMAND_HANDLERS.research);
  bot.command('ask', COMMAND_HANDLERS.ask);

  // üé® –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
  bot.on('callback_query', COMMAND_HANDLERS.colorSelection);

  bot.on('text', COMMAND_HANDLERS.text);

  const environment = detectEnvironment();
  logger.info(
    `‚úÖ Functional commands registered: start, help, wisdom, quick, carousel, research, ask, colorSelection, text | ${environment.platform}`,
    {
      type: LogType.SYSTEM,
      data: { environment },
    }
  );
};

// üïâÔ∏è Sacred Export
export const FunctionalCommands = {
  // Environment
  detectEnvironment,

  // Message Builders
  buildWelcomeMessage,
  buildHelpMessage,
  buildTextResponse,

  // Wisdom
  getRandomWisdom,
  getDailyWisdom,
  SACRED_WISDOM,

  // Handlers
  ...COMMAND_HANDLERS,

  // Setup
  setupFunctionalCommands,
} as const;

export default FunctionalCommands;
